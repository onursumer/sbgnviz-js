/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["sbgnviz"] = factory();
	else
		root["sbgnviz"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function () {\n  var sbgnviz = function sbgnviz(_options) {\n    var libsbml = __webpack_require__(/*! libsbmljs_stable */ \"libsbmljs_stable\");\n    var libsbmlInstance = libsbml();\n    var param = {}; // The parameter to be passed to all utilities instances related to this sbgnviz instance\n\n    var optionUtilities = __webpack_require__(/*! ./utilities/option-utilities-factory */ \"./src/utilities/option-utilities-factory.js\")();\n    var options = optionUtilities.extendOptions(_options);\n    var sbgnCyInstance = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-instance-factory */ \"./src/sbgn-extensions/sbgn-cy-instance-factory.js\")();\n\n    // Utilities whose functions will be exposed seperately\n    var uiUtilities = __webpack_require__(/*! ./utilities/ui-utilities-factory */ \"./src/utilities/ui-utilities-factory.js\")();\n    var fileUtilities = __webpack_require__(/*! ./utilities/file-utilities-factory */ \"./src/utilities/file-utilities-factory.js\")();\n    var graphUtilities = __webpack_require__(/*! ./utilities/graph-utilities-factory */ \"./src/utilities/graph-utilities-factory.js\")();\n    var mainUtilities = __webpack_require__(/*! ./utilities/main-utilities-factory */ \"./src/utilities/main-utilities-factory.js\")();\n    var keyboardInputUtilities = __webpack_require__(/*! ./utilities/keyboard-input-utilities-factory */ \"./src/utilities/keyboard-input-utilities-factory.js\")(); // require keybord input utilities\n    var experimentalDataOverlay = __webpack_require__(/*! ./utilities/experimental-data-overlay */ \"./src/utilities/experimental-data-overlay.js\")();\n    // Utilities to be exposed as is\n    var elementUtilities = __webpack_require__(/*! ./utilities/element-utilities-factory */ \"./src/utilities/element-utilities-factory.js\")();\n    var undoRedoActionFunctions = __webpack_require__(/*! ./utilities/undo-redo-action-functions-factory */ \"./src/utilities/undo-redo-action-functions-factory.js\")();\n\n    // Other utilities\n    var jsonToSbgnmlConverter = __webpack_require__(/*! ./utilities/json-to-sbgnml-converter-factory */ \"./src/utilities/json-to-sbgnml-converter-factory.js\")();\n    var jsonToSbmlConverter = __webpack_require__(/*! ./utilities/json-to-sbml-converter-factory */ \"./src/utilities/json-to-sbml-converter-factory.js\")();\n    var jsonToNwtConverter = __webpack_require__(/*! ./utilities/json-to-nwt-converter-factory */ \"./src/utilities/json-to-nwt-converter-factory.js\")();\n    var sbgnmlToJsonConverter = __webpack_require__(/*! ./utilities/sbgnml-to-json-converter-factory */ \"./src/utilities/sbgnml-to-json-converter-factory.js\")();\n    var sbmlToJsonConverter = __webpack_require__(/*! ./utilities/sbml-to-json-converter-factory */ \"./src/utilities/sbml-to-json-converter-factory.js\")();\n    var nwtToJsonConverter = __webpack_require__(/*! ./utilities/nwt-to-json-converter-factory */ \"./src/utilities/nwt-to-json-converter-factory.js\")();\n    var tdToJsonConverter = __webpack_require__(/*! ./utilities/tab-delimited-to-json-converter-factory */ \"./src/utilities/tab-delimited-to-json-converter-factory.js\")();\n    var sifToJsonConverter = __webpack_require__(/*! ./utilities/sif-to-json-converter-factory */ \"./src/utilities/sif-to-json-converter-factory.js\")();\n    var jsonToSifConverter = __webpack_require__(/*! ./utilities/json-to-sif-converter-factory */ \"./src/utilities/json-to-sif-converter-factory.js\")();\n    var classes = __webpack_require__(/*! ./utilities/classes */ \"./src/utilities/classes.js\");\n    var tdParser = __webpack_require__(/*! ./utilities/tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\n    var layoutLoader = __webpack_require__(/*! ./utilities/layout-loader-factory */ \"./src/utilities/layout-loader-factory.js\")();\n    var layoutToText = __webpack_require__(/*! ./utilities/layout-to-text-factory */ \"./src/utilities/layout-to-text-factory.js\")();\n    var cdToSbgnmlConverter = __webpack_require__(/*! ./utilities/cd-to-sbgnml-converter-factory */ \"./src/utilities/cd-to-sbgnml-converter-factory.js\")();\n    var sbgnmlToCdConverter = __webpack_require__(/*! ./utilities/sbgnml-to-cd-converter-factory */ \"./src/utilities/sbgnml-to-cd-converter-factory.js\")();\n    var sbgnmlToSbmlConverter = __webpack_require__(/*! ./utilities/sbgnml-to-sbml-converter-factory */ \"./src/utilities/sbgnml-to-sbml-converter-factory.js\")();\n    var sbmlToSbgnmlConverter = __webpack_require__(/*! ./utilities/sbml-to-sbgnml-converter-factory */ \"./src/utilities/sbml-to-sbgnml-converter-factory.js\")();\n    var sbgnmlToGpmlConverter = __webpack_require__(/*! ./utilities/sbgnml-to-gpml-converter-factory */ \"./src/utilities/sbgnml-to-gpml-converter-factory.js\")();\n    var gpmlToSbgnmlConverter = __webpack_require__(/*! ./utilities/gpml-to-sbgnml-converter-factory */ \"./src/utilities/gpml-to-sbgnml-converter-factory.js\")();\n    var sbmlSimulationUtilities = __webpack_require__(/*! ./utilities/sbml-simulation-utilities-factory */ \"./src/utilities/sbml-simulation-utilities-factory.js\")();\n    // Fill param object to use it utilities internally\n\n    param.optionUtilities = optionUtilities;\n    param.sbgnCyInstance = sbgnCyInstance;\n    param.uiUtilities = uiUtilities;\n    param.fileUtilities = fileUtilities;\n    param.graphUtilities = graphUtilities;\n    param.mainUtilities = mainUtilities;\n    param.keyboardInputUtilities = keyboardInputUtilities;\n    param.elementUtilities = elementUtilities;\n    param.undoRedoActionFunctions = undoRedoActionFunctions;\n    param.jsonToSbgnmlConverter = jsonToSbgnmlConverter;\n    param.jsonToSbmlConverter = jsonToSbmlConverter;\n    param.jsonToNwtConverter = jsonToNwtConverter;\n    param.sbgnmlToJsonConverter = sbgnmlToJsonConverter;\n    param.sbmlToJsonConverter = sbmlToJsonConverter;\n    param.nwtToJsonConverter = nwtToJsonConverter;\n    param.tdToJsonConverter = tdToJsonConverter;\n    param.sifToJsonConverter = sifToJsonConverter;\n    param.classes = classes;\n    param.layoutLoader = layoutLoader;\n    param.layoutToText = layoutToText;\n    param.jsonToSifConverter = jsonToSifConverter;\n    param.cdToSbgnmlConverter = cdToSbgnmlConverter;\n    param.sbgnmlToCdConverter = sbgnmlToCdConverter;\n    param.sbgnmlToSbmlConverter = sbgnmlToSbmlConverter;\n    param.sbmlToSbgnmlConverter = sbmlToSbgnmlConverter;\n    param.sbgnmlToGpmlConverter = sbgnmlToGpmlConverter;\n    param.gpmlToSbgnmlConverter = gpmlToSbgnmlConverter;\n    param.experimentalDataOverlay = experimentalDataOverlay;\n    param.libsbmlInstance = libsbmlInstance;\n    param.sbmlSimulationUtilities = sbmlSimulationUtilities;\n\n    // call constructors of objects with param\n\n    sbgnCyInstance(param);\n    optionUtilities(param);\n    uiUtilities(param);\n    fileUtilities(param);\n    graphUtilities(param);\n    mainUtilities(param);\n    keyboardInputUtilities(param);\n    elementUtilities(param);\n    undoRedoActionFunctions(param);\n    jsonToSbgnmlConverter(param);\n    jsonToSbmlConverter(param);\n    jsonToNwtConverter(param);\n    sbgnmlToJsonConverter(param);\n    sbmlToJsonConverter(param);\n    nwtToJsonConverter(param);\n    tdToJsonConverter(param);\n    sifToJsonConverter(param);\n    layoutLoader(param);\n    layoutToText(param);\n    jsonToSifConverter(param);\n    cdToSbgnmlConverter(param);\n    sbgnmlToCdConverter(param);\n    sbgnmlToSbmlConverter(param);\n    sbmlToSbgnmlConverter(param);\n    sbgnmlToGpmlConverter(param);\n    gpmlToSbgnmlConverter(param);\n    experimentalDataOverlay(param);\n    sbmlSimulationUtilities(param);\n\n    // set scratch pad for sbgnviz and init sbgnvizParams inside it\n    sbgnCyInstance.getCy().scratch('_sbgnviz', {});\n    sbgnCyInstance.getCy().scratch('_sbgnviz').sbgnvizParams = param;\n\n    // Expose the api\n    var api = {};\n\n    // Expose elementUtilities and undoRedoActionFunctions as is, most users will not need these\n    api.elementUtilities = elementUtilities;\n    api.undoRedoActionFunctions = undoRedoActionFunctions;\n    //api.experimentalDataOverlay = experimentalDataOverlay;\n\n    //expose utility of experimental data-overlay\n    for (var prop in experimentalDataOverlay) {\n      api[prop] = experimentalDataOverlay[prop];\n    }\n\n    // Expose each main utility seperately\n    for (var prop in mainUtilities) {\n      api[prop] = mainUtilities[prop];\n    }\n\n    // Expose each file utility seperately\n    for (var prop in fileUtilities) {\n      api[prop] = fileUtilities[prop];\n    }\n\n    // Expose each file utility seperately\n    for (var prop in uiUtilities) {\n      api[prop] = uiUtilities[prop];\n    }\n\n    // Expose each sbgn graph utility seperately\n    for (var prop in graphUtilities) {\n      api[prop] = graphUtilities[prop];\n    }\n\n    // Expose each sbgn graph utility seperately\n    for (var prop in sbmlSimulationUtilities) {\n      api[prop] = sbmlSimulationUtilities[prop];\n    }\n\n    // Expose createSbml\n    api[\"createSbml\"] = jsonToSbmlConverter.createSbml;\n\n    // Expose get cy function to enable accessing related cy instance\n    api.getCy = sbgnCyInstance.getCy;\n\n    // Expose some utilities directly here\n    api.classes = classes;\n    api.tdParser = tdParser;\n    return api;\n  };\n  sbgnviz.validMapProperties = __webpack_require__(/*! ./utilities/validMapProperties */ \"./src/utilities/validMapProperties.js\");\n  sbgnviz.register = function (_libs) {\n    var libs = {};\n    libs.jQuery = _libs.jQuery || jQuery;\n    libs.cytoscape = _libs.cytoscape || cytoscape;\n    libs.saveAs = _libs.filesaver ? _libs.filesaver.saveAs : saveAs;\n    libs.tippy = _libs.tippy || Tippy;\n\n    // Set the libraries to access them from any file\n    var libUtilities = __webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\");\n    libUtilities.setLibs(libs);\n    var sbgnRenderer = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-renderer */ \"./src/sbgn-extensions/sbgn-cy-renderer.js\");\n    sbgnRenderer();\n  };\n  if ( true && module.exports) {\n    module.exports = sbgnviz;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-instance-factory.js":
/*!*********************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-instance-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var classes = __webpack_require__(/*! ../utilities/classes */ \"./src/utilities/classes.js\");\nvar libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\nvar Tippy = libs.tippy;\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, mainUtilities, undoRedoActionFunctions, optionUtilities, experimentalDataOverlay;\n  var refreshPaddings, options, cy;\n  var sbgnCyInstance = function sbgnCyInstance(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    mainUtilities = param.mainUtilities;\n    undoRedoActionFunctions = param.undoRedoActionFunctions;\n    refreshPaddings = graphUtilities.refreshPaddings.bind(graphUtilities);\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n\n    // cy = param.sbgnCyInstance.getCy();\n\n    /*\n     * Returns the coordinates of the point located on the given angle on the circle with the given centeral coordinates and radius.\n     */\n    var getPointOnCircle = function getPointOnCircle(centerX, centerY, radius, angleInDegree) {\n      var angleInRadian = angleInDegree * (Math.PI / 180); // Convert degree to radian\n      return {\n        x: radius * Math.cos(angleInRadian) + centerX,\n        y: -1 * radius * Math.sin(angleInRadian) + centerY // We multiply with -1 here because JS y coordinate sign is the oposite of the Mathamatical coordinates system\n      };\n    };\n\n    /*\n     * Generates a polygon string approximating a circle with given center, radius, start, end angles and number of points to represent the circle\n     */\n    var generateCircleString = function generateCircleString(centerX, centerY, radius, angleFrom, angleTo, numOfPoints) {\n      var circleStr = \"\";\n      var stepSize = (angleTo - angleFrom) / numOfPoints; // We will increment the current angle by step size in each iteration\n      var currentAngle = angleFrom; // current angle will be updated in each iteration\n\n      for (var i = 0; i < numOfPoints; i++) {\n        var point = getPointOnCircle(centerX, centerY, radius, currentAngle);\n        currentAngle += stepSize;\n        circleStr += point.x + \" \" + point.y + \" \";\n      }\n      return circleStr;\n    };\n\n    /*\n     *  Generates a string representing processes/logical operators with ports.\n     *  lineHW: Half width of line through the circle to the intersection point\n     *  shapeHW: Half width of the shape discluding the ports (It is radius for the circular shapes)\n     *  type: Type of the shape discluding the ports. Options are 'circle', 'rectangle'\n     *  orientation: Orientation of the ports Options are 'horizontal', 'vertical'\n     */\n\n    var generateShapeWithPortString = function generateShapeWithPortString(lineHW, shapeHW, type, orientation) {\n      var polygonStr;\n      var numOfPoints = 30; // Number of points that both halves of circle will have\n      if (orientation === 'horizontal') {\n        var abovePoints, belowPoints;\n        if (type === 'circle') {\n          abovePoints = generateCircleString(0, 0, shapeHW, 180, 0, numOfPoints);\n          belowPoints = generateCircleString(0, 0, shapeHW, 360, 180, numOfPoints);\n        } else if (type === 'rectangle') {\n          abovePoints = '-' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';\n          belowPoints = shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';\n        }\n        polygonStr = \"-1 -\" + lineHW + \" -\" + shapeHW + \" -\" + lineHW + \" \";\n        polygonStr += abovePoints;\n        polygonStr += shapeHW + \" -\" + lineHW + \" 1 -\" + lineHW + \" 1 \" + lineHW + \" \" + shapeHW + \" \" + lineHW + \" \";\n        polygonStr += belowPoints;\n        polygonStr += \"-\" + shapeHW + \" \" + lineHW + \" -1 \" + lineHW;\n      } else {\n        var leftPoints, rightPoints;\n        if (type === 'circle') {\n          leftPoints = generateCircleString(0, 0, shapeHW, 90, 270, numOfPoints);\n          rightPoints = generateCircleString(0, 0, shapeHW, -90, 90, numOfPoints);\n        } else if (type === 'rectangle') {\n          leftPoints = '-' + shapeHW + ' -' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';\n          rightPoints = shapeHW + ' ' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';\n        }\n        polygonStr = \"-\" + lineHW + \" -\" + 1 + \" -\" + lineHW + \" -\" + shapeHW + \" \";\n        polygonStr += leftPoints;\n        polygonStr += \"-\" + lineHW + \" \" + shapeHW + \" -\" + lineHW + \" 1 \" + lineHW + \" 1 \" + lineHW + \" \" + shapeHW + \" \";\n        polygonStr += rightPoints;\n        polygonStr += lineHW + \" -\" + shapeHW + \" \" + lineHW + \" -1\";\n      }\n      return polygonStr;\n    };\n\n    // Note that in ChiSE this function is in a seperate file but in the viewer it has just 2 methods and so it is located in this file\n    function registerUndoRedoActions() {\n      // create or get the undo-redo instance\n      var ur = cy.undoRedo();\n\n      // register general actions\n      // register add remove actions\n      ur.action(\"deleteElesSimple\", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);\n      ur.action(\"deleteNodesSmart\", undoRedoActionFunctions.deleteNodesSmart, undoRedoActionFunctions.restoreEles);\n      ur.action(\"setPortsOrdering\", undoRedoActionFunctions.setPortsOrdering, undoRedoActionFunctions.setPortsOrdering);\n\n      //experimental data ovarlay\n      ur.action(\"removeAll\", undoRedoActionFunctions.removeAll, undoRedoActionFunctions.restoreAll);\n      ur.action(\"hideExperiment\", undoRedoActionFunctions.hideExp, undoRedoActionFunctions.unhideExp);\n      ur.action(\"unhideExperiment\", undoRedoActionFunctions.unhideExp, undoRedoActionFunctions.hideExp);\n      ur.action(\"hideFile\", undoRedoActionFunctions.hideFile, undoRedoActionFunctions.hideFileUndo);\n      ur.action(\"unhideFile\", undoRedoActionFunctions.unhideFile, undoRedoActionFunctions.unhideFileUndo);\n      ur.action(\"removeExperiment\", undoRedoActionFunctions.removeExp, undoRedoActionFunctions.addExp);\n      ur.action(\"removeFile\", undoRedoActionFunctions.removeFile, undoRedoActionFunctions.addFile);\n      ur.action(\"expButtonChange\", undoRedoActionFunctions.expButtonChange, undoRedoActionFunctions.expButtonChange);\n      ur.action(\"fileButtonChangeHide\", undoRedoActionFunctions.fileButtonChangeHide, undoRedoActionFunctions.fileButtonChangeUnHide);\n      ur.action(\"fileButtonChangeUnHide\", undoRedoActionFunctions.fileButtonChangeUnHide, undoRedoActionFunctions.fileButtonChangeHide);\n\n      //ur.action(\"expButtonUnhide\", undoRedoActionFunctions.changeExpButton2, undoRedoActionFunctions.expButtonHide);\n      //ur.action(\"parseData\", undoRedoActionFunctions.parseData, undoRedoActionFunctions.removeFile);\n    }\n    function showTooltip(event) {\n      var node = event.target || event.cyTarget;\n      var canHaveTooltip = function canHaveTooltip(node) {\n        return elementUtilities.isSIFNode(node) || node.data(\"tooltip\") !== null;\n      };\n      if (!canHaveTooltip(node)) {\n        return;\n      }\n      var ref; // used only for positioning\n      var pos = event.position || event.cyPosition;\n      var pan = cy.pan();\n      var zoom = cy.zoom();\n      var infobox = classes.AuxiliaryUnit.checkPoint(pos.x, pos.y, node, 0);\n      var tooltipContent;\n      if (!infobox) {\n        tooltipContent = node.data('tooltip');\n        if (tooltipContent == undefined || tooltipContent == '') {\n          return;\n        }\n        ref = node.popperRef();\n      } else {\n        tooltipContent = infobox['tooltip'];\n        if (tooltipContent == undefined) {\n          return;\n        }\n        var modelPos = classes.AuxiliaryUnit.getAbsoluteCoord(infobox, cy);\n        var modelW = infobox.bbox.w;\n        var modelH = infobox.bbox.h;\n        var renderedW = modelW * zoom;\n        var renderedH = modelH * zoom;\n        modelPos.x -= modelW / 2;\n        modelPos.y -= modelH / 2;\n        var renderedPos = elementUtilities.convertToRenderedPosition(modelPos, pan, zoom);\n        var renderedDims = {\n          w: renderedW,\n          h: renderedH\n        };\n        ref = node.popperRef({\n          renderedPosition: function renderedPosition() {\n            return renderedPos;\n          },\n          renderedDimensions: function renderedDimensions() {\n            return renderedDims;\n          }\n        });\n      }\n      var placement = infobox ? infobox.anchorSide : 'bottom';\n      var destroyTippy;\n      var tippy = Tippy.one(ref, {\n        content: function () {\n          var content = document.createElement('div');\n          content.style['font-size'] = 12 * zoom + 'px';\n          content.innerHTML = tooltipContent;\n          return content;\n        }(),\n        trigger: 'manual',\n        hideOnClick: true,\n        arrow: true,\n        placement: placement,\n        onHidden: function onHidden() {\n          cy.off('pan zoom', destroyTippy);\n          node.off('position', destroyTippy);\n          cy.off('tapdrag', destroyTippy);\n        }\n      });\n      destroyTippy = function destroyTippy() {\n        tippy.destroy();\n      };\n      cy.on('pan zoom', destroyTippy);\n      node.on('position', destroyTippy);\n      cy.on('tapdrag', destroyTippy);\n      setTimeout(function () {\n        return tippy.show();\n      }, 250);\n    }\n    function bindCyEvents() {\n      cy.on('tapdragover', 'node', function (event) {\n        var waitDuration = 200;\n        var nodeTapdragout;\n        var currEvent = event;\n        var node = currEvent.target || currEvent.cyTarget;\n        var inQueue = true;\n        var clearNodeEvent = function clearNodeEvent() {\n          if (nodeTapdragout) {\n            node.off('tapdragout', nodeTapdragout);\n          }\n          if (nodeTapdrag) {\n            node.off('tapdrag', nodeTapdrag);\n          }\n        };\n        var getShowTooltipAsycn = function getShowTooltipAsycn() {\n          return setTimeout(function () {\n            showTooltip(currEvent);\n            inQueue = false;\n          }, waitDuration);\n        };\n        var showTooltipAsycn = getShowTooltipAsycn();\n        node.on('tapdragout', nodeTapdragout = function nodeTapdragout(e) {\n          clearTimeout(showTooltipAsycn);\n          clearNodeEvent();\n        });\n        node.on('tapdrag', nodeTapdrag = function nodeTapdrag(e) {\n          currEvent = e;\n          if (!inQueue) {\n            showTooltipAsycn = getShowTooltipAsycn();\n            inQueue = true;\n          }\n        });\n      });\n      cy.on('tapend', 'node', function (event) {\n        cy.style().update();\n      });\n      cy.on(\"expandcollapse.beforecollapse\", \"node\", function (event) {\n        var node = this;\n        //The children info of complex nodes should be shown when they are collapsed\n        if (node._private.data[\"class\"].startsWith(\"complex\")) {\n          //The node is being collapsed store infolabel to use it later\n          var infoLabel = elementUtilities.getInfoLabel(node);\n          node._private.data.infoLabel = infoLabel;\n        }\n      });\n      cy.on(\"expandcollapse.aftercollapse\", \"node\", function (event) {\n        var node = this;\n        // The width and height of just collapsed nodes should be 36, but they are supposed to be resizable. Therefore, we\n        // set their data('bbox') accordingly. We do not store their existing bbox.w and bbox.h because they have no significance for compounds (for now).\n        cy.startBatch();\n        var bbox = node.data('bbox');\n        bbox.w = 36;\n        bbox.h = 36;\n        node.data('bbox', bbox);\n        cy.endBatch();\n      });\n      cy.on(\"expandcollapse.beforeexpand\", \"node\", function (event) {\n        var node = this;\n        node.removeData(\"infoLabel\");\n      });\n      cy.on(\"expandcollapse.afterexpand\", \"node\", function (event) {\n        var node = this;\n        cy.nodes().updateCompoundBounds();\n        if (!options.recalculateOnComplexityManagement) {\n          cy.style().update();\n        }\n        //Don't show children info when the complex node is expanded\n        if (node._private.data[\"class\"].startsWith(\"complex\")) {\n          node.removeStyle('content');\n        }\n      });\n      cy.on(\"beforeDo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n          var allElements = parents.concat(simples); // all elements\n          args.allElements = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports = ports;\n          args.viewport = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n          if (name == \"layout\") mainUtilities.beforePerformLayout();\n        }\n      });\n      cy.on(\"beforeRedo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n          var allElements = parents.concat(simples); // all elements\n          args.allElements2 = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports2 = ports;\n          args.viewport2 = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n        }\n      });\n      cy.on(\"afterDo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements;\n          res.ports = args.ports;\n          res.viewport = args.viewport;\n        }\n      });\n      cy.on(\"afterRedo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements2;\n          res.ports = args.ports2;\n          res.viewport = args.viewport2;\n          cy.json({\n            flatEles: true,\n            elements: args.allElements\n          });\n          cy.batch(function () {\n            cy.nodes().forEach(function (node) {\n              if (elementUtilities.canHavePorts(node)) {\n                node.data(\"ports\", args.ports[node.id()]);\n              }\n            });\n          });\n          cy.pan(args.viewport[\"pan\"]);\n          cy.zoom(args.viewport[\"zoom\"]);\n        }\n      });\n      cy.on(\"beforeUndo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n          var allElements = parents.concat(simples); // all elements\n          args.allElements2 = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports2 = ports;\n          args.viewport2 = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n        }\n      });\n      cy.on(\"afterUndo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements2;\n          res.ports = args.ports2;\n          res.viewport = args.viewport2;\n          cy.json({\n            flatEles: true,\n            elements: args.allElements\n          });\n          cy.batch(function () {\n            cy.nodes().forEach(function (node) {\n              if (elementUtilities.canHavePorts(node)) {\n                node.data(\"ports\", args.ports[node.id()]);\n              }\n            });\n          });\n          cy.pan(args.viewport[\"pan\"]);\n          cy.zoom(args.viewport[\"zoom\"]);\n        }\n      });\n      cy.on('layoutstop', function (event) {\n        /*\n        * 'preset' layout is called to give the initial positions of nodes by sbgnviz.\n        * Seems like 'grid' layout is called by Cytoscape.js core in loading graphs.\n        * If the layout is not one of these (normally it is supposed to be 'cose-bilkent')\n        * and ports are enabled call 'elementUtilities.changePortsOrientationAfterLayout()'\n        */\n        if (event.layout.options.name !== 'preset' && event.layout.options.name !== 'grid') {\n          // 3000 nodes/edges check is for performance improvement\n          if (graphUtilities.portsEnabled === true && !(cy.nodes().length > 3000 || cy.edges().length > 3000)) {\n            elementUtilities.changePortsOrientationAfterLayout();\n          }\n        }\n      });\n      $(document).on('updateGraphEnd', function (event, _cy, isLayoutRequired, callback) {\n        // if the event is not triggered for this cy instance return directly\n        if (_cy != cy) {\n          return;\n        }\n        var setCompoundInfoboxes = function setCompoundInfoboxes(node, isLayoutRequired, cyInstance) {\n          if (cyInstance == undefined) return;\n          if (node.data().infoboxCalculated) {\n            return;\n          } else if (node.isParent()) {\n            node.children().forEach(function (childNode) {\n              setCompoundInfoboxes(childNode, isLayoutRequired, cyInstance);\n            });\n          }\n          node.data(\"infoboxCalculated\", true);\n          node.data('auxunitlayouts', {});\n          // for each statesandinfos\n\n          var correctInfoBoxCoord = true;\n          for (var i = 0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            var bbox = statesandinfos.bbox;\n            var infoBoxOnNode = classes.AuxiliaryUnit.setAnchorSide(statesandinfos, node);\n            correctInfoBoxCoord = correctInfoBoxCoord && infoBoxOnNode;\n          }\n          for (var i = 0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            var bbox = statesandinfos.bbox;\n            if ((isLayoutRequired === undefined || !isLayoutRequired) && correctInfoBoxCoord) {\n              var cordResult = classes.AuxiliaryUnit.convertToRelativeCoord(statesandinfos, bbox.x + bbox.w / 2, bbox.y + bbox.h / 2, cyInstance, node);\n              statesandinfos.bbox.x = cordResult.x;\n              statesandinfos.bbox.y = cordResult.y;\n              statesandinfos.isDisplayed = true;\n              var location = statesandinfos.anchorSide; // top bottom right left\n              var layouts = node.data('auxunitlayouts');\n              if (!layouts[location]) {\n                // layout doesn't exist yet for this location\n                layouts[location] = classes.AuxUnitLayout.construct(node, location);\n              }\n              // populate the layout of this side\n              classes.AuxUnitLayout.addAuxUnit(layouts[location], cyInstance, statesandinfos, undefined, true); //positions are precomputed\n            } else {\n              if (!node.data('auxunitlayouts')) {\n                // ensure minimal initialization\n                node.data('auxunitlayouts', {});\n              }\n              var location = classes.AuxUnitLayout.selectNextAvailable(node, cy);\n              if (!node.data('auxunitlayouts')[location]) {\n                node.data('auxunitlayouts')[location] = classes.AuxUnitLayout.construct(node, location);\n              }\n              var layout = node.data('auxunitlayouts')[location];\n              statesandinfos.anchorSide = location;\n              switch (location) {\n                case \"top\":\n                  statesandinfos.bbox.y = 0;\n                  break;\n                case \"bottom\":\n                  statesandinfos.bbox.y = 100;\n                  break;\n                case \"left\":\n                  statesandinfos.bbox.x = 0;\n                  break;\n                case \"right\":\n                  statesandinfos.bbox.x = 100;\n                  break;\n              }\n              classes.AuxUnitLayout.addAuxUnit(layout, cyInstance, statesandinfos);\n            }\n          }\n          if (isLayoutRequired === true) {\n            var locations = classes.AuxUnitLayout.checkFit(node, cy);\n            if (locations !== undefined && locations.length > 0) {\n              classes.AuxUnitLayout.fitUnits(node, cy, locations);\n            }\n          }\n        };\n        // list all entitytypes andstore them in the global scratch\n        // only stateful EPN (complex, macromolecule or nucleic acid) are concerned\n\n        // assign statesandinfos to their layout\n        cy.style().update();\n        // cy.startBatch();\n\n        // this check is for performance improvement\n        if (!(cy.nodes().length > 3000 || cy.edges().length > 3000)) {\n          cy.nodes().forEach(function (node) {\n            setCompoundInfoboxes(node, isLayoutRequired, cy);\n          });\n        }\n        if (callback) {\n          callback();\n        }\n\n        //cy.endBatch();\n      });\n    }\n    var selectionColor = '#89898a';\n    var sbgnStyleSheet = cytoscape.stylesheet().selector(\"node\").css({\n      'text-valign': 'center',\n      'text-halign': 'center',\n      'text-opacity': 1,\n      'opacity': 1,\n      'padding': 0\n    }).selector(\"node[class]\").css({\n      'shape': function shape(ele) {\n        return elementUtilities.getCyShape(ele);\n      },\n      'content': function content(ele) {\n        return elementUtilities.getElementContent(ele);\n      },\n      'font-size': function fontSize(ele) {\n        // If node labels are expected to be adjusted automatically or element cannot have label\n        // or ele.data('font-size') is not defined return elementUtilities.getLabelTextSize()\n        // else return ele.data('font-size')\n        var opt = options.adjustNodeLabelFontSizeAutomatically;\n        var adjust = typeof opt === 'function' ? opt() : opt;\n        if (!adjust && ele.data('font-size') != undefined) {\n          return ele.data('font-size');\n        }\n        return elementUtilities.getLabelTextSize(ele);\n      }\n    }).selector(\"node[class][font-family]\").style({\n      'font-family': function fontFamily(ele) {\n        return ele.data('font-family');\n      }\n    }).selector(\"node[class][font-style]\").style({\n      'font-style': function fontStyle(ele) {\n        return ele.data('font-style');\n      }\n    }).selector(\"node[class][font-weight]\").style({\n      'font-weight': function fontWeight(ele) {\n        return ele.data('font-weight');\n      }\n    }).selector(\"node[class][color]\").style({\n      'color': function color(ele) {\n        return ele.data('color');\n      }\n    }).selector(\"node[class][background-color]\").style({\n      'background-color': function backgroundColor(ele) {\n        return ele.data('background-color');\n      }\n    }).selector(\"node[class][background-opacity]\").style({\n      'background-opacity': function backgroundOpacity(ele) {\n        return ele.data('background-opacity');\n      }\n    }).selector(\"node[class][border-width]\").style({\n      'border-width': function borderWidth(ele) {\n        return ele.data('border-width');\n      }\n    }).selector(\"node[class][border-color]\").style({\n      'border-color': function borderColor(ele) {\n        return ele.data('border-color');\n      }\n    }).selector(\"node[class][text-wrap]\").style({\n      'text-wrap': function textWrap(ele) {\n        var opt = options.fitLabelsToNodes;\n        var isFit = typeof opt === 'function' ? opt() : opt;\n        if (isFit) {\n          return 'ellipsis';\n        }\n        return ele.data('text-wrap');\n      }\n    }).selector(\"node\").style({\n      'text-max-width': function textMaxWidth(ele) {\n        var opt = options.fitLabelsToNodes;\n        var isFit = typeof opt === 'function' ? opt() : opt;\n        if (isFit) {\n          return ele.width();\n        }\n        return '1000px';\n      }\n    }).selector(\"edge[class][line-color]\").style({\n      'line-color': function lineColor(ele) {\n        return ele.data('line-color');\n      },\n      'source-arrow-color': function sourceArrowColor(ele) {\n        return ele.data('line-color');\n      },\n      'target-arrow-color': function targetArrowColor(ele) {\n        return ele.data('line-color');\n      }\n    }).selector(\"edge[class][width]\").style({\n      'width': function width(ele) {\n        return ele.data('width');\n      }\n    }).selector(\"node[class='association'],[class='dissociation'],[class='and'],[class='or'],[class='not'],[class='process'],[class='omitted process'],[class='uncertain process'],[class='truncated process'],[class='unknown logical operator']\").css({\n      'shape-polygon-points': function shapePolygonPoints(ele) {\n        if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {\n          // We assume that the ports of the edge are symetric according to the node center so just checking one port is enough for us\n          var port = ele.data('ports')[0];\n          // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'\n          var orientation = port.x === 0 ? 'vertical' : 'horizontal';\n          // The half width of the actual shape discluding the ports\n          var shapeHW = orientation === 'vertical' ? 50 / Math.abs(port.y) : 50 / Math.abs(port.x);\n          // Get the class of the node\n          var _class = ele.data('class');\n          // If class is one of process, omitted process or uncertain process then the type of actual shape is 'rectangle' else it is 'circle'\n          var type = _class.endsWith('process') ? 'rectangle' : 'circle';\n\n          // Generate a polygon string with above parameters and return it\n          return generateShapeWithPortString(0.01, shapeHW, type, orientation);\n        }\n\n        // This element is not expected to have a poygonial shape (Because it does not have 2 ports) just return a trivial string here not to have a run time bug\n        return '-1 -1 1 1 1 0';\n      }\n    }).selector(\"node[class='perturbing agent']\").css({\n      'shape-polygon-points': '-1, -1,   -0.5, 0,  -1, 1,   1, 1,   0.5, 0, 1, -1'\n    }).selector(\"node[class='tag']\").css({\n      'shape-polygon-points': '-1, -1,   0.25, -1,   1, 0,    0.25, 1,    -1, 1'\n    }).selector(\"node:parent[class^='complex']\") // start with complex\n    .css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': elementUtilities.getComplexMargin,\n      'padding': elementUtilities.getComplexPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node[class='compartment']\").css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': -1 * options.extraCompartmentPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node:parent[class='compartment']\").css({\n      'padding': function padding() {\n        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;\n      }\n    }).selector(\"node[class='submap']\").css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': -1 * options.extraCompartmentPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node:parent[class='submap'],[class='topology group']\").css({\n      'padding': function padding() {\n        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;\n      }\n    }).selector(\"node:childless[bbox]\").css({\n      'width': 'data(bbox.w)',\n      'height': 'data(bbox.h)'\n    }).selector(\"node:parent[minHeight]\").css({\n      'min-height': function minHeight(ele) {\n        if (graphUtilities.compoundSizesConsidered) {\n          return ele.data('minHeight');\n        }\n        return 0;\n      }\n    }).selector(\"node:parent[minHeightBiasTop]\").css({\n      'min-height-bias-top': function minHeightBiasTop(ele) {\n        var min = parseFloat(ele.data('minHeightBiasTop'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minHeightBiasBottom]\").css({\n      'min-height-bias-bottom': function minHeightBiasBottom(ele) {\n        var min = parseFloat(ele.data('minHeightBiasBottom'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minWidth]\").css({\n      'min-width': function minWidth(ele) {\n        if (graphUtilities.compoundSizesConsidered) {\n          return ele.data('minWidth');\n        }\n        return 0;\n      }\n    }).selector(\"node:parent[minWidthBiasLeft]\").css({\n      'min-width-bias-left': function minWidthBiasLeft(ele) {\n        var min = parseFloat(ele.data('minWidthBiasLeft'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minWidthBiasRight]\").css({\n      'min-width-bias-right': function minWidthBiasRight(ele) {\n        var min = parseFloat(ele.data('minWidthBiasRight'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node.cy-expand-collapse-collapsed-node\").css({\n      'border-style': 'dashed'\n    })\n    //   .selector(\"node:selected\")\n    //   .css({\n    //     'border-color': selectionColor,\n    //     'target-arrow-color': '#000',\n    // \t'text-outline-color': '#000',\n    // \t'border-width': function(ele){\n    // \t\treturn Math.max(parseFloat(ele.data('border-width')) + 2, 3);\n    // \t  }\n    //   })\n    .selector(\"node:active\").css({\n      'background-opacity': 0.7,\n      'overlay-color': selectionColor,\n      'overlay-padding': '14'\n    }).selector(\"edge\").css({\n      'curve-style': 'bezier',\n      'target-arrow-fill': function targetArrowFill(ele) {\n        return elementUtilities.getCyTargetArrowFill(ele);\n      },\n      'source-arrow-fill': 'hollow',\n      'text-border-color': function textBorderColor(ele) {\n        if (ele.selected()) {\n          return selectionColor;\n        }\n        return ele.css('line-color');\n      },\n      'color': function color(ele) {\n        if (ele.selected()) {\n          return selectionColor;\n        }\n        return ele.css('line-color');\n      },\n      'arrow-scale': 1.25\n    }).selector(\"edge.cy-expand-collapse-meta-edge\").css({\n      'line-color': '#C4C4C4',\n      'source-arrow-color': '#C4C4C4',\n      'target-arrow-color': '#C4C4C4'\n    })\n    //   .selector(\"edge:selected\")\n    //   .css({\n    //     'line-color': selectionColor,\n    //     'source-arrow-color': selectionColor,\n    // \t'target-arrow-color': selectionColor,\n    // \t'width': function(ele){\n    // \t\treturn Math.max(parseFloat(ele.data('width')) + 2, 3);\n    // \t  }\n    //   })\n    .selector(\"edge:active\").css({\n      'background-opacity': 0.7,\n      'overlay-color': selectionColor,\n      'overlay-padding': '8'\n    }).selector(\"edge[cardinality > 0]\").css({\n      'text-rotation': 'autorotate',\n      'text-background-shape': 'rectangle',\n      'text-border-opacity': '1',\n      'text-border-width': '1',\n      'text-background-color': 'white',\n      'text-background-opacity': '1'\n    }).selector(\"edge[class='consumption'][cardinality > 0]\").css({\n      'source-label': function sourceLabel(ele) {\n        return '' + ele.data('cardinality');\n      },\n      'source-text-margin-y': '-10',\n      'source-text-offset': '18',\n      'font-size': '13'\n    }).selector(\"edge[class='production'][cardinality > 0]\").css({\n      'target-label': function targetLabel(ele) {\n        return '' + ele.data('cardinality');\n      },\n      'target-text-margin-y': '-10',\n      'target-text-offset': '18',\n      'font-size': '13'\n    }).selector(\"edge[class]\").css({\n      'target-arrow-shape': function targetArrowShape(ele) {\n        return elementUtilities.getCyArrowShape(ele);\n      },\n      'source-arrow-shape': 'none',\n      'source-endpoint': function sourceEndpoint(ele) {\n        return elementUtilities.getEndPoint(ele, 'source');\n      },\n      'target-endpoint': function targetEndpoint(ele) {\n        return elementUtilities.getEndPoint(ele, 'target');\n      },\n      'line-style': function lineStyle(ele) {\n        return elementUtilities.getArrayLineStyle(ele);\n      },\n      'line-dash-pattern': function lineDashPattern(ele) {\n        return elementUtilities.getArrayLineDashStyle(ele);\n      }\n    }).selector(\"core\").css({\n      'selection-box-color': selectionColor,\n      'selection-box-opacity': '0.2',\n      'selection-box-border-color': selectionColor\n    });\n    var sbgnNetworkContainer = $(options.networkContainerSelector);\n\n    // create and init cytoscape:\n    cytoscape({\n      container: sbgnNetworkContainer,\n      style: sbgnStyleSheet,\n      showOverlay: false,\n      minZoom: 0.125,\n      maxZoom: 16,\n      boxSelectionEnabled: true,\n      motionBlur: true,\n      wheelSensitivity: 0.1,\n      ready: function ready() {\n        cy = this;\n        // If undoable register undo/redo actions\n        if (options.undoable) {\n          registerUndoRedoActions();\n        }\n        bindCyEvents();\n      }\n    });\n  };\n  sbgnCyInstance.getCy = function () {\n    return cy;\n  };\n  return sbgnCyInstance;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sbgn-extensions/sbgn-cy-instance-factory.js\n");

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-renderer.js":
/*!*************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-renderer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Render sbgn specific shapes which are not supported by cytoscape.js core\n */\n\nvar libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\nvar cyMath = math = cytoscape.math;\nvar cyBaseNodeShapes = cytoscape.baseNodeShapes;\nvar cyStyleProperties = cytoscape.styleProperties;\nvar classes = __webpack_require__(/*! ../utilities/classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var $$ = cytoscape;\n\n  /*\n  * Taken from cytoscape.js and modified so that it can be utilized from sbgnviz\n  * in a flexable way. It is needed because the sbgnviz shapes would need to stroke\n  * border more than once as they would have infoboxes, multimers etc.\n  * Extends the style properties of node with the given ones then strokes the border.\n  * Would needed to be slightly updated during cytoscape upgrades if related function in\n  * Cytoscape.js is updated. Information about where is the related function is located\n  * can be found in the file that list the changes done in ivis cytoscape fork.\n  */\n  $$.sbgn.drawBorder = function (_ref) {\n    var context = _ref.context,\n      node = _ref.node,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      borderStyle = _ref.borderStyle,\n      borderOpacity = _ref.borderOpacity;\n    borderWidth = borderWidth || node && parseFloat(node.css('border-width'));\n    if (borderWidth > 0) {\n      var parentOpacity = node && node.effectiveOpacity() || 1;\n      borderStyle = borderStyle || node && node.css('border-style');\n      borderColor = borderColor || node && node.css('border-color');\n      borderOpacity = (borderOpacity || node && node.css('border-opacity')) * parentOpacity;\n      var propsToRestore = ['lineWidth', 'lineCap', 'strokeStyle', 'globalAlpha'];\n      var initialProps = {};\n      propsToRestore.forEach(function (propName) {\n        initialProps[propName] = context[propName];\n      });\n      context.lineWidth = borderWidth;\n      context.lineCap = 'butt';\n      context.strokeStyle = borderColor;\n      context.globalAlpha = borderOpacity;\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        switch (borderStyle) {\n          case 'dotted':\n            context.setLineDash([1, 1]);\n            break;\n          case 'dashed':\n            context.setLineDash([4, 2]);\n            break;\n          case 'solid':\n          case 'double':\n            context.setLineDash([]);\n            break;\n        }\n      }\n      context.stroke();\n      if (borderStyle === 'double') {\n        context.lineWidth = borderWidth / 3;\n        var gco = context.globalCompositeOperation;\n        context.globalCompositeOperation = 'destination-out';\n        context.stroke();\n        context.globalCompositeOperation = gco;\n      }\n\n      // reset in case we changed the border style\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        context.setLineDash([]);\n      }\n      propsToRestore.forEach(function (propName) {\n        context[propName] = initialProps[propName];\n      });\n    }\n  };\n\n  // Taken from cytoscape.js and modified\n  var drawRoundRectanglePath = $$.sbgn.drawRoundRectanglePath = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n\n    //context.clearRect(0, 0, width, height);\n    //context.beginPath()\n  };\n  var drawProteinPath = $$.sbgn.drawProtein = function (context, x, y, width, height, activePadding1) {\n    var halfWidth = (width + activePadding1) / 2;\n    var halfHeight = (height + activePadding1) / 2;\n    var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n\n    //context.clearRect(0, 0, width, height);\n    //context.beginPath()\n  };\n  var drawReceptorPath = $$.sbgn.drawReceptor = function (context, x, y, width, height, activePadding1) {\n    var halfPadding = activePadding1 ? activePadding1 / 2 : 0;\n    //var points= [-1, -1,   0, -0.5,   1, -1,   1, 0.5,   0, 1,   -1,  0.5 ];\n    var halfW = width / 2;\n    var halfH = height / 2;\n    if (context.beginPath) {\n      context.beginPath();\n    }\n    context.moveTo(x + halfW * -1 - halfPadding, y + halfH * -1 - 3 * halfPadding / 2);\n    context.lineTo(x + halfW * 0, y + halfH * -0.5 - 3 * halfPadding / 2);\n    context.lineTo(x + halfW * 1 + halfPadding, y + halfH * -1 - 3 * halfPadding / 2);\n    context.lineTo(x + halfW * 1 + halfPadding, y + halfH * 0.5 + halfPadding);\n    context.lineTo(x + halfW * 0, y + halfH * 1 + 3 * halfPadding / 2);\n    context.lineTo(x + halfW * -1 - halfPadding, y + halfH * 0.5 + halfPadding);\n    context.closePath();\n  };\n  var drawRoundedDrugPath = $$.sbgn.drawRoundedDrug = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = Math.min(halfWidth, halfHeight);\n    context.beginPath();\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n    var halfWidthInner = width / 2 - 5;\n    var halfHeightInner = height / 2 - 5;\n    var cornerRadius = Math.min(halfWidthInner, halfHeightInner);\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeightInner);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidthInner, y - halfHeightInner, x + halfWidthInner, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidthInner, y + halfHeightInner, x, y + halfHeightInner, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidthInner, y + halfHeightInner, x - halfWidthInner, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidthInner, y - halfHeightInner, x, y - halfHeightInner, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeightInner);\n    context.closePath();\n  };\n\n  // Taken from cytoscape.js\n  var drawPolygonPath = function drawPolygonPath(context, x, y, width, height, points) {\n    var halfW = width / 2;\n    var halfH = height / 2;\n    if (context.beginPath) {\n      context.beginPath();\n    }\n    context.moveTo(x + halfW * points[0], y + halfH * points[1]);\n    for (var i = 1; i < points.length / 2; i++) {\n      context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);\n    }\n    context.closePath();\n  };\n  var sbgnShapes = $$.sbgn.sbgnShapes = {\n    'empty set': true,\n    'nucleic acid feature': true,\n    'complex': true,\n    'macromolecule': true,\n    'simple chemical': true,\n    'biological activity': true,\n    'compartment': true,\n    'gene': true,\n    'rna': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'truncated protein': true,\n    'ion channel': true,\n    'receptor': true,\n    'ion': true,\n    'phenotype sbml': true,\n    'complex sbml': true,\n    'protein': true,\n    'degradation': true\n  };\n  var totallyOverridenNodeShapes = $$.sbgn.totallyOverridenNodeShapes = {\n    'macromolecule': true,\n    'nucleic acid feature': true,\n    'simple chemical': true,\n    'complex': true,\n    'biological activity': true,\n    'compartment': true,\n    'protein': true,\n    'gene': true,\n    'rna': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true,\n    'phenotype sbml': true,\n    'ion': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'complex sbml': true\n  };\n  var canHaveInfoBoxShapes = $$.sbgn.canHaveInfoBoxShapes = {\n    'simple chemical': true,\n    'macromolecule': true,\n    'nucleic acid feature': true,\n    'complex': true,\n    'biological activity': true,\n    'compartment': true,\n    'protein': true,\n    'receptor': true,\n    'truncated protein': true,\n    'ion channel': true,\n    'complex sbml': true,\n    'gene': true,\n    'rna': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'phenotype sbml': true,\n    'drug': true,\n    'ion': true,\n    'degradation': true\n  };\n  var canBeMultimerShapes = $$.sbgn.canBeMultimerShapes = {\n    'macromolecule': true,\n    'complex': true,\n    'nucleic acid feature': true,\n    'simple chemical': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true,\n    'gene': true,\n    'rna': true,\n    'phenotype': true,\n    'ion': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'phenotype sbml': true,\n    'complex sbml': true,\n    'protein': true\n  };\n  var canBeActiveShapes = $$.sbgn.canBeActiveShapes = {\n    'protein': true,\n    'complex sbml': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true\n  };\n  var canBeHypotheticalShapes = $$.sbgn.canBeHypotheticalShapes = {\n    'protein': true,\n    'complex sbml': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true,\n    'gene': true,\n    'rna': true,\n    'phenotype sbml': true,\n    'ion': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'degradation': true\n  };\n  cyMath.calculateDistance = function (point1, point2) {\n    var distance = Math.pow(point1[0] - point2[0], 2) + Math.pow(point1[1] - point2[1], 2);\n    return Math.sqrt(distance);\n  };\n  $$.sbgn.colors = {\n    clone: \"#838383\"\n  };\n  $$.sbgn.getDefaultComplexCornerLength = function () {\n    return 24;\n  };\n  $$.sbgn.getDefaultGeneCornerLength = function () {\n    return 24;\n  };\n  $$.sbgn.drawStateAndInfos = function (node, context, centerX, centerY) {\n    var layouts = node.data('auxunitlayouts');\n    for (var side in layouts) {\n      var layout = layouts[side];\n      classes.AuxUnitLayout.draw(layout, node.cy(), context);\n    }\n    context.beginPath();\n    context.closePath();\n  };\n  $$.sbgn.drawInfoBox = function (context, x, y, width, height, shapeName) {\n    switch (shapeName) {\n      case 'roundrectangle':\n        cyBaseNodeShapes['roundrectangle'].draw(context, x, y, width, height);\n        break;\n      case 'bottomroundrectangle':\n        $$.sbgn.drawBottomRoundRectangle(context, x, y, width, height);\n        break;\n      case 'ellipse':\n        cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);\n        break;\n      case 'complex':\n        $$.sbgn.drawComplex(context, x, y, width, height, height / 2);\n        break;\n      case 'perturbing agent':\n        var points = $$.sbgn.generatePerturbingAgentPoints();\n        drawPolygonPath(context, x, y, width, height, points);\n        break;\n      case 'rectangle':\n        cyBaseNodeShapes['rectangle'].draw(context, x, y, width, height);\n        break;\n      case 'stadium':\n        $$.sbgn.drawRoundRectanglePath(context, x, y, width, height, Math.min(width / 2, height / 2, 15));\n        break;\n    }\n  };\n\n  // $$.sbgn.AfShapeArgsFn = function (self){\n  //   return [self.bbox.w, self.bbox.h, classes.getAuxUnitClass(self).getParent(self).data(\"class\")];\n  // }\n\n  $$.sbgn.nucleicAcidCheckPoint = function (x, y, padding, width, height, centerX, centerY, points, cornerRadius) {\n    //check rectangle at top\n    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY - cornerRadius / 2, width, height - cornerRadius / 3, [0, -1], padding)) {\n      return true;\n    }\n\n    //check rectangle at bottom\n    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY + height / 2 - cornerRadius / 2, width - 2 * cornerRadius, cornerRadius, [0, -1], padding)) {\n      return true;\n    }\n\n    //check ellipses\n    var checkInEllipse = function checkInEllipse(x, y, centerX, centerY, width, height, padding) {\n      x -= centerX;\n      y -= centerY;\n      x /= width / 2 + padding;\n      y /= height / 2 + padding;\n      return Math.pow(x, 2) + Math.pow(y, 2) <= 1;\n    };\n\n    // Check bottom right quarter circle\n    if (checkInEllipse(x, y, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {\n      return true;\n    }\n\n    // Check bottom left quarter circle\n    if (checkInEllipse(x, y, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {\n      return true;\n    }\n    return false;\n  };\n\n  //we need to force opacity to 1 since we might have state and info boxes.\n  //having opaque nodes which have state and info boxes gives unpleasent results.\n  $$.sbgn.forceOpacityToOne = function (node, context) {\n    var parentOpacity = node.effectiveOpacity();\n    if (parentOpacity === 0) {\n      return;\n    }\n    context.fillStyle = \"rgba(\" + node._private.style[\"background-color\"].value[0] + \",\" + node._private.style[\"background-color\"].value[1] + \",\" + node._private.style[\"background-color\"].value[2] + \",\" + 1 * node.css('opacity') * parentOpacity + \")\";\n  };\n  $$.sbgn.drawSimpleChemicalPath = function (context, x, y, width, height) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n    var cornerRadius = Math.min(halfWidth, halfHeight);\n    context.beginPath();\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n  };\n  $$.sbgn.drawSimpleChemical = function (context, x, y, width, height) {\n    $$.sbgn.drawSimpleChemicalPath(context, x, y, width, height);\n    context.fill();\n  };\n  function simpleChemicalLeftClone(context, centerX, centerY, width, height, cloneMarker, opacity) {\n    if (cloneMarker != null) {\n      var oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = opacity;\n      var oldStyle = context.fillStyle;\n      context.fillStyle = $$.sbgn.colors.clone;\n      context.beginPath();\n      var markerBeginX = centerX - width / 2 * Math.sin(Math.PI / 3);\n      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);\n      var markerEndX = centerX;\n      var markerEndY = markerBeginY;\n      context.moveTo(markerBeginX, markerBeginY);\n      context.lineTo(markerEndX, markerEndY);\n      context.arc(centerX, centerY, width / 2, 3 * Math.PI / 6, 5 * Math.PI / 6);\n      context.closePath();\n      context.fill();\n      context.fillStyle = oldStyle;\n      context.globalAlpha = oldGlobalAlpha;\n    }\n  }\n  ;\n  function simpleChemicalRightClone(context, centerX, centerY, width, height, cloneMarker, opacity) {\n    if (cloneMarker != null) {\n      var oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = opacity;\n      var oldStyle = context.fillStyle;\n      context.fillStyle = $$.sbgn.colors.clone;\n      context.beginPath();\n      var markerBeginX = centerX;\n      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);\n      var markerEndX = centerX + width / 2 * Math.sin(Math.PI / 3);\n      var markerEndY = markerBeginY;\n      context.moveTo(markerBeginX, markerBeginY);\n      context.lineTo(markerEndX, markerEndY);\n      context.arc(centerX, centerY, width / 2, Math.PI / 6, 3 * Math.PI / 6);\n      context.closePath();\n      context.fill();\n      context.fillStyle = oldStyle;\n      context.globalAlpha = oldGlobalAlpha;\n    }\n  }\n  ;\n  $$.sbgn.drawEllipsePath = function (context, x, y, width, height) {\n    cyBaseNodeShapes['ellipse'].drawPath(context, x, y, width, height);\n  };\n  $$.sbgn.drawBarrel = function (context, x, y, width, height) {\n    cyBaseNodeShapes['barrel'].draw(context, x, y, width, height);\n    context.fill();\n  };\n  $$.sbgn.drawBottomRoundRectangle = function (context, x, y, width, height) {\n    cyBaseNodeShapes['bottomroundrectangle'].draw(context, x, y, width, height);\n    context.fill();\n  };\n\n  // The old draw implementation for nucleic acid feature\n  // now only used for clone marker drawing of nucleic acid feature\n  // and macromolecule shapes because 'bottomroundrectangle' function\n  // of cytoscape.js did not fit well for this purpose.\n  // Did not change the name yet directly as drawNucAcidFeatureClone etc.\n  // because it actually draws a nucleic acid feature in a different way.\n  $$.sbgn.drawNucAcidFeature2 = function (context, centerX, centerY, width, height, cornerRadius) {\n    cornerRadius = cornerRadius || cyMath.getRoundRectangleRadius(width, height);\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var left = centerX - halfWidth,\n      right = centerX + halfWidth;\n    var bottom = centerY - halfHeight,\n      top = centerY + halfHeight;\n    context.beginPath();\n    context.moveTo(left, bottom);\n    context.lineTo(right, bottom);\n    context.lineTo(right, centerY);\n    context.arcTo(right, top, centerX, top, cornerRadius);\n    context.arcTo(left, top, left, centerY, cornerRadius);\n    context.lineTo(left, bottom);\n    context.closePath();\n    context.fill();\n  };\n\n  /*\n   * Code taken from https://jsperf.com/string-prototype-endswith\n   * Direct implementation seems to work better.\n   * Using this improves isMultimer() performance.\n   * Makes it take 0.1 or 0.2% less time from the whole\n   * loading process, down from ~0.4% initially.\n   */\n  function endsWith(str, pattern) {\n    for (var i = pattern.length, l = str.length; i--;) {\n      if (str.charAt(--l) != pattern.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  $$.sbgn.isMultimer = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && endsWith(sbgnClass, \"multimer\")) return true;\n    return false;\n  };\n  $$.sbgn.isActive = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && sbgnClass.startsWith(\"active\")) return true;\n    return false;\n  };\n  $$.sbgn.isHypothetical = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && sbgnClass.includes(\"hypothetical\")) return true;\n    return false;\n  };\n\n  //this function is created to have same corner length when\n  //complex's width or height is changed\n  $$.sbgn.generateComplexShapePoints = function (cornerLength, width, height) {\n    //cp stands for corner proportion\n    var cpX = Math.min(cornerLength, 0.5 * width) / width;\n    var cpY = Math.min(cornerLength, 0.5 * height) / height;\n    var complexPoints = [-1 + cpX, -1, -1, -1 + cpY, -1, 1 - cpY, -1 + cpX, 1, 1 - cpX, 1, 1, 1 - cpY, 1, -1 + cpY, 1 - cpX, -1];\n    return complexPoints;\n  };\n  $$.sbgn.generateGeneShapePoints = function (width, height) {\n    return [-1, -1, 1, -1, 1, 1, -1, 1];\n  };\n  $$.sbgn.generateRNAShapePoints = function (width, height) {\n    return [-1, 0.8, 0.5, 0.8, 1, -0.8, -0.5, -0.8];\n  };\n  $$.sbgn.generateReceptorShapePoints = function (width, height) {\n    return [-1, -1, 0, -0.5, 1, -1, 1, 0.5, 0, 1, -1, 0.5];\n  };\n  $$.sbgn.generatePerturbingAgentPoints = function () {\n    return [-1, -1, -0.5, 0, -1, 1, 1, 1, 0.5, 0, 1, -1];\n  };\n  $$.sbgn.getDefaultMultimerPadding = function () {\n    return 5;\n  };\n  $$.sbgn.getDefaultActivePadding = function () {\n    return 5;\n  };\n\n  // draw background image of nodes\n  $$.sbgn.drawImage = function (context, imgObj) {\n    if (imgObj) {\n      context.clip();\n      context.drawImage(imgObj.img, 0, 0, imgObj.imgW, imgObj.imgH, imgObj.x, imgObj.y, imgObj.w, imgObj.h);\n      context.restore();\n    }\n  };\n  cyStyleProperties.types.nodeShape.enums.push('empty set', 'nucleic acid feature', 'complex', 'macromolecule', 'simple chemical', 'biological activity', 'compartment', 'gene', 'simple molecule', 'unknown molecule', 'drug', 'truncated protein', 'ion', 'ion channel', 'rna', 'phenotype sbml', 'receptor', 'complex sbml', 'protein', 'degradation');\n  $$.sbgn.registerSbgnNodeShapes = function () {\n    function generateDrawFcn(_ref2) {\n      var plainDrawFcn = _ref2.plainDrawFcn,\n        extraDrawFcn = _ref2.extraDrawFcn,\n        canBeMultimer = _ref2.canBeMultimer,\n        cloneMarkerFcn = _ref2.cloneMarkerFcn,\n        canBeActive = _ref2.canBeActive,\n        canBeHypothetical = _ref2.canBeHypothetical,\n        canHaveInfoBox = _ref2.canHaveInfoBox,\n        multimerPadding = _ref2.multimerPadding,\n        activePadding = _ref2.activePadding;\n      return function (context, node, imgObj) {\n        var borderWidth = parseFloat(node.css('border-width'));\n        var width = node.outerWidth() - borderWidth;\n        var height = node.outerHeight() - borderWidth;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var bgOpacity = node.css('background-opacity');\n        var isCloned = cloneMarkerFcn != null && node._private.data.clonemarker;\n\n        //Ion channel is dran differently when it is active\n        if (node._private.data[\"class\"].startsWith('active ion channel') || node._private.data[\"class\"].startsWith('active hypothetical ion channel')) {\n          plainDrawFcn = $$.sbgn.drawOpenIonChannel;\n        }\n        if (node._private.data[\"class\"].startsWith('ion channel') || node._private.data[\"class\"].startsWith('hypothetical ion channel')) {\n          plainDrawFcn = $$.sbgn.drawIonChannel;\n        }\n\n        //This is where the multimer is drawn\n        if (canBeMultimer && $$.sbgn.isMultimer(node)) {\n          plainDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);\n\n          //If the node is also hypothetical\n          if (canBeHypothetical && $$.sbgn.isHypothetical(node)) {\n            // $$.sbgn.drawImage( context, imgObj );\n            borderStyle = 'dashed';\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node,\n              borderStyle: borderStyle\n            });\n            //$$.sbgn.drawImage( context, imgObj );\n            context.beginPath();\n          } else {\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n          if (isCloned) {\n            cloneMarkerFcn(context, centerX + multimerPadding, centerY + multimerPadding, width - borderWidth, height - borderWidth, isCloned, true, bgOpacity);\n          }\n\n          //If the node is also active\n          if (canBeActive && $$.sbgn.isActive(node) && !node._private.data[\"class\"].startsWith('active ion channel') && !node._private.data[\"class\"].startsWith('active hypothetical ion channel')) {\n            //add multimer shape\n            plainDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height, true, activePadding);\n            borderStyle = 'dashed';\n            context.setLineDash([3, 6]);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node,\n              borderStyle: borderStyle\n            });\n            if (extraDrawFcn) {\n              extraDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width + activePadding, height + activePadding);\n              $$.sbgn.drawBorder({\n                context: context,\n                node: node\n              });\n            }\n          }\n        }\n\n        //This is where the active is drawn\n        if (canBeActive && $$.sbgn.isActive(node) && !node._private.data[\"class\"].startsWith('active ion channel') && !node._private.data[\"class\"].startsWith('active hypothetical ion channel')) {\n          //add multimer shape\n          plainDrawFcn(context, centerX, centerY, width, height, true, activePadding);\n          borderStyle = 'dashed';\n          context.setLineDash([3, 6]);\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node,\n            borderStyle: borderStyle\n          });\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX, centerY, width + activePadding, height + activePadding);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n        }\n\n        //This is where the active is drawn\n        if (canBeHypothetical && $$.sbgn.isHypothetical(node)) {\n          //add multimer shape\n          plainDrawFcn(context, centerX, centerY, width, height);\n          borderStyle = 'dashed';\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node,\n            borderStyle: borderStyle\n          });\n          // $$.sbgn.drawImage( context, imgObj );\n          context.beginPath();\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX, centerY, width, height);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n        }\n        if (!(canBeHypothetical && $$.sbgn.isHypothetical(node))) {\n          plainDrawFcn(context, centerX, centerY, width, height);\n          $$.sbgn.drawImage(context, imgObj);\n        }\n        $$.sbgn.drawBorder({\n          context: context,\n          node: node\n        });\n        if (extraDrawFcn) {\n          extraDrawFcn(context, centerX, centerY, width, height);\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node\n          });\n        }\n        if (isCloned) {\n          cloneMarkerFcn(context, centerX, centerY, width - borderWidth, height - borderWidth, isCloned, false, bgOpacity);\n        }\n        if (canHaveInfoBox) {\n          var oldStyle = context.fillStyle;\n          $$.sbgn.forceOpacityToOne(node, context);\n          $$.sbgn.drawStateAndInfos(node, context, centerX, centerY);\n          context.fillStyle = oldStyle;\n        }\n      };\n    }\n    function generateIntersectLineFcn(_ref3) {\n      var plainIntersectLineFcn = _ref3.plainIntersectLineFcn,\n        canBeMultimer = _ref3.canBeMultimer,\n        cloneMarkerFcn = _ref3.cloneMarkerFcn,\n        canBeActive = _ref3.canBeActive,\n        canBeHypothetical = _ref3.canBeHypothetical,\n        canHaveInfoBox = _ref3.canHaveInfoBox,\n        multimerPadding = _ref3.multimerPadding,\n        activePadding = _ref3.activePadding;\n      return function (node, x, y) {\n        var borderWidth = parseFloat(node.css('border-width'));\n        var padding = borderWidth / 2;\n        var width = node.outerWidth() - borderWidth;\n        var height = node.outerHeight() - borderWidth;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var intersections = [];\n        if (canHaveInfoBox) {\n          var stateAndInfoIntersectLines = $$.sbgn.intersectLineStateAndInfoBoxes(node, x, y);\n          intersections = intersections.concat(stateAndInfoIntersectLines);\n        }\n        var nodeIntersectLines = plainIntersectLineFcn(centerX, centerY, width, height, x, y, padding);\n        intersections = intersections.concat(nodeIntersectLines);\n        if (canBeMultimer && $$.sbgn.isMultimer(node)) {\n          var multimerIntersectionLines = plainIntersectLineFcn(centerX + multimerPadding, centerY + multimerPadding, width, height, x, y, padding);\n          intersections = intersections.concat(multimerIntersectionLines);\n        }\n        if (canBeActive && $$.sbgn.isActive(node)) {\n          var activeIntersectionLines = plainIntersectLineFcn(centerX + activePadding, centerY + activePadding, width, height, x, y, padding);\n          intersections = intersections.concat(activeIntersectionLines);\n        }\n        if (canBeHypothetical && $$.sbgn.isHypothetical(node)) {\n          var hypotheticalIntersectionLines = plainIntersectLineFcn(centerX, centerY, width, height, x, y, padding);\n          intersections = intersections.concat(hypotheticalIntersectionLines);\n        }\n        return $$.sbgn.closestIntersectionPoint([x, y], intersections);\n      };\n    }\n    function generateCheckPointFcn(_ref4) {\n      var plainCheckPointFcn = _ref4.plainCheckPointFcn,\n        canBeMultimer = _ref4.canBeMultimer,\n        cloneMarkerFcn = _ref4.cloneMarkerFcn,\n        canBeActive = _ref4.canBeActive,\n        canBeHypothetical = _ref4.canBeHypothetical,\n        canHaveInfoBox = _ref4.canHaveInfoBox,\n        multimerPadding = _ref4.multimerPadding,\n        activePadding = _ref4.activePadding;\n      return function (x, y, node, threshold) {\n        threshold = threshold || 0;\n        var borderWidth = parseFloat(node.css('border-width'));\n        var width = node.outerWidth() - borderWidth + 2 * threshold;\n        var height = node.outerHeight() - borderWidth + 2 * threshold;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var padding = borderWidth / 2;\n        var nodeCheck = function nodeCheck() {\n          return plainCheckPointFcn(x, y, padding, width, height, centerX, centerY);\n        };\n        var stateAndInfoCheck = function stateAndInfoCheck() {\n          return canHaveInfoBox && $$.sbgn.checkPointStateAndInfoBoxes(x, y, node, threshold);\n        };\n        var multimerCheck = function multimerCheck() {\n          return canBeMultimer && $$.sbgn.isMultimer(node) && plainCheckPointFcn(x, y, padding, width, height, centerX + multimerPadding, centerY + multimerPadding);\n        };\n        var activeCheck = function activeCheck() {\n          return canBeActive && $$.sbgn.isActive(node) && plainCheckPointFcn(x, y, padding, width, height, centerX + activePadding, centerY + activePadding);\n        };\n        var hypotheticalCheck = function hypotheticalCheck() {\n          return canBeHypothetical && $$.sbgn.isHypothetical(node) && plainCheckPointFcn(x, y, padding, width, height, centerX, centerY);\n        };\n        return nodeCheck() || stateAndInfoCheck() || multimerCheck() || activeCheck() || hypotheticalCheck();\n      };\n    }\n    var shapeNames = [\"simple chemical\", \"macromolecule\", \"complex\", \"nucleic acid feature\", \"empty set\", \"biological activity\", \"compartment\", \"oldCompartment\", \"gene\", \"simple molecule\", 'receptor', 'complex sbml', \"unknown molecule\", \"drug\", \"ion\", \"truncated protein\", \"ion channel\", \"rna\", \"phenotype sbml\", \"protein\", \"degradation\"];\n    shapeNames.forEach(function (shapeName) {\n      var plainDrawFcn = $$.sbgn.plainDraw[shapeName];\n      var plainIntersectLineFcn = $$.sbgn.plainIntersectLine[shapeName];\n      var plainCheckPointFcn = $$.sbgn.plainCheckPoint[shapeName];\n      var canBeMultimer = $$.sbgn.canBeMultimerShapes[shapeName];\n      var canBeActive = $$.sbgn.canBeActiveShapes[shapeName];\n      var canBeHypothetical = $$.sbgn.canBeHypotheticalShapes[shapeName];\n      var cloneMarkerFcn = $$.sbgn.cloneMarker[shapeName];\n      var canHaveInfoBox = $$.sbgn.canHaveInfoBoxShapes[shapeName];\n      var multimerPadding = $$.sbgn.getDefaultMultimerPadding();\n      var activePadding = $$.sbgn.getDefaultActivePadding();\n      var extraDrawFcn = $$.sbgn.extraDraw[shapeName];\n      var draw = generateDrawFcn({\n        plainDrawFcn: plainDrawFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canBeActive: canBeActive,\n        canBeHypothetical: canBeHypothetical,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding,\n        extraDrawFcn: extraDrawFcn\n      });\n      var intersectLine = totallyOverridenNodeShapes[shapeName] ? generateIntersectLineFcn({\n        plainIntersectLineFcn: plainIntersectLineFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canBeActive: canBeActive,\n        canBeHypothetical: canBeHypothetical,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding\n      }) : plainIntersectLineFcn;\n      var checkPoint = totallyOverridenNodeShapes[shapeName] ? generateCheckPointFcn({\n        plainCheckPointFcn: plainCheckPointFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canBeActive: canBeActive,\n        canBeHypothetical: canBeHypothetical,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding\n      }) : plainCheckPointFcn;\n      var shape = {\n        draw: draw,\n        intersectLine: intersectLine,\n        checkPoint: checkPoint,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding\n      };\n      cyBaseNodeShapes[shapeName] = shape;\n    });\n  };\n  $$.sbgn.drawEllipse = function (context, x, y, width, height) {\n    //$$.sbgn.drawEllipsePath(context, x, y, width, height);\n    //context.fill();\n    cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);\n    context.fill();\n  };\n  $$.sbgn.drawTruncatedProtein = function (context, x, y, width, height, isActive, activePadding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n    var halfPadding = activePadding ? activePadding / 2 : 0;\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight - halfPadding);\n    //Draw a line till right top\n    context.lineTo(x + halfWidth + halfPadding, y - halfHeight - halfPadding);\n    //Draw a line to middle right\n    context.lineTo(x + halfWidth + halfPadding, y + 2 * halfHeight / 3 + 2 * halfPadding);\n    //Draw a line inner\n    context.lineTo(x + 2 * halfWidth / 3 + halfPadding, y + halfHeight / 3 + 2 * halfPadding);\n    //Draw a line to bottom right\n    context.lineTo(x + 2 * halfWidth / 3 + halfPadding, y + halfHeight + halfPadding);\n    //Draw a line to bottom middle\n    context.lineTo(x, y + halfHeight + halfPadding);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth - halfPadding, y + halfHeight + halfPadding, x - halfWidth - halfPadding, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth - halfPadding, y - halfHeight - halfPadding, x, y - halfHeight - halfPadding, cornerRadius);\n    context.closePath();\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawIonChannel = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x + halfWidth / 4, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth / 2, y - halfHeight, x + halfWidth / 2, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth / 2, y + halfHeight, x / 2 + halfWidth / 4, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x + halfWidth / 4, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x + halfWidth / 4, y - halfHeight);\n\n    // Start at top middle\n    context.moveTo(x + 3 * halfWidth / 4, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x + 3 * halfWidth / 4, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x + halfWidth / 2, y + halfHeight, x + halfWidth / 2, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x + halfWidth / 2, y - halfHeight, x + 3 * halfWidth / 4, y - halfHeight, cornerRadius);\n    // Join line\n    //context.lineTo( x, y - halfHeight );\n\n    context.closePath();\n    context.fill();\n  };\n  $$.sbgn.drawOpenIonChannel = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x - halfWidth / 2, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x, y - halfHeight, x, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x, y + halfHeight, x - halfWidth / 2, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x + halfWidth / 2, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x - halfWidth / 2, y - halfHeight);\n\n    // Start at top middle\n    context.moveTo(x + 3 * halfWidth / 4, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x + 3 * halfWidth / 4, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x + halfWidth / 2, y + halfHeight, x + halfWidth / 2, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x + halfWidth / 2, y - halfHeight, x + 3 * halfWidth / 4, y - halfHeight, cornerRadius);\n    // Join line\n    //context.lineTo( x, y - halfHeight );\n\n    context.closePath();\n    context.fill();\n  };\n  $$.sbgn.drawComplex = function (context, x, y, width, height, isActive, cornerLength) {\n    cornerLength = cornerLength || $$.sbgn.getDefaultComplexCornerLength();\n    var points = $$.sbgn.generateComplexShapePoints(cornerLength, width, height);\n    drawPolygonPath(context, x, y, width, height, points);\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawGene = function (context, x, y, width, height, isActive) {\n    cyBaseNodeShapes['rectangle'].draw(context, x, y, width, height);\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawRNA = function (context, x, y, width, height) {\n    var points = $$.sbgn.generateRNAShapePoints(width, height);\n    drawPolygonPath(context, x, y, width, height, points);\n    context.fill();\n  };\n  $$.sbgn.drawPhenotype = function (context, x, y, width, height) {\n    cyBaseNodeShapes['hexagon'].draw(context, x, y, width, height);\n    context.fill();\n  };\n  $$.sbgn.drawReceptor = function (context, x, y, width, height, isActive, activePadding) {\n    drawReceptorPath(context, x, y, width, height, activePadding);\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawCrossLine = function (context, x, y, width, height) {\n    var points = cyMath.generateUnitNgonPoints(4, 0);\n    context.beginPath();\n    var scaleX = width * Math.sqrt(2) / 2,\n      scaleY = height * Math.sqrt(2) / 2;\n    context.moveTo(x + scaleX * points[2], y + scaleY * points[3]);\n    context.lineTo(x + scaleX * points[6], y + scaleY * points[7]);\n    context.closePath();\n  };\n  $$.sbgn.drawBiologicalActivity = function (context, x, y, width, height) {\n    var points = $$.sbgn.generateBiologicalActivityPoints();\n    drawPolygonPath(context, x, y, width, height, points);\n    context.fill();\n  };\n  $$.sbgn.drawRoundRectangle = function (context, x, y, width, height, isActive) {\n    drawRoundRectanglePath(context, x, y, width, height);\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawProtein = function (context, x, y, width, height, isActive, activePadding) {\n    var activePadding1 = activePadding || 0;\n    drawProteinPath(context, x, y, width, height, activePadding1);\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawRoundedDrug = function (context, x, y, width, height) {\n    drawRoundedDrugPath(context, x, y, width, height);\n    context.fill();\n  };\n  $$.sbgn.generateNucleicAcidPoints = function () {\n    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n  $$.sbgn.generateBiologicalActivityPoints = function () {\n    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n  $$.sbgn.generateCompartmentPoints = function () {\n    return math.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n  $$.sbgn.plainDraw = {\n    \"simple chemical\": $$.sbgn.drawSimpleChemical,\n    \"macromolecule\": $$.sbgn.drawRoundRectangle,\n    \"complex\": $$.sbgn.drawComplex,\n    \"nucleic acid feature\": $$.sbgn.drawBottomRoundRectangle,\n    \"empty set\": $$.sbgn.drawEllipse,\n    \"biological activity\": $$.sbgn.drawBiologicalActivity,\n    \"compartment\": $$.sbgn.drawBarrel,\n    \"oldCompartment\": $$.sbgn.drawRoundRectangle,\n    \"gene\": $$.sbgn.drawGene,\n    \"rna\": $$.sbgn.drawRNA,\n    \"simple molecule\": $$.sbgn.drawEllipse,\n    \"unknown molecule\": $$.sbgn.drawEllipse,\n    \"drug\": $$.sbgn.drawRoundedDrug,\n    \"ion\": $$.sbgn.drawEllipse,\n    \"truncated protein\": $$.sbgn.drawTruncatedProtein,\n    \"ion channel\": $$.sbgn.drawIonChannel,\n    \"phenotype sbml\": $$.sbgn.drawPhenotype,\n    \"receptor\": $$.sbgn.drawReceptor,\n    \"complex sbml\": $$.sbgn.drawComplex,\n    \"protein\": $$.sbgn.drawProtein,\n    \"degradation\": $$.sbgn.drawEllipse\n  };\n\n  // To define an extra drawing for the node that is rendered at the very end,\n  // even after the node background image is drawn.\n  // E.g. cross lines of \"empty set\" nodes.\n  $$.sbgn.extraDraw = {\n    \"empty set\": $$.sbgn.drawCrossLine,\n    \"degradation\": $$.sbgn.drawCrossLine\n  };\n  $$.sbgn.plainIntersectLine = {\n    \"simple chemical\": function simpleChemical(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"macromolecule\": function macromolecule(centerX, centerY, width, height, x, y, padding) {\n      return $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, centerX, centerY, width, height, cyMath.getRoundRectangleRadius(width, height), padding);\n    },\n    \"complex\": function complex(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"bottomroundrectangle\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"empty set\": function emptySet(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"degradation\": function degradation(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"biological activity\": function biologicalActivity(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateBiologicalActivityPoints();\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"compartment\": function compartment(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"barrel\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"oldCompartment\": function oldCompartment(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"protein\": function protein(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"gene\": function gene(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"rectangle\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"rna\": function rna(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateRNAShapePoints(width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"receptor\": function receptor(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateReceptorShapePoints(width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"ion channel\": function ionChannel(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"truncated protein\": function truncatedProtein(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"ion\": function ion(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"simple molecule\": function simpleMolecule(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"unknown molecule\": function unknownMolecule(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"drug\": function drug(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"phenotype sbml\": function phenotypeSbml(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"complex sbml\": function complexSbml(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    }\n  };\n  $$.sbgn.plainCheckPoint = {\n    \"simple chemical\": function simpleChemical(x, y, padding, width, height, centerX, centerY) {\n      var points = cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n      var halfWidth = width / 2;\n      var halfHeight = height / 2;\n      //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n      var cornerRadius = Math.min(halfWidth, halfHeight);\n      //var cornerRadius = math.getRoundRectangleRadius( width, height );\n      var diam = cornerRadius * 2;\n\n      // Check hBox\n      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height - diam, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check vBox\n      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width - diam, height, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check top left quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check top right quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check bottom right quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check bottom left quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      }\n      return false;\n      //return cyBaseNodeShapes[\"ellipse\"].checkPoint( x, y, padding, width, height, centerX, centerY );\n    },\n    \"macromolecule\": function macromolecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"complex\": function complex(x, y, padding, width, height, centerX, centerY) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height, [0, -1], padding);\n    },\n    \"complex sbml\": function complexSbml(x, y, padding, width, height, centerX, centerY) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height, [0, -1], padding);\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"bottomroundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"empty set\": function emptySet(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"degradation\": function degradation(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"biological activity\": function biologicalActivity(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"rectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"compartment\": function compartment(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"barrel\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"oldCompartment\": function oldCompartment(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"gene\": function gene(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"simple molecule\": function simpleMolecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"unknown molecule\": function unknownMolecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"drug\": function drug(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"ion\": function ion(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"truncated protein\": function truncatedProtein(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"ion channel\": function ionChannel(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"rna\": function rna(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"phenotype sbml\": function phenotypeSbml(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"receptor\": function receptor(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"protein\": function protein(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    }\n  };\n  $$.sbgn.cloneMarker = {\n    \"simple chemical\": function simpleChemical(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cornerRadius = Math.min(width / 2, height / 2);\n        var firstCircleCenterX = centerX - width / 2 + cornerRadius;\n        var firstCircleCenterY = centerY;\n        var secondCircleCenterX = centerX + width / 2 - cornerRadius;\n        var secondCircleCenterY = centerY;\n        var bottomCircleCenterX = centerX;\n        var bottomCircleCenterY = centerY + height / 2 - cornerRadius;\n        if (width < height) {\n          simpleChemicalLeftClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n          simpleChemicalRightClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n        } else {\n          simpleChemicalLeftClone(context, firstCircleCenterX, firstCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n          simpleChemicalRightClone(context, secondCircleCenterX, secondCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n        }\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        var recPoints = cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n        var cloneX = centerX;\n        var cloneY = centerY + 3 / 4 * cornerRadius;\n        var cloneWidth = width - 2 * cornerRadius;\n        var cloneHeight = cornerRadius / 2;\n        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, recPoints);\n        context.fill();\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cloneWidth = width;\n        var cloneHeight = height / 4;\n        var cloneX = centerX;\n        var cloneY = centerY + 3 * height / 8;\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n        $$.sbgn.drawNucAcidFeature2(context, cloneX, cloneY, cloneWidth, cloneHeight, cornerRadius);\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    },\n    \"macromolecule\": function macromolecule(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      $$.sbgn.cloneMarker[\"nucleic acid feature\"](context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity);\n    },\n    \"complex\": function complex(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cornerLength = $$.sbgn.getDefaultComplexCornerLength();\n        var cpX = width >= 50 ? cornerLength / width : cornerLength / 50;\n        var cpY = height >= 50 ? cornerLength / height : cornerLength / 50;\n        var cloneWidth = width;\n        var cloneHeight = height * cpY / 2;\n        var cloneX = centerX;\n        var cloneY = centerY + height / 2 - cloneHeight / 2;\n        var markerPoints = [-1, -1, 1, -1, 1 - cpX, 1, -1 + cpX, 1];\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, markerPoints);\n        context.fill();\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    }\n  };\n  $$.sbgn.closestIntersectionPoint = function (point, intersections) {\n    if (intersections.length <= 0) return [];\n    var closestIntersection = [];\n    var minDistance = Number.MAX_VALUE;\n    for (var i = 0; i < intersections.length; i = i + 2) {\n      var checkPoint = [intersections[i], intersections[i + 1]];\n      var distance = cyMath.calculateDistance(point, checkPoint);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestIntersection = checkPoint;\n      }\n    }\n    return closestIntersection;\n  };\n  $$.sbgn.nucleicAcidIntersectionLine = function (x, y, nodeX, nodeY, width, height, cornerRadius, padding) {\n    // var nodeX = node._private.position.x;\n    // var nodeY = node._private.position.y;\n    // var width = node.width();\n    // var height = node.height();\n    // var padding = parseInt(node.css('border-width')) / 2;\n\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var straightLineIntersections;\n\n    // Top segment, left to right\n    {\n      var topStartX = nodeX - halfWidth - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth + padding;\n      var topEndY = topStartY;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Right segment, top to bottom\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Bottom segment, left to right\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Left segment, top to bottom\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Check intersections with arc segments, we have only two arcs for\n    //nucleic acid features\n    var arcIntersections;\n\n    // Bottom Right\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n\n    // Bottom Left\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n    return []; // if nothing\n  };\n\n  //this function gives the intersections of any line with the upper half of perturbing agent\n  $$.sbgn.perturbingAgentIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, padding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n\n    // Check intersections with straight line segments\n    var straightLineIntersections = [];\n\n    // Top segment, left to right\n    {\n      var topStartX = nodeX - halfWidth - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth + padding;\n      var topEndY = topStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Right segment, top to bottom\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight - padding;\n      var rightEndX = rightStartX - halfWidth / 2;\n      var rightEndY = nodeY + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Left segment, top to bottom\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight - padding;\n      var leftEndX = leftStartX + halfWidth / 2;\n      var leftEndY = nodeY + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n    return straightLineIntersections;\n  };\n\n  //this function gives the intersections of any line with a round rectangle\n  $$.sbgn.roundRectangleIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, cornerRadius, padding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n\n    // Check intersections with straight line segments\n    var straightLineIntersections = [];\n    // Top segment, left to right\n    {\n      var topStartX = nodeX - halfWidth + cornerRadius - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth - cornerRadius + padding;\n      var topEndY = topStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Right segment, top to bottom\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight + cornerRadius - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Bottom segment, left to right\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Left segment, top to bottom\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight + cornerRadius - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Check intersections with arc segments\n    var arcIntersections;\n\n    // Top Left\n    {\n      var topLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var topLeftCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topLeftCenterX, topLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n\n    // Top Right\n    {\n      var topRightCenterX = nodeX + halfWidth - cornerRadius;\n      var topRightCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topRightCenterX, topRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n\n    // Bottom Right\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n\n    // Bottom Left\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n    if (straightLineIntersections.length > 0) return straightLineIntersections;\n    return []; // if nothing\n  };\n  $$.sbgn.intersectLineEllipse = function (x1, y1, x2, y2, centerX, centerY, width, height, padding) {\n    var w = width / 2 + padding;\n    var h = height / 2 + padding;\n    var an = centerX;\n    var bn = centerY;\n    var d = [x2 - x1, y2 - y1];\n    var m = d[1] / d[0];\n    var n = -1 * m * x2 + y2;\n    var a = h * h + w * w * m * m;\n    var b = -2 * an * h * h + 2 * m * n * w * w - 2 * bn * m * w * w;\n    var c = an * an * h * h + n * n * w * w - 2 * bn * w * w * n + bn * bn * w * w - h * h * w * w;\n    var discriminant = b * b - 4 * a * c;\n    if (discriminant < 0) {\n      return [];\n    }\n    var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n    var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n    var xMin = Math.min(t1, t2);\n    var xMax = Math.max(t1, t2);\n    var yMin = m * xMin - m * x2 + y2;\n    var yMax = m * xMax - m * x2 + y2;\n    return [xMin, yMin, xMax, yMax];\n  };\n  $$.sbgn.intersectLineStateAndInfoBoxes = function (node, x, y) {\n    var centerX = node._private.position.x;\n    var centerY = node._private.position.y;\n    var padding = parseInt(node.css('border-width')) / 2;\n    var stateAndInfos = node._private.data.statesandinfos;\n    var intersections = [];\n    for (var i = 0; i < stateAndInfos.length; i++) {\n      var state = stateAndInfos[i];\n      if (!state.isDisplayed) {\n        continue;\n      }\n      var infoBoxWidth = state.bbox.w;\n      var infoBoxHeight = state.bbox.h;\n      var currIntersections = null;\n      if (state.clazz == \"state variable\") {\n        var coord = classes.StateVariable.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"residue variable\") {\n        var coord = classes.ResidueVariable.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"binding region\") {\n        var coord = classes.BindingRegion.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"unit of information\") {\n        var coord = classes.UnitOfInformation.getAbsoluteCoord(state, node.cy());\n        if (node.data(\"class\") == \"BA macromolecule\" || node.data(\"class\") == \"BA nucleic acid feature\" || node.data(\"class\") == \"BA complex\") {\n          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 5, padding);\n        } else if (node.data(\"class\") == \"BA unspecified entity\") {\n          currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n        } else if (node.data(\"class\") == \"BA simple chemical\") {\n          currIntersections = cyMath.intersectLineCircle(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth / 4);\n        } else if (node.data(\"class\") == \"BA perturbing agent\") {\n          currIntersections = $$.sbgn.perturbingAgentIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n        } else {\n          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 0, padding);\n        }\n      }\n      intersections = intersections.concat(currIntersections);\n    }\n    return intersections;\n  };\n  $$.sbgn.checkPointStateAndInfoBoxes = function (x, y, node, threshold) {\n    return classes.AuxiliaryUnit.checkPoint(x, y, node, threshold);\n  };\n  $$.sbgn.isNodeShapeTotallyOverriden = function (render, node) {\n    if (totallyOverridenNodeShapes[render.getNodeShape(node)]) {\n      return true;\n    }\n    return false;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sbgn-extensions/sbgn-cy-renderer.js\n");

/***/ }),

/***/ "./src/utilities/cd-to-sbgnml-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/cd-to-sbgnml-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function cdToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  cdToSbgnml.convert = function (xml, callback) {\n    $.ajax({\n      type: 'post',\n      url: \"http://web.newteditor.org:8080/cd2sbgnml\",\n      data: xml,\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(_error) {\n        callback(null);\n      }\n    });\n  };\n  return cdToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2NkLXRvLXNiZ25tbC1jb252ZXJ0ZXItZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uVG9TYmdubWwiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJjZFRvU2Jnbm1sIiwicGFyYW0iLCJqc29uVG9TYmdubWxDb252ZXJ0ZXIiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwiY29udmVydCIsInhtbCIsImNhbGxiYWNrIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YSIsInN1Y2Nlc3MiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvY2QtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzPzU2ODMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIganNvblRvU2Jnbm1sLCBlbGVtZW50VXRpbGl0aWVzLCBjeTtcbiAgXG4gICAgZnVuY3Rpb24gY2RUb1NiZ25tbChwYXJhbSkge1xuICAgICAganNvblRvU2Jnbm1sID0gcGFyYW0uanNvblRvU2Jnbm1sQ29udmVydGVyO1xuICAgICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XG4gICAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XG4gICAgfVxuICBcbiBcbiAgICBjZFRvU2Jnbm1sLmNvbnZlcnQgPSBmdW5jdGlvbiAoeG1sLGNhbGxiYWNrKSB7XG5cbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICAgIHVybDogXCJodHRwOi8vd2ViLm5ld3RlZGl0b3Iub3JnOjgwODAvY2Qyc2Jnbm1sXCIsXG4gICAgICAgICAgICBkYXRhOiB4bWwsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gY2RUb1NiZ25tbDtcbiAgXG4gIH1cbiAgXG5cbiJdLCJtYXBwaW5ncyI6IkFBRUFBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVc7RUFFeEIsSUFBSUMsWUFBWSxFQUFFQyxnQkFBZ0IsRUFBRUMsRUFBRTtFQUV0QyxTQUFTQyxVQUFVQSxDQUFDQyxLQUFLLEVBQUU7SUFDekJKLFlBQVksR0FBR0ksS0FBSyxDQUFDQyxxQkFBcUI7SUFDMUNKLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUFnQjtJQUN6Q0MsRUFBRSxHQUFHRSxLQUFLLENBQUNFLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDbkM7RUFHQUosVUFBVSxDQUFDSyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFDQyxRQUFRLEVBQUU7SUFFekNDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ0hDLElBQUksRUFBRSxNQUFNO01BQ1pDLEdBQUcsRUFBRSwwQ0FBMEM7TUFDL0NDLElBQUksRUFBRU4sR0FBRztNQUNUTyxPQUFPLEVBQUUsU0FBQUEsUUFBVUQsSUFBSSxFQUFFO1FBQ3JCTCxRQUFRLENBQUNLLElBQUksQ0FBQztNQUNsQixDQUFDO01BQ0RFLEtBQUssRUFBRSxTQUFBQSxNQUFVQSxNQUFLLEVBQUU7UUFDdkJQLFFBQVEsQ0FBQyxJQUFJLENBQUM7TUFDZjtJQUNKLENBQUMsQ0FBQztFQUNOLENBQUM7RUFFRCxPQUFPUCxVQUFVO0FBRW5CLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/cd-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/classes.js":
/*!**********************************!*\
  !*** ./src/utilities/classes.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\n// var optionUtilities = require('./option-utilities');\n// var options = optionUtilities.getOptions();\nvar truncate = (__webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\").truncate);\n// only functions not depending on the instances can be used in this way\n// e.g. elementUtilities.generateStateVarId()\nvar elementUtilities = __webpack_require__(/*! ./element-utilities-factory */ \"./src/utilities/element-utilities-factory.js\")();\nvar ns = {};\n\n// Keep in mind that for each method 'mainObj' parameter refers to the main object for which the operation will be done.\n// It refers to the object that could be refered by 'this' while there was prototyping in these classes.\n// For example AuxiliaryUnit.copy(mainObj, existingInstance, newParent, newId) copies the variable passed by 'mainObj'\n// parameter and in this case 'mainObj' can be considered as `the object to be copied`\n\n// The old constructors are replaced by 'construct()' methods while removing prototyping from the classes.\n\n// 'AuxiliaryUnit' and 'AuxUnitLayout' objects keep the id of their parent nodes instead of the nodes themselves to avoid circular references.\n// To maintain this property related methods to get and set parent nodes should be used instead of directly accessing the parent object.\n\n// Also, there is a parent-child relationship between the AuxiliaryUnit class and StateVariable and UnitOfInformation\n// classes. While calling a method of AuxiliaryUnit class that method should be called from\n// the actual class of related auxilary unit (Would be StateVariable or UnitOfInformation. This is needed to prevent conflictions when the\n// methods of AuxiliaryUnit class is overriden by these classes). That class can be obtained by calling 'getAuxUnitClass(mainObj)'\n// method for the auxilary unit object.\n\nvar getAuxUnitClass = function getAuxUnitClass(unit) {\n  // Unit parameter may pass the unit itself or the type of the unit check it\n  var unitType = typeof unit === 'string' ? unit : unit.clazz;\n  // Retrieve and return unit class according to the unit type\n  var className = '';\n  switch (unitType) {\n    case \"state variable\":\n      className = \"StateVariable\";\n      break;\n    case \"residue variable\":\n      className = \"ResidueVariable\";\n      break;\n    case \"binding region\":\n      className = \"BindingRegion\";\n      break;\n    case \"unit of information\":\n      className = \"UnitOfInformation\";\n      break;\n  }\n\n  //var className = unitType === 'state variable' ? 'StateVariable' : 'residue variable'? \"ResidueVariable\":'UnitOfInformation';\n  return ns[className];\n};\nns.getAuxUnitClass = getAuxUnitClass; // Expose getAuxUnitClass method\n\nvar AuxiliaryUnit = {};\n\n// -------------- AuxiliaryUnit -------------- //\n// constructs a new auxiliary unit object and returns it\nAuxiliaryUnit.construct = function (parent) {\n  var obj = {};\n  AuxiliaryUnit.setParentRef(obj, parent);\n  obj.id = null;\n  obj.bbox = null;\n  obj.anchorSide = null;\n  obj.isDisplayed = false;\n  obj.style = null;\n  return obj;\n};\nAuxiliaryUnit.getParent = function (mainObj, cy) {\n  var parent = mainObj.parent;\n  // If parent variable stores the id of parent instead of the actual parent get the actual parent by id\n  if (typeof parent === 'string') {\n    return cy.getElementById(parent);\n  }\n  return parent;\n};\nAuxiliaryUnit.setParentRef = function (mainObj, newParent) {\n  if (mainObj && newParent) {\n    // Reference to id instead of the node itself to avaoid circular reference\n    mainObj.parent = typeof newParent === 'string' ? newParent : newParent.id();\n  }\n};\nAuxiliaryUnit.checkPoint = function (x, y, node, threshold) {\n  var centerX = node._private.position.x;\n  var centerY = node._private.position.y;\n  var padding = parseInt(node.css('border-width')) / 2;\n  var stateAndInfos = node._private.data.statesandinfos;\n  var cyBaseNodeShapes = cytoscape.baseNodeShapes;\n  //    threshold = parseFloat(threshold);\n\n  for (var i = 0; i < stateAndInfos.length; i++) {\n    var state = stateAndInfos[i];\n    if (!state.isDisplayed) {\n      continue;\n    }\n    var stateWidth = parseFloat(state.bbox.w) + threshold;\n    var stateHeight = parseFloat(state.bbox.h) + threshold;\n    var coord = AuxiliaryUnit.getAbsoluteCoord(state, node.cy());\n    var stateCenterX = coord.x;\n    var stateCenterY = coord.y;\n    var checkPoint;\n    if (state.clazz == \"state variable\") {\n      checkPoint = cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"unit of information\") {\n      checkPoint = cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"residue variable\") {\n      checkPoint = cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"binding region\") {\n      checkPoint = cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    }\n    if (checkPoint == true) {\n      return state;\n    }\n  }\n  return null;\n};\n\n/*\n * Return a new AuxiliaryUnit object. A new parent reference and new id can\n * optionnally be passed.\n */\nAuxiliaryUnit.copy = function (mainObj, cy, existingInstance, newParent, newId) {\n  var newUnit = existingInstance ? existingInstance : AuxiliaryUnit.construct();\n  var parentToSet = newParent || getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  AuxiliaryUnit.setParentRef(newUnit, parentToSet);\n  newUnit.id = newId ? newId : mainObj.id;\n  newUnit.bbox = jQuery.extend(true, {}, mainObj.bbox);\n  newUnit.coordType = mainObj.coordType;\n  newUnit.anchorSide = mainObj.anchorSide;\n  newUnit.isDisplayed = mainObj.isDisplayed;\n  newUnit.style = mainObj.style;\n  return newUnit;\n};\n\n// draw the auxiliary unit at its position\nAuxiliaryUnit.draw = function (mainObj, cy, context) {\n  var unitClass = getAuxUnitClass(mainObj);\n  var coords = unitClass.getAbsoluteCoord(mainObj, cy);\n  unitClass.drawShape(mainObj, cy, context, coords.x, coords.y);\n  if (unitClass.hasText(mainObj, cy)) {\n    unitClass.drawText(mainObj, cy, context, coords.x, coords.y);\n  }\n  mainObj.isDisplayed = true;\n};\n\n// to be implemented by children\nAuxiliaryUnit.getText = function (mainObj, cy) {\n  throw new Error(\"Abstract method!\");\n};\nAuxiliaryUnit.hasText = function (mainObj, cy) {\n  throw new Error(\"Abstract method!\");\n};\nAuxiliaryUnit.drawShape = function (mainObj, cy, context, x, y) {\n  var style = mainObj.style;\n  cytoscape.sbgn.drawInfoBox(context, x, y, mainObj.bbox.w, mainObj.bbox.h, style['shape-name']);\n  var tmp_ctxt = context.fillStyle;\n  context.fillStyle = style['background-color'];\n  context.fill();\n  context.fillStyle = tmp_ctxt;\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var borderStyle = style.dashed ? 'dashed' : undefined;\n  var borderWidth = style['border-width'];\n  // Selected nodes have a specific border color so infobox should have the same\n  // border color when the node is selected. May need to be updated if style of\n  // selected nodes is updated in a different way.\n  var borderColor = parent.selected() ? null : style['border-color'];\n  cytoscape.sbgn.drawBorder({\n    context: context,\n    node: parent,\n    borderStyle: borderStyle,\n    borderColor: borderColor,\n    borderWidth: borderWidth\n  });\n};\n\n// draw the statesOrInfo's label at given position\nAuxiliaryUnit.drawText = function (mainObj, cy, context, centerX, centerY) {\n  // access the sbgnvizParams set for cy\n  var options = cy.scratch('_sbgnviz').sbgnvizParams.optionUtilities.getOptions();\n  var unitClass = getAuxUnitClass(mainObj);\n  var parent = unitClass.getParent(mainObj, cy);\n  var style = mainObj.style;\n\n  // part of : $$.sbgn.drawText(context, textProp);\n  // save style before modification\n  var oldFont = context.font;\n  var oldStyle = context.fillStyle;\n  var oldOpacity = context.globalAlpha;\n  context.font = style['font-style'] + \" \" + style['font-weight'] + \" \" + style['font-size'] + \"px \" + style['font-family'];\n  context.fillStyle = style['font-color'];\n  context.textAlign = \"center\";\n  context.textBaseline = \"middle\";\n  context.globalAlpha = parent.css('text-opacity') * parent.css('opacity'); // ?\n\n  var text;\n  if (options.fitLabelsToInfoboxes()) {\n    // here we memoize the truncated text into _textCache,\n    // as it is not something that changes so much\n    text = unitClass.getText(mainObj, cy);\n    var key = text + context.font + mainObj.bbox.w;\n    if (mainObj._textCache && mainObj._textCache[key]) {\n      text = mainObj._textCache[key];\n    } else {\n      text = truncate(unitClass.getText(mainObj, cy), context.font, mainObj.bbox.w);\n      if (!mainObj._textCache) {\n        mainObj._textCache = {};\n      }\n      mainObj._textCache[key] = text;\n    }\n  } else {\n    text = unitClass.getText(mainObj, cy);\n  }\n  context.fillText(text, centerX, centerY);\n\n  // restore saved style\n  context.fillStyle = oldStyle;\n  context.font = oldFont;\n  context.globalAlpha = oldOpacity;\n};\nAuxiliaryUnit.getAbsoluteCoord = function (mainObj, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var position = parent.position();\n  var padding = parent.padding();\n  /* if(parent.data().complexCalculatedPadding){\n    padding = Number(parent.data().complexCalculatedPadding);\n    //delete parent._private.data.complexCalculatedPadding;\n  }else{\n    padding = parent.padding();\n  } */\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\")); //parent.data()['border-width'];\n  var position = parent.position();\n  if (mainObj === undefined || parent === undefined || position === undefined) {\n    return;\n  }\n  var borderWidth = parent.data()[\"border-width\"];\n  if (borderWidth === undefined) {\n    return;\n  }\n  var absX, absY;\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    absX = mainObj.bbox.x * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);\n    absY = mainObj.anchorSide == \"top\" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;\n  } else {\n    absY = mainObj.bbox.y * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);\n    absX = mainObj.anchorSide == \"left\" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;\n  }\n\n  //console.log('mainObj', mainObj)\n  //console.log('mainObj.bbox.y',mainObj.bbox.y)\n  //console.log(\"parent.outerHeight()\", parent.outerHeight())\n  //console.log(\"position.y\",position.y)\n  // due to corner of barrel shaped compartment shift absX to right\n  /*  if (parent.data(\"class\") == \"compartment\"){\n       absX += parent.outerWidth() * 0.1;\n   } */\n\n  return {\n    x: absX,\n    y: absY\n  };\n};\nAuxiliaryUnit.convertToAbsoluteCoord = function (mainObj, relX, relY, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var position = parent.position();\n  var padding = parent.padding();\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\"));\n  var absX, absY;\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    absX = relX * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);\n    absY = mainObj.anchorSide == \"top\" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;\n  } else {\n    absY = relY * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);\n    absX = mainObj.anchorSide == \"left\" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;\n  }\n\n  /*  if (parent.data(\"class\") == \"compartment\"){\n     absX += parent.outerWidth() * 0.1;\n   }; */\n  return {\n    x: absX,\n    y: absY\n  };\n};\nAuxiliaryUnit.convertToRelativeCoord = function (mainObj, absX, absY, cy, parentNode) {\n  if (mainObj === undefined) {\n    return;\n  }\n  if (parentNode !== undefined) {\n    var parent = parentNode;\n  } else {\n    var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  }\n  var position = parent.position();\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var padding = parent.padding();\n  /*  if(parent.data().complexCalculatedPadding){\n     padding = Number(parent.data().complexCalculatedPadding)\n   }else{\n     padding = parent.padding();\n   } */\n\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\"));\n\n  /* if (parent.data(\"class\") == \"compartment\"){\n    absX -= parent.outerWidth() * 0.1;\n  } */\n\n  var relX, relY;\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    relX = (absX - (position.x - parentWidth / 2 - padding)) * 100 / (parent.outerWidth() - borderWidth);\n    relY = mainObj.anchorSide == \"top\" ? 0 : 100;\n  } else {\n    relX = mainObj.anchorSide == \"left\" ? 0 : 100;\n    relY = (absY - (position.y - parentHeight / 2 - padding)) * 100 / (parent.outerHeight() - borderWidth);\n  }\n  relX = relX < 0 ? 0 : relX;\n  relX = relX > 100 ? 100 : relX;\n  relY = relY < 0 ? 0 : relY;\n  relY = relY > 100 ? 100 : relY;\n  return {\n    x: relX,\n    y: relY\n  };\n};\nAuxiliaryUnit.setAnchorSide = function (mainObj, node) {\n  var thisX = mainObj.bbox.x;\n  var thisY = mainObj.bbox.y;\n  var thisH = mainObj.bbox.h;\n  var thisW = mainObj.bbox.w;\n  var width, height, padding;\n  if (node.data(\"originalW\")) {\n    width = node.data(\"originalW\");\n    padding = 0;\n  } else {\n    width = node.width();\n    padding = node.data('class') == \"complex\" ? Number(node.data().complexCalculatedPadding) : node.padding();\n  }\n  if (node.data(\"originalH\")) {\n    height = node.data(\"originalH\");\n    padding = 0;\n  } else {\n    height = node.height();\n    padding = node.data('class') == \"complex\" ? Number(node.data().complexCalculatedPadding) : node.padding();\n  }\n  var parentX = node.data('class') == \"compartment\" || node.data('class') == \"complex\" ? node.data('bbox').x : node.position().x;\n  var parentY = node.data('class') == \"compartment\" || node.data('class') == \"complex\" ? node.data('bbox').y : node.position().y;\n  var parentX1 = Number((parentX - width / 2 - padding).toFixed(2));\n  var parentX2 = Number((parentX + width / 2 + padding).toFixed(2));\n  var parentY1 = Number((parentY - height / 2 - padding).toFixed(2));\n  var parentY2 = Number((parentY + height / 2 + padding).toFixed(2));\n  var centerX = Number((thisX + thisW / 2).toFixed(2));\n  var centerY = Number((thisY + thisH / 2).toFixed(2));\n  if (centerY == parentY1) {\n    mainObj.anchorSide = \"top\";\n  } else if (centerY == parentY2) {\n    mainObj.anchorSide = \"bottom\";\n  } else if (centerX == parentX1) {\n    mainObj.anchorSide = \"left\";\n  } else if (centerX <= parentX2 + 2 && centerX >= parentX2 - 2) {\n    mainObj.anchorSide = \"right\";\n  } else {\n    return false;\n  }\n  return true;\n};\nAuxiliaryUnit.addToParent = function (mainObj, cy, parentNode, location, position, index) {\n  // add state var to the parent's statesandinfos\n  if (typeof index != \"undefined\") {\n    // specific index provided (for undo/redo consistency)\n    parentNode.data('statesandinfos').splice(index, 0, mainObj);\n  } else {\n    parentNode.data('statesandinfos').push(mainObj);\n  }\n  if (!parentNode.data('auxunitlayouts')) {\n    // ensure minimal initialization\n    parentNode.data('auxunitlayouts', {});\n  }\n  if (!location) {\n    // location not provided, need to define it automatically\n    location = AuxUnitLayout.selectNextAvailable(parentNode, cy);\n  } else if (location === 'left' || location === 'right') {\n    location = AuxUnitLayout.selectNextAvailableLeftRight(parentNode, cy);\n  }\n  // here we are sure to have a location even if it was not provided as argument\n  // get or create the necessary layout\n  if (!parentNode.data('auxunitlayouts')[location]) {\n    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);\n  }\n  var layout = parentNode.data('auxunitlayouts')[location];\n  mainObj.anchorSide = location;\n  switch (location) {\n    case \"top\":\n      mainObj.bbox.y = 0;\n      break;\n    case \"bottom\":\n      mainObj.bbox.y = 100;\n      break;\n    case \"left\":\n      mainObj.bbox.x = 0;\n      break;\n    case \"right\":\n      mainObj.bbox.x = 100;\n      break;\n  }\n  // add stateVar to layout, precomputing of relative coords will be triggered accordingly\n  //console.log(\"mainObj.bbox.x in addParent\",mainObj)\n  var insertedPosition = AuxUnitLayout.addAuxUnit(layout, cy, mainObj, position);\n  return insertedPosition;\n};\nAuxiliaryUnit.removeFromParent = function (mainObj, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var parentLayout = parent.data('auxunitlayouts')[mainObj.anchorSide];\n  AuxUnitLayout.removeAuxUnit(parentLayout, cy, mainObj);\n  if (AuxUnitLayout.isEmpty(parentLayout)) {\n    delete parent.data('auxunitlayouts')[mainObj.anchorSide];\n  }\n  var statesandinfos = parent.data('statesandinfos');\n  var index = statesandinfos.indexOf(mainObj);\n  statesandinfos.splice(index, 1);\n};\nAuxiliaryUnit.getPositionIndex = function (mainObj, cy) {\n  return getAuxUnitClass(mainObj).getParent(mainObj, cy).data('auxunitlayouts')[mainObj.anchorSide].units.indexOf(mainObj);\n};\nns.AuxiliaryUnit = AuxiliaryUnit;\n// -------------- END AuxiliaryUnit -------------- //\n\n// -------------- StateVariable -------------- //\n/**\n * parent has to be a stateful EPN (complex, macromolecule or nucleic acid)\n */\n\nvar StateVariable = {};\n\n// StateVariable extends AuxiliaryUnit by inheriting each static property of it\nfor (var prop in AuxiliaryUnit) {\n  StateVariable[prop] = AuxiliaryUnit[prop];\n}\n\n// Construct a state variable object by extending default behaviours of a AuxiliaryUnit object and returns that object\nStateVariable.construct = function (value, stateVariableDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.state = {};\n  obj.state.value = value;\n  obj.state.variable = null;\n  obj.stateVariableDefinition = stateVariableDefinition;\n  obj.clazz = \"state variable\";\n  return obj;\n};\nStateVariable.getText = function (mainObj) {\n  var stateValue = mainObj.state.value || '';\n  var stateVariable = mainObj.state.variable ? \"@\" + mainObj.state.variable : \"\";\n  return stateValue + stateVariable;\n};\nStateVariable.hasText = function (mainObj) {\n  return mainObj.state.value && mainObj.state.value != \"\" || mainObj.state.variable && mainObj.state.variable != \"\";\n};\n\n/*this function is called upon creation of state variable and it returns the location information of the added state variable\n*/\nStateVariable.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new state var of info\n  var stateVar = StateVariable.construct();\n  StateVariable.setParentRef(stateVar, parentNode);\n  stateVar.value = value;\n  stateVar.variable = variable;\n  stateVar.state = {\n    value: value,\n    variable: variable\n  };\n  stateVar.bbox = bbox;\n  stateVar.style = style;\n  if (id) {\n    stateVar.id = id;\n  }\n  // link to layout\n  position = StateVariable.addToParent(stateVar, cy, parentNode, location, position, index);\n  return {\n    index: StateVariable.getParent(stateVar, cy).data('statesandinfos').indexOf(stateVar),\n    location: stateVar.anchorSide,\n    position: position\n  };\n};\nStateVariable.remove = function (mainObj, cy) {\n  var position = StateVariable.getPositionIndex(mainObj, cy);\n  var index = StateVariable.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  StateVariable.removeFromParent(mainObj, cy);\n  return {\n    clazz: \"state variable\",\n    state: {\n      value: mainObj.state.value,\n      variable: mainObj.state.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\nStateVariable.copy = function (mainObj, cy, newParent, newId) {\n  var newStateVar = AuxiliaryUnit.copy(mainObj, cy, StateVariable.construct(), newParent, newId);\n  newStateVar.state = jQuery.extend(true, {}, mainObj.state);\n  newStateVar.stateVariableDefinition = mainObj.stateVariableDefinition;\n  newStateVar.clazz = mainObj.clazz;\n  return newStateVar;\n};\nns.StateVariable = StateVariable;\n// -------------- END StateVariable -------------- //\n\n// -------------- ResidueVariable -------------- //\n/**\n * This is for CellDesigner palette\n */\n\nvar ResidueVariable = {};\n\n// ResidueVariable extends AuxiliaryUnit by inheriting each static property of it\nfor (var prop in AuxiliaryUnit) {\n  ResidueVariable[prop] = AuxiliaryUnit[prop];\n}\n\n// Construct a residue variable object by extending default behaviours of a AuxiliaryUnit object and returns that object\nResidueVariable.construct = function (value, residueVariableDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.residue = {};\n  obj.residue.variable = null;\n  obj.residueVariableDefinition = residueVariableDefinition;\n  obj.clazz = \"residue variable\";\n  return obj;\n};\nResidueVariable.getText = function (mainObj) {\n  var residueVariable = mainObj.residue.variable || '';\n  return residueVariable;\n};\nResidueVariable.hasText = function (mainObj) {\n  return mainObj.residue.variable && mainObj.residue.variable != \"\";\n};\n\n/*this function is called upon creation of residue variable and it returns the location information of the added residue variable\n*/\nResidueVariable.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new residue var of info\n  var residueVar = ResidueVariable.construct();\n  ResidueVariable.setParentRef(residueVar, parentNode);\n  residueVar.variable = variable;\n  residueVar.residue = {\n    value: value,\n    variable: variable\n  };\n  residueVar.bbox = bbox;\n  residueVar.style = style;\n  if (id) {\n    residueVar.id = id;\n  }\n  // link to layout\n  position = ResidueVariable.addToParent(residueVar, cy, parentNode, location, position, index);\n  return {\n    index: ResidueVariable.getParent(residueVar, cy).data('statesandinfos').indexOf(residueVar),\n    location: residueVar.anchorSide,\n    position: position\n  };\n};\nResidueVariable.remove = function (mainObj, cy) {\n  var position = ResidueVariable.getPositionIndex(mainObj, cy);\n  var index = ResidueVariable.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  ResidueVariable.removeFromParent(mainObj, cy);\n  return {\n    clazz: \"residue variable\",\n    residue: {\n      variable: mainObj.residue.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\nResidueVariable.copy = function (mainObj, cy, newParent, newId) {\n  var newResidueVar = AuxiliaryUnit.copy(mainObj, cy, ResidueVariable.construct(), newParent, newId);\n  newResidueVar.residue = jQuery.extend(true, {}, mainObj.residue);\n  newResidueVar.ResidueVariableDefinition = mainObj.ResidueVariableDefinition;\n  newStanewResidueVarteVar.clazz = mainObj.clazz;\n  return newResidueVar;\n};\nns.ResidueVariable = ResidueVariable;\n// -------------- END ResidueVariable -------------- //\n\n// -------------- BindingRegion -------------- //\n/**\n * This is for CellDesigner palette\n */\n\nvar BindingRegion = {};\n\n// BindingRegion extends AuxiliaryUnit by inheriting each static property of it\nfor (var prop in AuxiliaryUnit) {\n  BindingRegion[prop] = AuxiliaryUnit[prop];\n}\n\n// Construct a binding region object by extending default behaviours of a AuxiliaryUnit object and returns that object\nBindingRegion.construct = function (bindingRegionDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.region = {};\n  obj.region.variable = null;\n  obj.bindingRegionDefinition = bindingRegionDefinition;\n  obj.clazz = \"binding region\";\n  return obj;\n};\nBindingRegion.getText = function (mainObj) {\n  var bindingRegion = mainObj.region.variable || '';\n  return bindingRegion;\n};\nBindingRegion.hasText = function (mainObj) {\n  return mainObj.region.variable && mainObj.region.variable != \"\";\n};\n\n/*this function is called upon creation of binding region and it returns the location information of the added binding region\n*/\nBindingRegion.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new binding region of info\n  var bindingRegion = BindingRegion.construct();\n  BindingRegion.setParentRef(bindingRegion, parentNode);\n  bindingRegion.variable = variable;\n  bindingRegion.region = {\n    value: value,\n    variable: variable\n  };\n  bindingRegion.bbox = bbox;\n  bindingRegion.style = style;\n  if (id) {\n    bindingRegion.id = id;\n  }\n  // link to layout\n  //console.log('bindingRegion.anchorSide',  bindingRegion.anchorSide).\n  position = BindingRegion.addToParent(bindingRegion, cy, parentNode, \"left\", position, index);\n  return {\n    index: BindingRegion.getParent(bindingRegion, cy).data('statesandinfos').indexOf(bindingRegion),\n    location: bindingRegion.anchorSide,\n    position: position\n  };\n};\nBindingRegion.remove = function (mainObj, cy) {\n  var position = BindingRegion.getPositionIndex(mainObj, cy);\n  var index = BindingRegion.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  BindingRegion.removeFromParent(mainObj, cy);\n  return {\n    clazz: \"binding region\",\n    region: {\n      variable: mainObj.region.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\nBindingRegion.copy = function (mainObj, cy, newParent, newId) {\n  var newBindingRegion = AuxiliaryUnit.copy(mainObj, cy, BindingRegion.construct(), newParent, newId);\n  newBindingRegion.region = jQuery.extend(true, {}, mainObj.region);\n  newBindingRegion.BindingRegionDefinition = mainObj.BindingRegionDefinition;\n  newBindingRegion.clazz = mainObj.clazz;\n  return newBindingRegion;\n};\nns.BindingRegion = BindingRegion;\n// -------------- END BindingRegion -------------- //\n\n// -------------- UnitOfInformation -------------- //\n/**\n * parent can be an EPN, compartment or subunit\n */\n\nvar UnitOfInformation = {};\n\n// UnitOfInformation extends AuxiliaryUnit by inheriting each static property of it\nfor (var prop in AuxiliaryUnit) {\n  UnitOfInformation[prop] = AuxiliaryUnit[prop];\n}\n\n// Constructs a UnitOfInformation object by extending properties of an AuxiliaryUnit object and return that object\nUnitOfInformation.construct = function (value, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateUnitOfInfoId();\n  obj.label = {\n    text: value\n  }; // from legacy code, contains {text: }\n  obj.clazz = \"unit of information\";\n  return obj;\n};\nUnitOfInformation.getText = function (mainObj) {\n  return mainObj.label.text;\n};\nUnitOfInformation.hasText = function (mainObj) {\n  return mainObj.label.text && mainObj.label.text != \"\";\n};\n\n/**\n * Creates a unit of info and links everything accordingly\n * @param parentNode - the cytoscape element hosting the unit of information\n * @param value - its text\n * @param [location] - the side where it will be placed top, bottom, right, left or undefined (auto placement)\n * @param [position] - its position in the order of elements placed on the same location\n * @param [index] - its index in the statesandinfos list\n */\nUnitOfInformation.create = function (parentNode, cy, value, bbox, location, position, style, index, id) {\n  // create the new unit of info\n  var unit = UnitOfInformation.construct(value, parentNode);\n  unit.bbox = bbox;\n  unit.style = style;\n  if (id) {\n    unit.id = id;\n  }\n\n  //console.log(\"will insert on\", location, position);\n  position = UnitOfInformation.addToParent(unit, cy, parentNode, location, position, index);\n  return {\n    index: UnitOfInformation.getParent(unit, cy).data('statesandinfos').indexOf(unit),\n    location: unit.anchorSide,\n    position: position\n  };\n};\nUnitOfInformation.remove = function (mainObj, cy) {\n  var position = UnitOfInformation.getPositionIndex(mainObj, cy);\n  var index = UnitOfInformation.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  UnitOfInformation.removeFromParent(mainObj, cy);\n  //console.log(\"after remove\", this.parent.data('auxunitlayouts'), this.parent.data('statesandinfos'));\n  return {\n    clazz: \"unit of information\",\n    label: {\n      text: mainObj.label.text\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\nUnitOfInformation.copy = function (mainObj, cy, newParent, newId) {\n  var newUnitOfInfo = AuxiliaryUnit.copy(mainObj, cy, UnitOfInformation.construct(), newParent, newId);\n  newUnitOfInfo.label = jQuery.extend(true, {}, mainObj.label);\n  newUnitOfInfo.clazz = mainObj.clazz;\n  return newUnitOfInfo;\n};\nns.UnitOfInformation = UnitOfInformation;\n// -------------- END UnitOfInformation -------------- //\n\n// -------------- EntityType -------------- //\n/**\n * The type of the EPN, for example there can be severals myosin EPN, but only one myosin EntityType\n * This class will hold the information regarding state variable, that are shared between all myosins\n */\n\nvar EntityType = {};\n\n// Constructs an EntityType object and returns it\nEntityType.construct = function (name, EPN) {\n  var obj = {};\n  obj.name = name; // normally the same as its EPNs\n  obj.stateVariableDefinitions = []; // 0 or many shared state definitions\n  obj.EPNs = []; // there should always be at least 1 element, else no reason to exist\n  return obj;\n};\nEntityType.createNewDefinitionFor = function (mainObj, stateVar) {\n  var newDefinition = StateVariableDefinition.construct();\n  newDefinition.entityType = mainObj;\n  newDefinition.stateVariables.push(stateVar);\n  stateVar.stateVariableDefinition = newDefinition;\n  stateVar.parent.data('entityType', mainObj);\n  mainObj.stateVariableDefinitions.push(newDefinition);\n};\nEntityType.assignStateVariable = function (mainObj, stateVar) {\n  // first trivial case, no stateDefinition yet for this entityType, so this is a new one\n  if (mainObj.stateVariableDefinitions.length == 0) {\n    EntityType.createNewDefinitionFor(mainObj, stateVar);\n  } else {\n    // if definitions are already present, we need to match those to the current stateVariable\n    for (var i = 0; i < mainObj.stateVariableDefinitions.length; i++) {\n      var matchStateDef = mainObj.stateVariableDefinitions[i];\n      if (StateVariableDefinition.matchStateVariable(matchStateDef, stateVar)) {\n        matchStateDef.stateVariables.push(stateVar);\n        stateVar.stateVariableDefinition = matchStateDef;\n        stateVar.parent.data('entityType', mainObj);\n        return;\n      }\n    }\n    // if nothing was matched among the current stateVarDef of this entityType, create new one\n    EntityType.createNewDefinitionFor(mainObj, stateVar);\n  }\n};\nns.EntityType = EntityType;\n// -------------- END EntityType -------------- //\n\n// -------------- StateVariableDefinition -------------- //\n/**\n * The state variable definition is something shared across different EPNs\n * The concerned EPNs are linked through the entitype reference\n */\n\nvar StateVariableDefinition = {};\n\n// Constructs a new StateVariableDefinition object and returns it\nStateVariableDefinition.construct = function (name, entityType) {\n  var obj = {};\n  obj.name = name;\n  obj.entityType = entityType; // reference to owning entity type\n  obj.stateVariables = []; // there should always be at least 1 element, else no reason to exist\n  return obj;\n};\n\n/**\n * returns an array of elements that share this state definition\n */\nStateVariableDefinition.getConcernedEPNs = function (mainObj) {\n  return mainObj.entityType.EPNs;\n};\n\n/**\n * Guess if the provided stateVariable belongs to this stateVarDefinition\n * We consider it does, if either the statevar.value or statevar.variable are matching one\n * if the statevar in the set of the StateVarDef\n * This is because we normally compare only stateVariables from the same entityType\n */\nStateVariableDefinition.matchStateVariable = function (mainObj, stateVar) {\n  for (var i = 0; i < mainObj.stateVariables.length; i++) {\n    var matchStateVar = mainObj.stateVariables[i];\n    // Don't match a stateVar against another one from the same element.\n    // If 2 statevar on the same element, then they have to belong to 2 different stateVarDefinitions\n    if (matchStateVar.parent === stateVar.parent) {\n      continue;\n    }\n    //console.log(\"try\", [matchStateVar.value, matchStateVar.variable], [stateVar.value, stateVar.variable]);\n    // normal sure case. Example:\n    // P T134 - undefined T134\n    // P undef - P undef\n    if (\n    //(matchStateVar.value && stateVar.value && matchStateVar.value == stateVar.value ) ||\n    matchStateVar.variable && stateVar.variable && matchStateVar.variable == stateVar.variable) {\n      return true;\n    }\n    // more subtle case, with empty stateVar. Look only at value and discard variable\n    // example: undef undef - P undef\n    else if (!matchStateVar.variable && !stateVar.variable && (matchStateVar.value || stateVar.value)) {\n      return true;\n    }\n  }\n  return false;\n};\nns.StateVariableDefinition = StateVariableDefinition;\n// -------------- END StateVariableDefinition -------------- //\n\n// -------------- AuxUnitLayout -------------- //\n/**\n * Responsible for laying out the auxiliary units contained on a same edge\n */\n\nvar AuxUnitLayout = {};\nAuxUnitLayout.construct = function (parentNode, location, alignment) {\n  var obj = {};\n  obj.units = [];\n  obj.location = location;\n  obj.alignment = alignment || \"left\"; // this was intended to be used, but it isn't for now\n  AuxUnitLayout.setParentNodeRef(obj, parentNode);\n  obj.renderLengthCache = [];\n  obj.lengthUsed = 0;\n\n  // specific rules for the layout\n  if (parentNode.data('class') == \"simple chemical\") {\n    obj.outerMargin = 3;\n  }\n  return obj;\n};\nAuxUnitLayout.getParentNode = function (mainObj, cy) {\n  var parentNode = mainObj.parentNode;\n\n  // If parentNode is id of parent node rather than being itself get the parent node by that id\n  if (typeof parentNode === 'string') {\n    return cy.getElementById(parentNode);\n  }\n  return parentNode;\n};\nAuxUnitLayout.setParentNodeRef = function (mainObj, parentNode) {\n  if (mainObj && parentNode) {\n    // Keep id of parent node to avaoid circular references\n    mainObj.parentNode = typeof parentNode === 'string' ? parentNode : parentNode.id();\n  }\n};\n\n/**\n * outerMargin: the left and right space left between the side of the node, and the first (and last) box\n * unitGap: the space between the auxiliary units\n * alwaysShowAuxUnits: bypasses any limit of units displayed, and prevent units from disappearing,\n * forcing a minimum size for the node\n * maxUnitDisplayed: show at most this amount of units, even when there is enough space\n *\n * These options can be defined at the instance level. If it is found in an instance, then it\n * takes precedence. If not found, the following class' values are used.\n */\nAuxUnitLayout.outerMargin = 5;\nAuxUnitLayout.unitGap = 5;\nAuxUnitLayout.currentTopUnitGap = 5;\nAuxUnitLayout.currentBottomUnitGap = 5;\nAuxUnitLayout.currentLeftUnitGap = 5;\nAuxUnitLayout.currentRightUnitGap = 5;\nAuxUnitLayout.alwaysShowAuxUnits = true;\nAuxUnitLayout.maxUnitDisplayed = -1;\nAuxUnitLayout.lastPos = -1;\nAuxUnitLayout.update = function (mainObj, cy) {\n  //AuxUnitLayout.precomputeCoords(mainObj, cy);\n};\nAuxUnitLayout.addAuxUnit = function (mainObj, cy, unit, position, preComputed) {\n  if (typeof position != \"undefined\") {\n    //console.log(\"add unit at positiion\", position);\n    mainObj.units.splice(position, 0, unit);\n  } else {\n    mainObj.units.push(unit);\n    position = mainObj.units.length - 1;\n  }\n  if (preComputed === undefined || preComputed === false) {\n    AuxUnitLayout.computeCoords(mainObj, cy, unit);\n    var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n    var locations = AuxUnitLayout.checkFit(parentNode, cy);\n    if (locations.filter(function (loc) {\n      return loc == mainObj.location;\n    }).length > 0) {\n      AuxUnitLayout.fitUnits(parentNode, cy, [mainObj.location]);\n    }\n  }\n  //AuxUnitLayout.updateLengthCache(mainObj, cy);\n  //AuxUnitLayout.update(mainObj, cy, true);\n  /*if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // set a minimum size according to both sides on the same orientation\n    AuxUnitLayout.setParentMinLength(mainObj, cy);\n    // need to resize the parent in case the space was too small\n    AuxUnitLayout.resizeParent(mainObj, cy, mainObj.lengthUsed);\n  }*/\n  //cy.style().update(); // <- was it really necessary ?\n  return position;\n};\nAuxUnitLayout.computeCoords = function (mainObj, cy, unit) {\n  AuxUnitLayout.setDisplayedUnits(mainObj, cy);\n  var location = mainObj.location;\n  var node = AuxUnitLayout.getParentNode(mainObj, cy);\n  if (location === \"top\" || location === \"bottom\") {\n    var position = node.position();\n    var parentWidth = node.data('bbox').w;\n    var padding = node.padding();\n    var parentWidth = node.width();\n    var parentHeight = node.height();\n    var parentX1 = position.x - parentWidth / 2 - padding;\n    var parentX2 = position.x + parentWidth / 2 + padding;\n    var parentY1 = position.y - parentHeight / 2 - padding;\n    var parentY2 = position.y + parentHeight / 2 + padding;\n    if (mainObj.units.length === 1) {\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + parentX1 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n    } else {\n      var lastUnit = mainObj.units[mainObj.units.length - 2]; //Get the position of the last unit\n      var lastUnitAbsCord = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + lastUnitAbsCord.x + lastUnit.bbox.w / 2 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n      // unit.bbox.x = mainObj.units[lastUnit].bbox.x +  mainObj.units[lastUnit].bbox.w/2 + unit.bbox.w/2 + AuxUnitLayout.getCurrentGap(location);\n    }\n    unit.bbox.y = location === \"top\" ? 0 : 100;\n  } //We don't have the right or left addition cases yet -- Now we have it\n  else {\n    var position = node.position();\n    var parentWidth = node.data('bbox').w;\n    var padding = node.padding();\n    var parentWidth = node.width();\n    var parentHeight = node.height();\n    var parentX1 = position.x - parentWidth / 2 - padding;\n    var parentX2 = position.x + parentWidth / 2 + padding;\n    var parentY1 = position.y - parentHeight / 2 - padding;\n    var parentY2 = position.y + parentHeight / 2 + padding;\n    if (mainObj.units.length === 1) {\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + parentX1 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n    } else {\n      var lastUnit = mainObj.units[mainObj.units.length - 2]; //Get the position of the last unit\n      var lastUnitAbsCord = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + lastUnitAbsCord.x + lastUnit.bbox.w / 2 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n      // unit.bbox.x = mainObj.units[lastUnit].bbox.x +  mainObj.units[lastUnit].bbox.w/2 + unit.bbox.w/2 + AuxUnitLayout.getCurrentGap(location);\n    }\n    unit.bbox.y = location === \"top\" ? 0 : 100;\n  }\n};\nAuxUnitLayout.removeAuxUnit = function (mainObj, cy, unit) {\n  var index = mainObj.units.indexOf(unit);\n  mainObj.units.splice(index, 1);\n  //AuxUnitLayout.updateLengthCache(mainObj, cy);\n  /*AuxUnitLayout.update(mainObj, cy, true);\n  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // set a minimum size according to both sides on the same orientation\n    AuxUnitLayout.setParentMinLength(mainObj, cy);\n  }*/\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n\n  //TODO find a way to elimate this redundancy to update info-box positions\n  parentNode.data('border-width', parentNode.data('border-width'));\n};\n\n/**\n * reorder boxes using their defined positions. From left to right and top to bottom.\n * this ensures that their order in the layout's list corresponds to the reality of the map.\n */\nAuxUnitLayout.reorderFromPositions = function (mainObj, cy) {\n  mainObj.units.sort(function (a, b) {\n    if (mainObj.location == \"top\" || mainObj.location == \"bottom\") {\n      if (a.bbox.x < b.bbox.x) {\n        return -1;\n      }\n      if (a.bbox.x > b.bbox.x) {\n        return 1;\n      }\n    } else {\n      if (a.bbox.y < b.bbox.y) {\n        return -1;\n      }\n      if (a.bbox.y > b.bbox.y) {\n        return 1;\n      }\n    }\n    return 0;\n  });\n  //console.log(\"units after reoarder\", this.units);\n  /*AuxUnitLayout.updateLengthCache(mainObj, cy);\n  AuxUnitLayout.update(mainObj, cy, true);*/\n};\n\n/**\n * use a cached list to determine what is the length needed to draw x aux units.\n * can then be compared against the parent node's dimensions, to decide how many\n * aux units to draw.\n */\nAuxUnitLayout.updateLengthCache = function (mainObj, cy) {\n  mainObj.renderLengthCache = [0];\n  var previous = AuxUnitLayout.getOuterMargin(mainObj);\n  for (var i = 0; i < mainObj.units.length; i++) {\n    var currentLength;\n    if (AuxUnitLayout.isTorB(mainObj)) {\n      currentLength = mainObj.units[i].bbox.w;\n    } else {\n      currentLength = mainObj.units[i].bbox.h;\n    }\n    mainObj.renderLengthCache.push(previous + currentLength + AuxUnitLayout.getOuterMargin(mainObj));\n    previous += currentLength + AuxUnitLayout.getUnitGap(mainObj);\n  }\n};\n\n/**\n * Use the cached precomputed lengths to decide how many units we are capable of drawing,\n * considering the size of the parent node.\n * The number returned says: we are able to draw the N first units of the lists.\n * Unused for now.\n */\nAuxUnitLayout.getDrawableUnitAmount = function (mainObj) {\n  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // bypass all this\n    return mainObj.units.length;\n  }\n\n  // get the length of the side on which we draw\n  var availableSpace;\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth();\n  } else {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();\n  }\n  // loop over the cached precomputed lengths\n  for (var i = 0; i < mainObj.renderLengthCache.length; i++) {\n    if (mainObj.renderLengthCache[i] > availableSpace) {\n      // stop if we overflow\n      return i - 1;\n    }\n  }\n  return mainObj.units.length;\n};\nAuxUnitLayout.setDisplayedUnits = function (mainObj, cy) {\n  // get the length of the side on which we draw\n\n  var availableSpace;\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth();\n    // due to corner of barrel shaped compartment decrease availableSpace -- no infobox on corners\n    if (AuxUnitLayout.getParentNode(mainObj, cy).data(\"class\") == \"compartment\") availableSpace *= 0.8;\n  } else {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();\n  }\n\n  // there is always n+1 elements in the cachedLength for n units\n  var alwaysShowAuxUnits = AuxUnitLayout.getAlwaysShowAuxUnits(mainObj);\n  var maxUnitDisplayed = AuxUnitLayout.getMaxUnitDisplayed(mainObj);\n  for (var i = 0; i < mainObj.units.length; i++) {\n    if (mainObj.renderLengthCache[i + 1] <= availableSpace // do we have enough space?\n    && (maxUnitDisplayed == -1 || i < maxUnitDisplayed) // is there no limit? or are we under that limit?\n    || alwaysShowAuxUnits) {\n      // do we always want to show everything regardless?\n      mainObj.units[i].isDisplayed = true;\n    } else {\n      mainObj.units[i].isDisplayed = false;\n    }\n  }\n};\nAuxUnitLayout.getUsedWidth = function (node, tb) {\n  var units = tb.units;\n  var totalWidth = 0;\n  for (var i = 0; i < units.length; i++) {\n    totalWidth += units[i].bbox.w;\n  }\n  return totalWidth;\n};\nAuxUnitLayout.getUsedHeight = function (node, tb) {\n  var units = tb.units;\n  var totalHeight = 0;\n  for (var i = 0; i < units.length; i++) {\n    totalHeight += units[i].bbox.h;\n  }\n  return totalHeight;\n};\nAuxUnitLayout.getUsedLengthTB = function (node, tb) {\n  var units = tb.units;\n  return AuxUnitLayout.getUsedWidth(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin\n};\nAuxUnitLayout.getUsedLengthLR = function (node, tb) {\n  var units = tb.units;\n  return AuxUnitLayout.getUsedHeight(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin\n};\nAuxUnitLayout.setCurrentGap = function (location, value) {\n  if (location === \"top\") {\n    AuxUnitLayout.currentTopUnitGap = value;\n  } else if (location === \"bottom\") {\n    AuxUnitLayout.currentBottomUnitGap = value;\n  } else if (location === \"right\") {\n    AuxUnitLayout.currentRightUnitGap = value;\n  } else {\n    AuxUnitLayout.currentLeftUnitGap = value;\n  }\n};\nAuxUnitLayout.getCurrentGap = function (location) {\n  if (location === \"top\") {\n    return AuxUnitLayout.currentTopUnitGap;\n  } else if (location === \"bottom\") {\n    return AuxUnitLayout.currentBottomUnitGap;\n  } else if (location === \"right\") {\n    return AuxUnitLayout.currentRightUnitGap;\n  } else {\n    return AuxUnitLayout.currentLeftUnitGap;\n  }\n};\nAuxUnitLayout.checkFit = function (node, cy, forceCheck) {\n  var fitLocations = [];\n  for (var location in node.data('auxunitlayouts')) {\n    if (forceCheck !== undefined && location !== forceCheck) {\n      continue;\n    }\n    if (AuxUnitLayout.getCurrentGap(location) < AuxUnitLayout.unitGap) {\n      fitLocations.push(location);\n      continue;\n    }\n    var unit = node.data('auxunitlayouts')[location];\n    var units = unit.units;\n    if (units.length === 0) {\n      continue;\n    }\n    var firstUnit = units[0];\n    var lastUnit = units[units.length - 1];\n    var coordsFirst = AuxiliaryUnit.convertToAbsoluteCoord(firstUnit, firstUnit.bbox.x, firstUnit.bbox.y, cy);\n    var coordsLast = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n    var gap = AuxUnitLayout.getCurrentGap(location);\n    var padding = node.padding();\n    if (units.length > 0) {\n      //For any case of removal\n      if (location === \"top\" || location === \"bottom\") {\n        var parentX1 = node.position().x - node.width() / 2 - padding;\n        var parentX2 = node.position().x + node.width() / 2 + padding;\n        var firstX1 = coordsFirst.x - firstUnit.bbox.w / 2;\n        var lastX2 = coordsLast.x + lastUnit.bbox.w / 2;\n        if (parentX2 < lastX2 + gap) {\n          fitLocations.push(location);\n        }\n        /* if (parentX1 + gap > firstX1 || parentX2 - gap < lastX2) {\n            fitLocations.push(location);\n        } */\n      } else {\n        var parentY1 = node.position().y - node.height() / 2 - padding;\n        var parentY2 = node.position().y + node.height() / 2 + padding;\n        var firstY1 = coordsFirst.y - firstUnit.bbox.h / 2;\n        var lastY2 = coordsLast.y + lastUnit.bbox.h / 2;\n        if (parentY2 < lastY2 + gap) {\n          fitLocations.push(location);\n        }\n        /* if (parentY1 + gap > firstY1 || parentY2 - gap < lastY2) {\n            fitLocations.push(location);\n        } */\n      }\n    }\n  }\n  return fitLocations;\n};\nAuxUnitLayout.setIdealGap = function (node, location) {\n  var parentWidth = node.width();\n  var parentHeight = node.height();\n  var padding = node.padding();\n  var position = node.position();\n  var parentX1 = position.x - parentWidth / 2 - padding;\n  var parentY1 = position.y - parentHeight / 2 - padding;\n  var estimatedGap;\n  var auxUnit = node.data('auxunitlayouts')[location];\n  if (auxUnit === undefined) {\n    return 0;\n  }\n  if (auxUnit.units.length <= 0 || !auxUnit.units) {\n    return 0;\n  }\n  var units = auxUnit.units;\n  if (location === \"top\" || location === \"bottom\") {\n    usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);\n    var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);\n    estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);\n    if (estimatedGap > AuxUnitLayout.unitGap) {\n      estimatedGap = AuxUnitLayout.unitGap;\n    }\n\n    //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit\n\n    var usedLength = estimatedGap;\n    for (var i = 0; i < units.length; i++) {\n      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);\n      units[i].bbox.x = relativeCord.x;\n      units[i].bbox.y = relativeCord.y;\n      usedLength += units[i].bbox.w + estimatedGap;\n    }\n    AuxUnitLayout.setCurrentGap(location, estimatedGap);\n  } else {\n    //Find total left length\n    usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit);\n    //Compare the side lengths\n    var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);\n    estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);\n    if (estimatedGap > AuxUnitLayout.unitGap) {\n      estimatedGap = AuxUnitLayout.unitGap;\n    }\n    //Else scale by using available space, reducing margins and gaps.\n    //Check if new gap is enough to fit\n    var usedLength = estimatedGap;\n    for (var i = 0; i < units.length; i++) {\n      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);\n      units[i].bbox.x = relativeCord.x;\n      units[i].bbox.y = relativeCord.y;\n      usedLength += units[i].bbox.h + estimatedGap;\n    }\n    //AuxUnitLayout.currentLeftUnitGap = estimatedGap;\n  }\n  AuxUnitLayout.setCurrentGap(location, estimatedGap);\n};\nAuxUnitLayout.fitUnits = function (node, cy, locations) {\n  var parentWidth = node.width();\n  var parentHeight = node.height();\n  var padding = node.padding();\n  var position = node.position();\n  var parentX1 = position.x - parentWidth / 2 - padding;\n  var parentX2 = position.x + parentWidth / 2 + padding;\n  var parentY1 = position.y - parentHeight / 2 - padding;\n  var parentY2 = position.y + parentHeight / 2 + padding;\n\n  //Get Parent node and find parent width\n\n  var estimatedGap;\n  for (var index = 0; index < locations.length; index++) {\n    var location = locations[index];\n    var auxUnit = node.data('auxunitlayouts')[location];\n    if (auxUnit === undefined) {\n      continue;\n    }\n    if (auxUnit.units.length <= 0 || !auxUnit.units) {\n      continue;\n    }\n    var units = auxUnit.units;\n    if (location === \"top\" || location === \"bottom\") {\n      usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);\n      var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);\n      estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);\n      if (estimatedGap > AuxUnitLayout.unitGap) {\n        estimatedGap = AuxUnitLayout.unitGap;\n      }\n\n      //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit\n\n      var usedLength = estimatedGap;\n      for (var i = 0; i < units.length; i++) {\n        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);\n        units[i].bbox.x = relativeCord.x;\n        units[i].bbox.y = relativeCord.y;\n        usedLength += units[i].bbox.w + estimatedGap;\n      }\n      AuxUnitLayout.setCurrentGap(location, estimatedGap);\n    } else {\n      //Find total left length\n      usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit);\n      //Compare the side lengths\n      var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);\n      estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);\n      if (estimatedGap > AuxUnitLayout.unitGap) {\n        estimatedGap = AuxUnitLayout.unitGap;\n      }\n      //Else scale by using available space, reducing margins and gaps.\n      //Check if new gap is enough to fit\n      var usedLength = estimatedGap;\n      for (var i = 0; i < units.length; i++) {\n        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);\n        units[i].bbox.x = relativeCord.x;\n        units[i].bbox.y = relativeCord.y;\n        usedLength += units[i].bbox.h + estimatedGap;\n      }\n      //AuxUnitLayout.currentLeftUnitGap = estimatedGap;\n    }\n    AuxUnitLayout.setCurrentGap(location, estimatedGap);\n  }\n\n  //TODO find a way to elimate this redundancy to update info-box positions\n  node.data('border-width', node.data('border-width'));\n};\n\n// Calculate total length used in a side\n// TODO find a way to refactor, remove ugliness of top-bottom/left-right.\nAuxUnitLayout.precomputeCoords = function (mainObj, cy, doForceUpdate) {\n  AuxUnitLayout.setDisplayedUnits(mainObj, cy);\n  var lengthUsed = AuxUnitLayout.getOuterMargin(mainObj);\n  var finalLengthUsed = lengthUsed;\n  var unitGap = AuxUnitLayout.getUnitGap(mainObj);\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  for (var i = 0; i < mainObj.units.length; i++) {\n    // change the coordinate system of the auxiliary unit according to the chosen layout\n    var auxUnit = mainObj.units[i];\n    if (auxUnit.coordType != \"relativeToSide\" || doForceUpdate) {\n      if (auxUnit.coordType == \"relativeToCenter\" || doForceUpdate) {\n        if (AuxUnitLayout.isTorB(mainObj)) {\n          //auxUnit.bbox.y = 0;\n          auxUnit.bbox.x = lengthUsed + auxUnit.bbox.w / 2;\n        } else {\n          //auxUnit.bbox.x = 0;\n          auxUnit.bbox.y = lengthUsed + auxUnit.bbox.h / 2;\n        }\n      }\n      auxUnit.coordType = \"relativeToSide\";\n    }\n    if (AuxUnitLayout.isTorB(mainObj)) {\n      //auxUnit.bbox.y = 0;\n      lengthUsed += auxUnit.bbox.w + unitGap;\n    } else {\n      //auxUnit.bbox.x = 0;\n      lengthUsed += auxUnit.bbox.h + unitGap;\n    }\n    if (auxUnit.isDisplayed) {\n      finalLengthUsed = lengthUsed;\n    }\n  }\n  // adjust the length, should be composed of outerMargin on the end, not unitGap\n  finalLengthUsed = finalLengthUsed - unitGap + AuxUnitLayout.getOuterMargin(mainObj);\n  mainObj.lengthUsed = finalLengthUsed;\n};\nAuxUnitLayout.draw = function (mainObj, cy, context) {\n  for (var i = 0; i < mainObj.units.length; i++) {\n    var auxUnit = mainObj.units[i];\n    getAuxUnitClass(auxUnit).draw(auxUnit, cy, context);\n  }\n};\nAuxUnitLayout.modifyUnits = function (parentNode, unit, oldLocation, cy) {\n  var location = unit.anchorSide;\n  var posX = unit.bbox.x;\n  var posY = unit.bbox.y;\n  if (!parentNode.data('auxunitlayouts')[oldLocation]) {\n    parentNode.data('auxunitlayouts')[oldLocation] = AuxUnitLayout.construct(parentNode, oldLocation);\n  }\n  var oldAuxUnit = parentNode.data('auxunitlayouts')[oldLocation];\n  var deleteUnits = oldAuxUnit.units;\n\n  //Delete from old location\n  var deleteIndex;\n  for (var i = 0; i < deleteUnits.length; i++) {\n    if (deleteUnits[i] === unit) {\n      deleteIndex = i;\n      break;\n    }\n  }\n  deleteUnits.splice(deleteIndex, 1);\n  //If new is not constructed contruct interval\n  if (!parentNode.data('auxunitlayouts')[location]) {\n    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);\n  }\n  var insertAuxUnit = insertUnits = parentNode.data('auxunitlayouts')[location];\n  var insertUnits = insertAuxUnit.units;\n  var index = 0;\n  //Insert into new unit array\n  if (location === \"top\" || location === \"bottom\") {\n    while (insertUnits[index] !== undefined && posX > insertUnits[index].bbox.x) {\n      index++;\n    }\n  } else {\n    while (insertUnits[index] !== undefined && posY > insertUnits[index].bbox.y) {\n      index++;\n    }\n  }\n  insertUnits.splice(index, 0, unit);\n};\nAuxUnitLayout.isEmpty = function (mainObj) {\n  return mainObj.units.length == 0;\n};\nAuxUnitLayout.unitCount = function (mainObj) {\n  return mainObj.units.length;\n};\nAuxUnitLayout.unitLength = function (mainObj) {\n  var units = mainObj.units;\n  var rightMostPoint = 0;\n  for (var i = 0; i < units.length; i++) {\n    var box = units[i].bbox;\n    if (box.x + box.w / 2 > rightMostPoint) {\n      rightMostPoint = box.x + box.w / 2;\n    }\n  }\n  return rightMostPoint;\n};\nAuxUnitLayout.unitLengthRightLeft = function (mainObj) {\n  var units = mainObj.units;\n  var topMostPoint = 0;\n  for (var i = 0; i < units.length; i++) {\n    var box = units[i].bbox;\n    if (box.y + box.h / 2 > topMostPoint) {\n      topMostPoint = box.y + box.h / 2;\n    }\n  }\n  return topMostPoint;\n};\n\n//Get Unit Gaps\nAuxUnitLayout.getCurrentTopGap = function () {\n  return AuxUnitLayout.currentTopUnitGap;\n};\nAuxUnitLayout.getCurrentBottomGap = function () {\n  return AuxUnitLayout.currentBottomUnitGap;\n};\nAuxUnitLayout.getCurrentLeftGap = function () {\n  return AuxUnitLayout.currentLeftUnitGap;\n};\nAuxUnitLayout.getCurrentRightGap = function () {\n  return AuxUnitLayout.currentRightUnitGap;\n};\n\n/**\n * Auto choose the next layout. To add a new aux unit, for example.\n */\nAuxUnitLayout.selectNextAvailable = function (node) {\n  var top = node.data('auxunitlayouts').top;\n  var bottom = node.data('auxunitlayouts').bottom;\n  var resultLocation = \"top\";\n  // start by adding on top if free\n  if (!top || AuxUnitLayout.isEmpty(top)) {\n    resultLocation = \"top\";\n  } else if (!bottom || AuxUnitLayout.isEmpty(bottom)) {\n    resultLocation = \"bottom\";\n  } else {\n    // choose the side (top or bottom) that has the most space available to the right of the rightmost infobox\n    if (AuxUnitLayout.unitLength(top) <= AuxUnitLayout.unitLength(bottom)) {\n      resultLocation = \"top\";\n    } else {\n      resultLocation = \"bottom\";\n    }\n  }\n  AuxUnitLayout.lastPos = resultLocation; //Set last used position\n  return resultLocation;\n};\nAuxUnitLayout.selectNextAvailableLeftRight = function (node) {\n  var left = node.data('auxunitlayouts').left;\n  var right = node.data('auxunitlayouts').right;\n  var resultLocation = \"left\";\n  // start by adding on left if free\n  if (!left || AuxUnitLayout.isEmpty(left)) {\n    resultLocation = \"left\";\n  } else if (!right || AuxUnitLayout.isEmpty(right)) {\n    resultLocation = \"right\";\n  } else {\n    // choose the side (left or right) that has the most space available to the right of the rightmost infobox\n    if (AuxUnitLayout.unitLengthRightLeft(left) <= AuxUnitLayout.unitLengthRightLeft(right)) {\n      resultLocation = \"left\";\n    } else {\n      resultLocation = \"right\";\n    }\n  }\n  AuxUnitLayout.lastPos = resultLocation; //Set last used position\n  return resultLocation;\n};\nAuxUnitLayout.resizeParent = function (mainObj, cy, length) {\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    if (parentNode.data('bbox').w < length) {\n      cy.trigger(\"nodeediting.resizestart\", [\"centerright\", parentNode]);\n      parentNode.data('bbox').w = length;\n      cy.trigger(\"nodeediting.resizeend\", [\"centerright\", parentNode]);\n    }\n  } else {\n    if (parentNode.data('bbox').h < length) {\n      cy.trigger(\"nodeediting.resizestart\", [\"bottomcenter\", parentNode]);\n      parentNode.data('bbox').h = length;\n      cy.trigger(\"nodeediting.resizeend\", [\"bottomcenter\", parentNode]);\n    }\n  }\n};\nAuxUnitLayout.isTorB = function (mainObj) {\n  return mainObj.location == \"top\" || mainObj.location == \"bottom\";\n};\nAuxUnitLayout.isLorR = function (mainObj) {\n  return mainObj.location == \"left\" || mainObj.location == \"right\";\n};\nAuxUnitLayout.setParentMinLength = function (mainObj, cy) {\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  var parentLayouts = parentNode.data('auxunitlayouts');\n  switch (mainObj.location) {\n    case \"top\":\n      var compareVal = parentLayouts.bottom ? parentLayouts.bottom.lengthUsed : 0;\n      break;\n    case \"bottom\":\n      var compareVal = parentLayouts.top ? parentLayouts.top.lengthUsed : 0;\n      break;\n    case \"left\":\n      var compareVal = parentLayouts.right ? parentLayouts.right.lengthUsed : 0;\n      break;\n    case \"right\":\n      var compareVal = parentLayouts.left ? parentLayouts.left.lengthUsed : 0;\n      break;\n  }\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    parentNode.data('resizeMinWidth', Math.max(mainObj.lengthUsed, compareVal));\n  } else {\n    parentNode.data('resizeMinHeight', Math.max(mainObj.lengthUsed, compareVal));\n  }\n};\nAuxUnitLayout.getOuterMargin = function (mainObj) {\n  if (typeof mainObj.outerMargin !== \"undefined\" && mainObj.outerMargin !== null) {\n    return mainObj.outerMargin;\n  } else {\n    return AuxUnitLayout.outerMargin;\n  }\n};\nAuxUnitLayout.getUnitGap = function (mainObj) {\n  if (typeof mainObj.unitGap !== \"undefined\" && mainObj.unitGap !== null) {\n    return mainObj.unitGap;\n  } else {\n    return AuxUnitLayout.unitGap;\n  }\n};\nAuxUnitLayout.getAlwaysShowAuxUnits = function (mainObj) {\n  if (typeof mainObj.alwaysShowAuxUnits !== \"undefined\" && mainObj.alwaysShowAuxUnits !== null) {\n    return mainObj.alwaysShowAuxUnits;\n  } else {\n    return AuxUnitLayout.alwaysShowAuxUnits;\n  }\n};\nAuxUnitLayout.getMaxUnitDisplayed = function (mainObj) {\n  if (typeof mainObj.maxUnitDisplayed !== \"undefined\" && mainObj.maxUnitDisplayed !== null) {\n    return mainObj.maxUnitDisplayed;\n  } else {\n    return AuxUnitLayout.maxUnitDisplayed;\n  }\n};\n\n/*\n *  Duplicate a layout. Doesn't copy the units attribute, reset it instead.\n */\nAuxUnitLayout.copy = function (mainObj, cy, newParent) {\n  var newLayout = AuxUnitLayout.construct(newParent);\n  // Copying the same reference to units would be inconsistent.\n  // Duplicating owned units goes beyonnd the scope, because we need to assign\n  // ids that are tied to the global cound of units of a node.\n  // So duplicating units is something that should be properly done outside of this function.\n  // TODO that is a bit dirty, find a nice modular way to arrange that\n  newLayout.units = [];\n  newLayout.location = mainObj.location;\n  newLayout.alignment = mainObj.alignment;\n  AuxUnitLayout.setParentNodeRef(newLayout, newParent);\n  newLayout.renderLengthCache = mainObj.renderLengthCache;\n  newLayout.lengthUsed = mainObj.lengthUsed;\n  if (typeof mainObj.outerMargin !== \"undefined\") {\n    newLayout.outerMargin = mainObj.outerMargin;\n  }\n  if (typeof mainObj.unitGap !== \"undefined\") {\n    newLayout.unitGap = mainObj.unitGap;\n  }\n  if (typeof mainObj.alwaysShowAuxUnits !== \"undefined\") {\n    newLayout.alwaysShowAuxUnits = mainObj.alwaysShowAuxUnits;\n  }\n  if (typeof mainObj.maxUnitDisplayed !== \"undefined\") {\n    newLayout.maxUnitDisplayed = mainObj.maxUnitDisplayed;\n  }\n  return newLayout;\n};\nns.AuxUnitLayout = AuxUnitLayout;\n// -------------- END AuxUnitLayout -------------- //\n\nmodule.exports = ns;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/classes.js\n");

/***/ }),

/***/ "./src/utilities/element-utilities-factory.js":
/*!****************************************************!*\
  !*** ./src/utilities/element-utilities-factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/*\n * Common utilities for elements includes both general utilities and sbgn specific utilities\n */\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var optionUtilities, graphUtilities;\n  var options;\n  var cy;\n  function elementUtilities(param) {\n    // Init params to be accessed by elementUtilities\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    graphUtilities = param.graphUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  var inArray = function inArray(value, arr) {\n    return $.inArray(value, arr) !== -1;\n  };\n\n  // initialize map type\n  elementUtilities.mapType = \"PD\";\n  elementUtilities.fileFormat = undefined;\n  elementUtilities.PD = {}; // namespace for all PD specific stuff\n  elementUtilities.AF = {}; // namespace for all AF specific stuff\n  elementUtilities.SIF = {}; // namespace for all SIF specific stuff\n  elementUtilities.SBML = {}; // namespace for all SIF specific stuff\n\n  elementUtilities.graphTopologyLocked = false;\n\n  // see http://stackoverflow.com/a/8809472\n  // we need to take care of our own IDs because the ones automatically generated by cytoscape (also UUID)\n  // don't comply with xsd:SID type that must not begin with a number\n  elementUtilities.generateUUID = function () {\n    // Public Domain/MIT\n    var d = Date.now();\n    if (typeof performance !== \"undefined\" && typeof performance.now === \"function\") {\n      d += performance.now(); //use high-precision timer if available\n    }\n    return \"xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n      var r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === \"x\" ? r : r & 0x3 | 0x8).toString(16);\n    });\n  };\n  elementUtilities.generateNodeId = function () {\n    return \"nwtN_\" + elementUtilities.generateUUID();\n  };\n  elementUtilities.generateEdgeId = function () {\n    return \"nwtE_\" + elementUtilities.generateUUID();\n  };\n  elementUtilities.generateStateVarId = function () {\n    return \"nwtSV_\" + elementUtilities.generateUUID();\n  };\n  elementUtilities.generateUnitOfInfoId = function () {\n    return \"nwtUOI_\" + elementUtilities.generateUUID();\n  };\n\n  /*\n    see http://journal.imbio.de/articles/pdf/jib-263.pdf p.41 <-- but beware, outdated\n    following tables have been updated with PD lvl1 v2.0 of November 7, 2016 working draft\n    only the following things have been changed from 2.0 (this version is not clear on connectivity):\n     - empty set has no limit on its edge count\n     - logic operators can be source and target\n     - limit of 1 catalysis and 1 necessary stimulation on a process\n     for each edge class and nodeclass define 2 cases:\n     - node can be a source of this edge -> asSource\n     - node can be a target of this edge -> asTarget\n    for both cases, tells if it is allowed and what is the limit of edges allowed.\n    Limits can concern only this type of edge (maxEdge) or the total number of edges for this node (maxTotal).\n    Consider undefined things as false/unallowed -> whitelist behavior.\n     the nodes/edges class listed below are those used in the program.\n    For instance \"compartment\" isn't a node in SBGN specs.\n  */\n  elementUtilities.PD.connectivityConstraints = {\n    consumption: {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {}\n      },\n      association: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    production: {\n      macromolecule: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unspecified entity\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      complex: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"nucleic acid feature\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {}\n      },\n      association: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    modulation: {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    stimulation: {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    catalysis: {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {},\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    inhibition: {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"necessary stimulation\": {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {}\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      }\n    },\n    \"equivalence arc\": {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"empty set\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {}\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n\n  /* AF node connectivity rules\n   * See: Systems Biology Graphical Notation: Activity Flow language Level 1, Version 1.2, Date: July 27, 2015\n   *   Section 3.3.1: Activity Nodes connectivity definition\n   *   URL: https://doi.org/10.2390/biecoll-jib-2015-265\n   */\n  elementUtilities.AF.connectivityConstraints = {\n    \"positive influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      delay: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"negative influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      delay: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      delay: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"necessary stimulation\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      delay: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      or: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      not: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      delay: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"equivalence arc\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      phenotype: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      submap: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      delay: {\n        asSource: {},\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.SIF.connectivityConstraints = {\n    \"controls-state-change-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-transport-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-phosphorylation-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-expression-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"catalysis-precedes\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"in-complex-with\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"interacts-with\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"neighbor-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"consumption-controled-by\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"controls-production-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"controls-transport-of-chemical\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"chemical-affects\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"reacts-with\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"used-to-produce\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    activates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    inhibits: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    phosphorylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    dephosphorylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"upregulates-expression\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"downregulates-expression\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"activates-gtpase\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"inhibits-gtpase\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    acetylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    deacetylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    methylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    demethylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.SBML.connectivityConstraints = {\n    consumption: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    production: {\n      protein: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    modulation: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    stimulation: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    catalysis: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    inhibition: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    trigger: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    transport: {\n      protein: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {}\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"unknown inhibition\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown catalysis\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"transcription consumption\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"transcription production\": {\n      protein: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"translation consumption\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"translation production\": {\n      protein: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"positive influence sbml\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"negative influence\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"reduced modulation\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"reduced stimulation\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"reduced trigger\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown negative influence\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown positive influence\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown reduced stimulation\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown reduced modulation\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown reduced trigger\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.logicalOperatorTypes = [\"and\", \"or\", \"not\", \"delay\", \"unknown logical operator\"];\n  elementUtilities.processTypes = [\"process\", \"omitted process\", \"uncertain process\", \"truncated process\", \"association\", \"dissociation\", \"phenotype\"];\n  elementUtilities.biologicalActivityTypes = [\"biological activity\", \"BA plain\", \"BA unspecified entity\", \"BA simple chemical\", \"BA macromolecule\", \"BA nucleic acid feature\", \"BA perturbing agent\", \"BA complex\"];\n  elementUtilities.epnTypes = [\"macromolecule\", \"nucleic acid feature\", \"simple chemical\", \"empty set\", \"unspecified entity\", \"perturbing agent\", \"complex\", \"protein\", \"nucleic acid feature multimer\", \"macromolecule multimer\", \"simple chemical multimer\", \"complex multimer\"];\n  elementUtilities.sifTypes = [\"SIF macromolecule\", \"SIF simple chemical\"];\n  elementUtilities.otherNodeTypes = [\"compartment\", \"tag\", \"submap\", \"topology group\"];\n  elementUtilities.sbmlType = [\"gene\", \"rna\", \"simple molecule\", \"unknown molecule\", \"drug\", \"ion\", \"protein\", \"truncated protein\", \"ion channel\", \"receptor\", \"phenotype sbml\", \"complex sbml\", \"protein\", \"degradation\"];\n  elementUtilities.sbmlTypeMultimer = [\"gene multimer\", \"rna multimer\", \"ion channel multimer\", \"receptor multimer\", \"truncated protein multimer\", \"ion multimer\", \"simple molecule multimer\", \"unknown molecule multimer\", \"drug multimer\", \"complex multimer\", \"phenotype sbml multimer\", \"receptor multimer\", \"complex sbml multimer\", \"protein multimer\"];\n  elementUtilities.sbmlTypeActive = [\"active protein\", \"active receptor\", \"active ion channel\", \"active truncated protein\", \"active complex sbml\"];\n  elementUtilities.sbmlTypeHypothetical = [\"hypothetical protein\", \"hypothetical receptor\", \"hypothetical truncated protein\", \"hypothetical ion channel\", \"hypothetical gene\", \"hypothetical rna\", \"hypothetical phenotype sbml\", \"hypothetical ion\", \"hypothetical uknown molecule\", \"hypothetical drug\", \"hypothetical complex sbml\", \"hypothetical degradation\"];\n  elementUtilities.sbmlTypeActiveHypothetical = [\"active hypothetical protein\", \"active hypothetical receptor\", \"active hypothetical truncated protein\", \"hypothetical ion channel\", \"active hypothetical complex sbml\"];\n  elementUtilities.sbmlTypeActiveMultimer = [\"active protein multimer\", \"active receptor multimer\", \"active ion channel multimer\", \"active truncated protein multimer\", \"active complex multimer\"];\n  elementUtilities.sbmlTypeHypotheticalMultimer = [\"hypothetical protein multimer\", \"hypothetical receptor multimer\", \"hypothetical truncated protein multimer\", \"hypothetical ion channel multimer\", \"hypothetical gene multimer\", \"hypothetical rna multimer\", \"hypothetical phenotype sbml multimer\", \"hypothetical ion multimer\", \"hypothetical uknown molecule multimer\", \"hypothetical drug multimer\", \"hypothetical complex sbml  multimer\", \"hypothetical degradation  multimer\"];\n  elementUtilities.sbmlTypeActiveHypotheticalMultimer = [\"active hypothetical protein multimer\", \"active hypothetical receptor multimer\", \"active hypothetical ion channel multimer\", \"active hypothetical truncated protein multimer\", \"active hypothetical complex multimer\"];\n\n  //elementUtilities.sbmlTypeHypothetical = [''] //Do I need this?\n  elementUtilities.nodeTypes = elementUtilities.epnTypes.concat(elementUtilities.logicalOperatorTypes).concat(elementUtilities.processTypes).concat(elementUtilities.biologicalActivityTypes).concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes).concat(elementUtilities.sbmlType).concat(elementUtilities.sbmlTypeMultimer).concat(elementUtilities.sbmlTypeActive).concat(elementUtilities.sbmlTypeHypothetical).concat(elementUtilities.sbmlTypeActiveHypothetical).concat(elementUtilities.sbmlTypeActiveMultimer).concat(elementUtilities.sbmlTypeHypotheticalMultimer).concat(elementUtilities.sbmlTypeActiveHypotheticalMultimer);\n  elementUtilities.compoundNodeTypes = [\"complex\", \"compartment\", \"submap\"];\n  elementUtilities.simpleNodeTypes = $(elementUtilities.nodeTypes).not(elementUtilities.compoundNodeTypes).get();\n  elementUtilities.sifEdgeTypes = [\"neighbor-of\", \"interacts-with\", \"in-complex-with\", \"controls-state-change-of\", \"controls-transport-of\", \"controls-phosphorylation-of\", \"catalysis-precedes\", \"controls-expression-of\", \"consumption-controled-by\", \"controls-production-of\", \"controls-transport-of-chemical\", \"chemical-affects\", \"reacts-with\", \"used-to-produce\", \"phosphorylates\", \"dephosphorylates\", \"upregulates-expression\", \"downregulates-expression\", \"activates\", \"inhibits\", \"activates-gtpase\", \"inhibits-gtpase\", \"acetylates\", \"deacetylates\", \"methylates\", \"demethylates\"];\n  elementUtilities.edgeTypes = [\"consumption\", \"production\", \"modulation\", \"stimulation\", \"catalysis\", \"inhibition\", \"necessary stimulation\", \"logic arc\", \"equivalence arc\", \"unknown influence\", \"positive influence\", \"negative influence\", \"controls-state-change-of\", \"controls-transport-of\", \"controls-phosphorylation-of\", \"controls-expression-of\", \"catalysis-precedes\", \"in-complex-with\", \"interacts-with\", \"neighbor-of\", \"consumption-controled-by\", \"controls-production-of\", \"controls-transport-of-chemical\", \"chemical-affects\", \"reacts-with\", \"used-to-produce\", \"activates\", \"inhibits\", \"phosphorylates\", \"dephosphorylates\", \"upregulates-expression\", \"downregulates-expression\", \"activates-gtpase\", \"inhibits-gtpase\", \"acetylates\", \"deacetylates\", \"methylates\", \"demethylates\", \"trigger\", \"transport\", \"unknown inhibition\", \"unknown catalysis\", \"transcription consumption\", \"transcription production\", \"translation consumption\", \"translation production\", \"negative influence\", \"positive influence sbml\", \"reduced modulation\", \"reduced stimulation\", \"reduced trigger\", \"unknown negative influence\", \"unknown positive influence\", \"unknown reduced stimulation\", \"unknown reduced modulation\", \"unknown reduced trigger\"];\n  elementUtilities.undirectedEdgeTypes = [\"in-complex-with\", \"interacts-with\", \"neighbor-of\", \"logic arc\", \"equivalence arc\"];\n  elementUtilities.elementTypes = elementUtilities.nodeTypes.concat(elementUtilities.edgeTypes);\n\n  /*\n   * Get sbgnclass of the given element. If the parameter is a string return it\n   * by assuming that it is the sbgnclass itself.\n   */\n  elementUtilities.getSbgnClass = function (ele) {\n    if (ele == null) {\n      return null;\n    }\n    var sbgnclass = typeof ele === \"string\" ? ele : ele.data(\"class\");\n    return sbgnclass;\n  };\n\n  /*\n   * Get sbgn class omitting the multimer information\n   */\n  elementUtilities.getPureSbgnClass = function (ele) {\n    if (ele == null) {\n      return null;\n    }\n\n    //console.log(\"pure sbgn\", elementUtilities.getSbgnClass( ele ).replace( ' multimer', '' ).replace( 'active ', '' ).replace('hypothetical ', ''))\n    return elementUtilities.getSbgnClass(ele).replace(\" multimer\", \"\").replace(\"active \", \"\").replace(\"hypothetical \", \"\");\n  };\n\n  /*\n   * Returns if the elements with the given parent class can be parent of the elements with the given node class\n   */\n  elementUtilities.isValidParent = function (_nodeClass, _parentClass, node) {\n    // If nodeClass and parentClass params are elements itselves instead of their class names handle it\n    var nodeClass = typeof _nodeClass !== \"string\" ? _nodeClass.data(\"class\") : _nodeClass;\n    var parentClass = _parentClass != undefined && typeof _parentClass !== \"string\" ? _parentClass.data(\"class\") : _parentClass;\n    if (parentClass == undefined || parentClass === \"compartment\" || parentClass === \"submap\") {\n      // Compartments, submaps and the root can include any type of nodes\n      return true;\n    } else if (parentClass.startsWith(\"complex\") && (!node || node.connectedEdges().length == 0 ||\n    // Complexes can only include EPNs which do not have edges\n    elementUtilities.mapType == \"HybridAny\" || elementUtilities.mapType == \"HybridSbgn\")) {\n      // When map type is unknown, allow complexes to include EPNs with edges\n      return elementUtilities.isEPNClass(nodeClass);\n    }\n    return false; // Currently just 'compartment' and 'complex' compounds are supported return false for any other parentClass\n  };\n\n  // Get common properties of given elements. Returns null if the given element list is empty or the\n  // property is not common for all elements. dataOrCss parameter specify whether to check the property on data or css.\n  // The default value for it is data. If propertyName parameter is given as a function instead of a string representing the\n  // property name then use what that function returns.\n  elementUtilities.getCommonProperty = function (elements, propertyName, dataOrCss) {\n    if (elements.length == 0) {\n      return null;\n    }\n    var isFunction;\n    // If we are not comparing the properties directly users can specify a function as well\n    if (typeof propertyName === \"function\") {\n      isFunction = true;\n    }\n\n    // Use data as default\n    if (!isFunction && !dataOrCss) {\n      dataOrCss = \"data\";\n    }\n    var getVal = function getVal(index) {\n      //console.log(\"elements[index][dataOrCss](propertyName)\",elements[index] )\n      var val = isFunction ? propertyName(elements[index]) : elements[index][dataOrCss](propertyName);\n      return val;\n    };\n    var value = getVal(0);\n    for (var i = 1; i < elements.length; i++) {\n      if (getVal(i) != value) {\n        return null;\n      }\n    }\n    return value;\n  };\n\n  // Returns if the function returns a truthy value for all of the given elements.\n  elementUtilities.trueForAllElements = function (elements, fcn) {\n    for (var i = 0; i < elements.length; i++) {\n      if (!fcn(elements[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Returns whether the give element can have sbgncardinality\n  elementUtilities.canHaveSBGNCardinality = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"consumption\" || sbgnclass == \"production\";\n  };\n\n  // Returns whether the give element can have sbgnlabel\n  elementUtilities.canHaveSBGNLabel = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass != \"and\" && sbgnclass != \"or\" && sbgnclass != \"not\" && sbgnclass != \"delay\" && sbgnclass != \"unknown logical operator\" && sbgnclass != \"association\" && sbgnclass != \"dissociation\" && sbgnclass != \"empty set\" && !sbgnclass.endsWith(\"process\");\n  };\n\n  // Returns whether the give element have unit of information\n  elementUtilities.canHaveUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"simple chemical\" || sbgnclass == \"macromolecule\" || sbgnclass == \"nucleic acid feature\" || sbgnclass == \"complex\" || sbgnclass == \"simple chemical multimer\" || sbgnclass == \"macromolecule multimer\" || sbgnclass == \"nucleic acid feature multimer\" || sbgnclass == \"complex multimer\" || sbgnclass.startsWith(\"BA\") && sbgnclass != \"BA plain\" || sbgnclass == \"compartment\" || sbgnclass == \"SIF macromolecule\" || sbgnclass == \"SIF simple chemical\" || sbgnclass == \"protein\" || sbgnclass == \"protein multimer\" || sbgnclass == \"active protein\" || sbgnclass == \"hypothetical protein\" || sbgnclass == \"active protein multimer\" || sbgnclass == \"hypothetical protein multimer\" || sbgnclass == \"active hypothetical protein\" || sbgnclass == \"active hypothetical protein multimer\" || sbgnclass == \"receptor\" || sbgnclass == \"receptor multimer\" || sbgnclass == \"active receptor\" || sbgnclass == \"hypothetical receptor\" || sbgnclass == \"active receptor multimer\" || sbgnclass == \"hypothetical receptor multimer\" || sbgnclass == \"active hypothetical receptor\" || sbgnclass == \"active hypothetical receptor multimer\" || sbgnclass == \"ion channel\" || sbgnclass == \"ion channel multimer\" || sbgnclass == \"active ion channel\" || sbgnclass == \"hypothetical ion channel\" || sbgnclass == \"active ion channel multimer\" || sbgnclass == \"hypothetical ion channel multimer\" || sbgnclass == \"active hypothetical ion channel\" || sbgnclass == \"active hypothetical ion channel multimer\" || sbgnclass == \"truncated protein\" || sbgnclass == \"truncated protein multimer\" || sbgnclass == \"active truncated protein\" || sbgnclass == \"hypothetical truncated protein\" || sbgnclass == \"active truncated protein multimer\" || sbgnclass == \"hypothetical truncated protein multimer\" || sbgnclass == \"active hypothetical truncated protein\" || sbgnclass == \"active hypothetical truncated protein multimer\" || sbgnclass == \"complex sbml\" || sbgnclass == \"complex sbml multimer\" || sbgnclass == \"active complex sbml\" || sbgnclass == \"hypothetical complex sbml\" || sbgnclass == \"active complex sbml multimer\" || sbgnclass == \"hypothetical complex sbml multimer\" || sbgnclass == \"active hypothetical complex sbml\" || sbgnclass == \"active hypothetical complex sbml multimer\" || sbgnclass == \"gene\" || sbgnclass == \"gene multimer\" || sbgnclass == \"hypothetical gene\" || sbgnclass == \"hypothetical gene multimer\" || sbgnclass == \"rna\" || sbgnclass == \"rna multimer\" || sbgnclass == \"hypothetical rna\" || sbgnclass == \"hypothetical rna multimer\" || sbgnclass == \"phenotype sbml\" || sbgnclass == \"phenotype sbml multimer\" || sbgnclass == \"hypothetical phenotype sbml\" || sbgnclass == \"hypothetical phenotype sbml multimer\" || sbgnclass == \"ion\" || sbgnclass == \"ion multimer\" || sbgnclass == \"hypothetical ion\" || sbgnclass == \"hypothetical ion multimer\" || sbgnclass == \"simple molecule\" || sbgnclass == \"simple molecule multimer\" || sbgnclass == \"hypothetical simple molecule\" || sbgnclass == \"hypothetical simple molecule multimer\" || sbgnclass == \"unknown molecule\" || sbgnclass == \"unknown molecule multimer\" || sbgnclass == \"hypothetical unknown molecule\" || sbgnclass == \"hypothetical unknown molecule multimer\" || sbgnclass == \"drug\" || sbgnclass == \"drug multimer\" || sbgnclass == \"hypothetical drug\" || sbgnclass == \"hypothetical drug multimer\" || sbgnclass == \"degradation\" || sbgnclass == \"degradation multimer\" || sbgnclass == \"hypothetical degradation\" || sbgnclass == \"hypothetical degradation multimer\") {\n      return true;\n    }\n    return false;\n  };\n\n  // Returns whether the given element can have more than one units of information\n  elementUtilities.canHaveMultipleUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"gene\" || sbgnclass == \"rna\" || sbgnclass == \"simple molecule\" || sbgnclass == \"unknown molecule\" || sbgnclass == \"phenotype sbml\" || sbgnclass == \"drug\" || sbgnclass == \"protein\" || sbgnclass == \"truncated protein\" || sbgnclass == \"ion channel\" || sbgnclass == \"receptor\" || sbgnclass == \"ion\" || sbgnclass == \"empty set\" || sbgnclass == \"complex sbml\") {\n      return false;\n    }\n    return !sbgnclass.startsWith(\"BA\");\n  };\n\n  // Returns whether the given element can have more than one units of information\n  elementUtilities.canHaveOneUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"gene\" || sbgnclass == \"rna\" || sbgnclass == \"simple molecule\" || sbgnclass == \"unknown molecule\" || sbgnclass == \"phenotype sbml\" || sbgnclass == \"drug\" || sbgnclass == \"protein\" || sbgnclass == \"truncated protein\" || sbgnclass == \"ion channel\" || sbgnclass == \"receptor\" || sbgnclass == \"ion\" || sbgnclass == \"degradation\" || sbgnclass == \"complex sbml\") {\n      return true;\n    }\n    return false;\n  };\n\n  // Returns whether the give element have state variable\n  elementUtilities.canHaveStateVariable = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"macromolecule\" || sbgnclass == \"nucleic acid feature\" || sbgnclass == \"complex\" || sbgnclass == \"macromolecule multimer\" || sbgnclass == \"nucleic acid feature multimer\" || sbgnclass == \"complex multimer\") {\n      return true;\n    }\n    return false;\n  };\n  elementUtilities.canHaveResidueVariable = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"protein\" || sbgnclass == \"protein multimer\" || sbgnclass == \"active protein\" || sbgnclass == \"hypothetical protein\" || sbgnclass == \"active protein multimer\" || sbgnclass == \"hypothetical protein multimer\" || sbgnclass == \"active hypothetical protein\" || sbgnclass == \"active hypothetical protein multimer\" || sbgnclass == \"receptor\" || sbgnclass == \"receptor multimer\" || sbgnclass == \"active receptor\" || sbgnclass == \"hypothetical receptor\" || sbgnclass == \"active receptor multimer\" || sbgnclass == \"hypothetical receptor multimer\" || sbgnclass == \"active hypothetical receptor\" || sbgnclass == \"active hypothetical receptor multimer\" || sbgnclass == \"ion channel\" || sbgnclass == \"ion channel multimer\" || sbgnclass == \"active ion channel\" || sbgnclass == \"hypothetical ion channel\" || sbgnclass == \"active ion channel multimer\" || sbgnclass == \"hypothetical ion channel multimer\" || sbgnclass == \"active hypothetical ion channel\" || sbgnclass == \"active hypothetical ion channel multimer\" || sbgnclass == \"truncated protein\" || sbgnclass == \"truncated protein multimer\" || sbgnclass == \"active truncated protein\" || sbgnclass == \"hypothetical truncated protein\" || sbgnclass == \"active truncated protein multimer\" || sbgnclass == \"hypothetical truncated protein multimer\" || sbgnclass == \"active hypothetical truncated protein\" || sbgnclass == \"active hypothetical truncated protein multimer\") {\n      return true;\n    }\n    return false;\n  };\n  elementUtilities.canHaveBindingRegion = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"protein\" || sbgnclass == \"protein multimer\" || sbgnclass == \"active protein\" || sbgnclass == \"hypothetical protein\" || sbgnclass == \"active protein multimer\" || sbgnclass == \"hypothetical protein multimer\" || sbgnclass == \"active hypothetical protein\" || sbgnclass == \"active hypothetical protein multimer\" || sbgnclass == \"receptor\" || sbgnclass == \"receptor multimer\" || sbgnclass == \"active receptor\" || sbgnclass == \"hypothetical receptor\" || sbgnclass == \"active receptor multimer\" || sbgnclass == \"hypothetical receptor multimer\" || sbgnclass == \"active hypothetical receptor\" || sbgnclass == \"active hypothetical receptor multimer\" || sbgnclass == \"ion channel\" || sbgnclass == \"ion channel multimer\" || sbgnclass == \"active ion channel\" || sbgnclass == \"hypothetical ion channel\" || sbgnclass == \"active ion channel multimer\" || sbgnclass == \"hypothetical ion channel multimer\" || sbgnclass == \"active hypothetical ion channel\" || sbgnclass == \"active hypothetical ion channel multimer\" || sbgnclass == \"truncated protein\" || sbgnclass == \"truncated protein multimer\" || sbgnclass == \"active truncated protein\" || sbgnclass == \"hypothetical truncated protein\" || sbgnclass == \"active truncated protein multimer\" || sbgnclass == \"hypothetical truncated protein multimer\" || sbgnclass == \"active hypothetical truncated protein\" || sbgnclass == \"active hypothetical truncated protein multimer\") {\n      return true;\n    }\n    return false;\n  };\n\n  // Returns whether the given ele should be square in shape\n  elementUtilities.mustBeSquare = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass.indexOf(\"process\") != -1 || sbgnclass == \"empty set\" || sbgnclass == \"and\" || sbgnclass == \"or\" || sbgnclass == \"not\" || sbgnclass == \"unknown logical operator\" || sbgnclass == \"association\" || sbgnclass == \"dissociation\" || sbgnclass == \"delay\";\n  };\n\n  // Returns whether any of the given nodes must not be in square shape\n  elementUtilities.someMustNotBeSquare = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      if (!elementUtilities.mustBeSquare(node.data(\"class\"))) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Returns whether the gives element can be cloned\n  elementUtilities.canBeCloned = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      \"unspecified entity\": true,\n      macromolecule: true,\n      complex: true,\n      \"nucleic acid feature\": true,\n      \"simple chemical\": true,\n      \"perturbing agent\": true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n\n  // Returns whether the gives element can be cloned\n  elementUtilities.canBeMultimer = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({\n      macromolecule: true,\n      complex: true,\n      \"nucleic acid feature\": true,\n      \"simple chemical\": true,\n      receptor: true,\n      \"ion channel\": true,\n      \"truncated protein\": true,\n      gene: true,\n      rna: true,\n      ion: true,\n      \"simple molecule\": true,\n      \"unknown molecule\": true,\n      drug: true\n    }, \"complex\", true), \"phenotype sbml\", true), \"receptor\", true), \"complex sbml\", true), \"protein\", true);\n    return list[sbgnclass] ? true : false;\n  };\n  elementUtilities.canBeActive = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      protein: true,\n      \"complex sbml\": true,\n      receptor: true,\n      \"ion channel\": true,\n      \"truncated protein\": true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n  elementUtilities.canBeHypothetical = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      protein: true,\n      \"complex sbml\": true,\n      receptor: true,\n      \"ion channel\": true,\n      \"truncated protein\": true,\n      gene: true,\n      rna: true,\n      \"phenotype sbml\": true,\n      ion: true,\n      \"simple molecule\": true,\n      \"unknown molecule\": true,\n      drug: true,\n      degradation: true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n  elementUtilities.isBiologicalActivity = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.biologicalActivityTypes);\n  };\n  elementUtilities.isSIFNode = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.sifTypes);\n  };\n  elementUtilities.isSIFEdge = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.sifEdgeTypes);\n  };\n  elementUtilities.isUndirectedEdge = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.undirectedEdgeTypes);\n  };\n  elementUtilities.isDirectedEdge = function (ele) {\n    return !elementUtilities.isUndirectedEdge(ele);\n  };\n\n  // Returns whether the given element is an EPN\n  elementUtilities.isEPNClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.epnTypes);\n  };\n\n  // Returns whether the given element is a PN\n  elementUtilities.isPNClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.processTypes);\n  };\n\n  // Returns wether the given element or string is of the special empty set/empty set class\n  elementUtilities.isEmptySetClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"empty set\";\n  };\n\n  // Returns whether the given element is a logical operator\n  elementUtilities.isLogicalOperator = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.logicalOperatorTypes);\n  };\n\n  // Returns whether the class of given element is a equivalance class\n  elementUtilities.convenientToEquivalence = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"tag\" || sbgnclass == \"terminal\";\n  };\n  elementUtilities.isLogicArc = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'logic arc';\n  };\n  elementUtilities.isProcessNode = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"process\" || sbgnclass == \"omitted process\" || sbgnclass == \"uncertain process\" || sbgnclass == \"truncated process\" || sbgnclass == \"association\" || sbgnclass == \"dissociation\";\n  };\n\n  // Returns whether the class of given element is a modulation arc as defined in PD specs\n  elementUtilities.isModulationArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"modulation\" || sbgnclass == \"stimulation\" || sbgnclass == \"catalysis\" || sbgnclass == \"inhibition\" || sbgnclass == \"necessary stimulation\" || sbgnclass == \"unknown catalysis\" || sbgnclass == \"unknown inhibition\" || sbgnclass == \"trigger\";\n  };\n\n  // Returns whether the class of given element is an arc of AF specs except logical arc\n  elementUtilities.isAFArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"positive influence\" || sbgnclass == \"negative influence\" || sbgnclass == \"unknown influence\" || sbgnclass == \"necessary stimulation\";\n  };\n  elementUtilities.isSBMLArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"positive influence sbml\" || sbgnclass == \"unknown positive influence\" || sbgnclass == \"unknown negative influence\" || sbgnclass == \"reduced stimulation\" || sbgnclass == \"unknown reduced stimulation\" || sbgnclass == \"reduced modulation\" || sbgnclass == \"unknown reduced modulation\" || sbgnclass == \"reduced trigger\" || sbgnclass == \"unknown reduced trigger\";\n  };\n\n  // Returns whether the given element or elements with the given class can have ports.\n  elementUtilities.canHavePorts = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass != \"phenotype\" && sbgnclass != \"delay\" && (elementUtilities.isLogicalOperator(sbgnclass) || elementUtilities.isPNClass(sbgnclass));\n  };\n\n  // Section Start\n  // General Element Utilities\n\n  //this method returns the nodes non of whose ancestors is not in given nodes\n  elementUtilities.getTopMostNodes = function (nodes) {\n    var nodesMap = {};\n    for (var i = 0; i < nodes.length; i++) {\n      nodesMap[nodes[i].id()] = true;\n    }\n    var roots = nodes.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      var parent = ele.parent()[0];\n      while (parent != null) {\n        if (nodesMap[parent.id()]) {\n          return false;\n        }\n        parent = parent.parent()[0];\n      }\n      return true;\n    });\n    return roots;\n  };\n\n  //This method checks if all of the given nodes have the same parent assuming that the size\n  //of  nodes is not 0\n  elementUtilities.allHaveTheSameParent = function (nodes) {\n    if (nodes.length == 0) {\n      return true;\n    }\n    var parent = nodes[0].data(\"parent\");\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      if (node.data(\"parent\") != parent) {\n        return false;\n      }\n    }\n    return true;\n  };\n  elementUtilities.moveNodes = function (positionDiff, nodes, notCalcTopMostNodes) {\n    var topMostNodes = notCalcTopMostNodes ? nodes : this.getTopMostNodes(nodes);\n    for (var i = 0; i < topMostNodes.length; i++) {\n      var node = topMostNodes[i];\n      var oldX = node.position(\"x\");\n      var oldY = node.position(\"y\");\n      node.position({\n        x: oldX + positionDiff.x,\n        y: oldY + positionDiff.y\n      });\n      var children = node.children();\n      this.moveNodes(positionDiff, children, true);\n    }\n  };\n  elementUtilities.convertToModelPosition = function (renderedPosition) {\n    var pan = cy.pan();\n    var zoom = cy.zoom();\n    var x = (renderedPosition.x - pan.x) / zoom;\n    var y = (renderedPosition.y - pan.y) / zoom;\n    return {\n      x: x,\n      y: y\n    };\n  };\n  elementUtilities.convertToRenderedPosition = function (modelPos, pan, zoom) {\n    pan = pan || cy.pan();\n    zoom = zoom || cy.zoom();\n    var res = {};\n    [\"x\", \"y\"].forEach(function (dim) {\n      res[dim] = modelPos[dim] * zoom + pan[dim];\n    });\n    return res;\n  };\n\n  // Section End\n  // General Element Utilities\n\n  // Section Start\n  // Element Filtering Utilities\n\n  // SBGN specific utilities\n\n  elementUtilities.getProcessesOfSelected = function () {\n    var selectedEles = cy.elements(\":selected\");\n    selectedEles = this.extendNodeList(selectedEles);\n    return selectedEles;\n  };\n  elementUtilities.getNeighboursOfSelected = function () {\n    var selectedEles = cy.elements(\":selected\");\n    var elesToHighlight = this.getNeighboursOfNodes(selectedEles);\n    return elesToHighlight;\n  };\n  elementUtilities.getNeighboursOfNodes = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n    nodes = nodes.add(nodes.parents(\"node[class^='complex']\"));\n    nodes = nodes.add(nodes.descendants());\n    var neighborhoodEles = nodes.neighborhood();\n    var elesToReturn = nodes.add(neighborhoodEles);\n    elesToReturn = elesToReturn.add(elesToReturn.descendants());\n    return elesToReturn;\n  };\n  elementUtilities.extendNodeList = function (nodesToShow) {\n    var self = this;\n    //add children\n    nodesToShow = nodesToShow.add(nodesToShow.nodes().descendants());\n    //add parents\n    nodesToShow = nodesToShow.add(nodesToShow.parents());\n    //add complex children\n    nodesToShow = nodesToShow.add(nodesToShow.nodes(\"node[class^='complex']\").descendants());\n\n    // var processes = nodesToShow.nodes(\"node[class='process']\");\n    // var nonProcesses = nodesToShow.nodes(\"node[class!='process']\");\n    // var neighborProcesses = nonProcesses.neighborhood(\"node[class='process']\");\n\n    extendNodeTypes = [\"process\", \"omitted process\", \"uncertain process\", \"truncated process\", \"association\", \"dissociation\", \"phenotype\", \"and\", \"or\", \"not\", \"delay\", \"unknown logical operator\"];\n\n    //Here, logical operators are also considered as processes, since they also get inputs and outputs\n    var processes = nodesToShow.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    var nonProcesses = nodesToShow.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return !inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    var neighborProcesses = nonProcesses.neighborhood().union(processes.neighborhood()).filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    //For AF support, subject to change\n    var neighborNonProcesses = nonProcesses.union(nonProcesses.neighborhood(\":hidden\")).filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return !inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    nodesToShow = nodesToShow.add(processes.neighborhood());\n    nodesToShow = nodesToShow.add(neighborProcesses);\n    nodesToShow = nodesToShow.add(neighborProcesses.neighborhood());\n    nodesToShow = nodesToShow.add(neighborNonProcesses);\n    neighborProcesses.neighborhood().forEach(function (ele) {\n      if (inArray(ele._private.data[\"class\"], extendNodeTypes)) {\n        nodesToShow = nodesToShow.add(ele.neighborhood());\n      }\n    });\n\n    //add parents\n    nodesToShow = nodesToShow.add(nodesToShow.nodes().parents());\n    //add children\n    nodesToShow = nodesToShow.add(nodesToShow.nodes(\"node[class^='complex']\").descendants());\n    return nodesToShow;\n  };\n  elementUtilities.extendRemainingNodes = function (nodesToFilter, allNodes) {\n    nodesToFilter = this.extendNodeList(nodesToFilter);\n    var nodesToShow = allNodes.not(nodesToFilter);\n    nodesToShow = this.extendNodeList(nodesToShow);\n    return nodesToShow;\n  };\n  elementUtilities.getProcessesOfNodes = function (nodes) {\n    return this.extendNodeList(nodes);\n  };\n\n  // general utilities\n\n  elementUtilities.noneIsNotHighlighted = function () {\n    var viewUtilities = cy.viewUtilities(\"get\");\n    var highlightClasses = viewUtilities.getAllHighlightClasses();\n    for (var i = 0; i < highlightClasses.length; i++) {\n      if (cy.$(\".\" + highlightClasses[i]).is(\":visible\")) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Section End\n  // Element Filtering Utilities\n\n  // Section Start\n  // Add remove utilities\n\n  // SBGN specific utilities\n\n  elementUtilities.deleteNodesSmart = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes();\n    cy.elements().unselect();\n    var nodesToKeep = this.extendRemainingNodes(nodes, allNodes);\n    var nodesNotToKeep = allNodes.not(nodesToKeep);\n    return nodesNotToKeep.remove();\n  };\n  elementUtilities.deleteElesSimple = function (eles) {\n    cy.elements().unselect();\n    return eles.remove();\n  };\n\n  // general utilities\n\n  elementUtilities.restoreEles = function (eles) {\n    eles.restore();\n    return eles;\n  };\n\n  // Section End\n  // Add remove utilities\n\n  // Section Start\n  // Stylesheet helpers\n\n  // SBGN specific utilities\n\n  elementUtilities.getArrayLineStyle = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    switch (sbgnclass) {\n      case \"controls-expression-of\":\n      case \"upregulates-expression\":\n      case \"downregulates-expression\":\n      case \"unknown inhibition\":\n      case \"unknown catalysis\":\n      case \"transcription consumption\":\n      case \"transcription production\":\n      case \"translation consumption\":\n      case \"translation production\":\n      case \"unknown negative influence\":\n      case \"unknown positive influence\":\n      case \"unknown reduced stimulation\":\n      case \"unknown reduced modulation\":\n      case \"unknown reduced trigger\":\n        return \"dashed\";\n      default:\n        return \"solid\";\n    }\n  };\n  elementUtilities.getArrayLineDashStyle = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    switch (sbgnclass) {\n      case \"transcription consumption\":\n      case \"transcription production\":\n        return [20, 10, 2, 5, 2, 10];\n      case \"translation consumption\":\n      case \"translation production\":\n        return [15, 7, 2, 7];\n      default:\n        return [6, 3];\n    }\n  };\n  elementUtilities.getCyShape = function (ele) {\n    var _class = ele.data(\"class\");\n    // Get rid of rectangle postfix to have the actual node class\n    if (_class.endsWith(\" multimer\")) {\n      _class = _class.replace(\" multimer\", \"\");\n    }\n    if (_class.startsWith(\"active \")) {\n      _class = _class.replace(\"active \", \"\");\n    }\n    if (_class.includes(\"hypothetical\")) {\n      _class = _class.replace(\"hypothetical \", \"\");\n    }\n    if (_class == \"compartment\") {\n      return \"compartment\";\n    }\n    if (_class == \"phenotype\") {\n      return \"hexagon\";\n    }\n    if (_class == \"perturbing agent\" || _class == \"tag\") {\n      return \"polygon\";\n    }\n    if (_class == \"SIF macromolecule\") {\n      return \"macromolecule\";\n    }\n    if (_class == \"SIF simple chemical\") {\n      return \"simple chemical\";\n    }\n    if (_class.startsWith(\"BA\")) {\n      return \"biological activity\";\n    }\n    if (_class == \"submap\" || _class == \"topology group\") {\n      return \"rectangle\";\n    }\n\n    // We need to define new node shapes with their class names for these nodes\n    if (_class == \"empty set\" || _class == \"nucleic acid feature\" || _class == \"macromolecule\" || _class == \"simple chemical\" || _class == \"complex\" || _class == \"biological activity\" || _class == \"cule\" || _class == \"gene\" || _class == \"unknown molecule\" || _class == \"drug\" || _class == \"ion\" || _class == \"truncated protein\" || _class == \"ion channel\" || _class == \"rna\" || _class == \"simple molecule\" || _class == \"phenotype sbml\" || _class == \"receptor\" || _class == \"complex sbml\" || _class == \"protein\" || _class == \"degradation\") {\n      return _class;\n    }\n\n    // These shapes can have ports. If they have ports we represent them by polygons, else they are represented by ellipses or rectangles\n    // conditionally.\n    if (this.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled === true && ele.data(\"ports\").length === 2) {\n        return \"polygon\"; // The node has ports represent it by polygon\n      } else if (_class == \"process\" || _class == \"omitted process\" || _class == \"uncertain process\" || _class == \"truncated process\") {\n        return \"rectangle\"; // If node has no port and has one of these classes it should be in a rectangle shape\n      }\n      return \"ellipse\"; // Other nodes with no port should be in an ellipse shape\n    }\n\n    // The remaining nodes are supposed to be in ellipse shape\n    return \"ellipse\";\n  };\n  elementUtilities.getCyTargetArrowFill = function (ele) {\n    var _class = ele.data(\"class\");\n    if (_class == \"inhibition\" || _class == \"negative influence\" || _class == \"production\" || _class == \"transport\" || _class == \"transcription production\" || _class == \"translation production\" || _class == \"unknown inhibition\" || _class == \"unknown negative influence\" || _class == \"unknown positive influence\" || _class == \"positive influence sbml\" || elementUtilities.isSIFEdge(_class)) {\n      return \"filled\";\n    }\n    return \"hollow\";\n  };\n  elementUtilities.getCyArrowShape = function (ele) {\n    var _class = ele.data(\"class\");\n    switch (_class) {\n      case \"necessary stimulation\":\n      case \"trigger\":\n      case \"reduced trigger\":\n      case \"transport\":\n      case \"reduced trigger\":\n      case \"unknown reduced trigger\":\n        return \"triangle-cross\";\n      case \"inhibition\":\n      case \"negative influence\":\n      case \"inhibits\":\n      case \"downregulates-expression\":\n      case \"dephosphorylates\":\n      case \"inhibits-gtpase\":\n      case \"deacetylates\":\n      case \"demethylates\":\n      case \"unknown inhibition\":\n      case \"unknown negative influence\":\n        return \"tee\";\n      case \"catalysis\":\n      case \"unknown catalysis\":\n        return \"circle\";\n      case \"stimulation\":\n      case \"production\":\n      case \"positive influence\":\n      case \"activates\":\n      case \"phosphorylates\":\n      case \"upregulates-expression\":\n      case \"controls-state-change-of\":\n      case \"chemical-affects\":\n      case \"controls-transport-of\":\n      case \"controls-phosphorylation-of\":\n      case \"controls-expression-of\":\n      case \"catalysis-precedes\":\n      case \"consumption-controled-by\":\n      case \"controls-production-of\":\n      case \"controls-transport-of-chemical\":\n      case \"used-to-produce\":\n      case \"activates-gtpase\":\n      case \"acetylates\":\n      case \"methylates\":\n      case \"transcription production\":\n      case \"translation production\":\n      case \"reduced stimulation\":\n      case \"unknown reduced stimulation\":\n        return \"triangle\";\n      case \"positive influence sbml\":\n      case \"unknown positive influence\":\n        return \"vee\";\n      case \"modulation\":\n      case \"unknown influence\":\n      case \"reduced modulation\":\n      case \"unknown reduced modulation\":\n        return \"diamond\";\n      default:\n        return \"none\";\n    }\n  };\n  elementUtilities.getElementContent = function (ele) {\n    var _language = ele.data(\"language\");\n    var _class = ele.data(\"class\");\n    if (_class.endsWith(\" multimer\")) {\n      _class = _class.replace(\" multimer\", \"\");\n    }\n    if (_class.startsWith(\"active \")) {\n      _class = _class.replace(\"active \", \"\");\n    }\n    if (_class.includes(\"hypothetical\")) {\n      _class = _class.replace(\"hypothetical \", \"\");\n    }\n    var content = \"\";\n    if (_class == \"macromolecule\" || _class == \"simple chemical\" || _class == \"phenotype\" || _class == \"unspecified entity\" || _class == \"nucleic acid feature\" || _class == \"perturbing agent\" || _class == \"tag\" || _class == \"biological activity\" || _class.startsWith(\"BA\") || _class == \"submap\" || _class == \"SIF macromolecule\" || _class == \"SIF simple chemical\" || _class == \"protein\" || _class == \"receptor\" || _class == \"truncated protein\" || _class == \"ion channel\" || _class == \"complex sbml\" || _class == \"gene\" || _class == \"rna\" || _class == \"simple molecule\" || _class == \"unknown molecule\" || _class == \"phenotype sbml\" || _class == \"drug\" || _class == \"ion\") {\n      content = ele.data(\"label\") ? ele.data(\"label\") : \"\";\n    } else if (_class == \"compartment\") {\n      content = ele.data(\"label\") ? ele.data(\"label\") : \"\";\n    } else if (_class == \"complex\") {\n      if (ele.children().length == 0 || options.showComplexName) {\n        if (ele.data(\"label\")) {\n          content = ele.data(\"label\");\n        } else if (ele.data(\"infoLabel\")) {\n          content = ele.data(\"infoLabel\");\n        } else {\n          content = \"\";\n        }\n      } else {\n        content = \"\";\n      }\n    } else if (_class == \"and\") {\n      content = \"AND\";\n    } else if (_class == \"or\") {\n      content = \"OR\";\n    } else if (_class == \"not\") {\n      content = \"NOT\";\n    } else if (_class == \"unknown logical operator\") {\n      content = \"?\";\n    } else if (_class == \"omitted process\") {\n      if (_language == \"PD\") content = \"\\\\\\\\\";else content = \"//\";\n    } else if (_class == \"uncertain process\") {\n      content = \"?\";\n    } else if (_class == \"truncated process\") {\n      content = \"N\";\n    } else if (_class == \"dissociation\") {\n      content = \"o\";\n    } else if (_class == \"delay\") {\n      content = \"\\u03C4\"; // tau\n    }\n    var textWidth = ele.outerWidth() || ele.data(\"bbox\").w;\n    var textProp = {\n      label: content,\n      width: _class == \"perturbing agent\" ? textWidth / 2 : textWidth\n    };\n    return textProp.label;\n  };\n  elementUtilities.getLabelTextSize = function (ele) {\n    var _class = ele.data(\"class\");\n    // These types of nodes cannot have label but this is statement is needed as a workaround\n    if (_class === \"association\") {\n      return 20;\n    }\n    if (this.canHavePorts(_class)) {\n      var coeff = 1; // The dynamic label size coefficient for these pseudo labels, it is 1 for logical operators\n\n      // Coeff is supposed to be 2 for dissociation and 1.5 for other processes\n      if (_class === \"dissociation\") {\n        coeff = 2;\n      } else if (_class.endsWith(\"process\")) {\n        coeff = 1.5;\n      }\n      var ports = ele.data(\"ports\");\n      if (graphUtilities.portsEnabled === true && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? \"vertical\" : \"horizontal\";\n        // This is the ratio of the area occupied with ports over without ports\n        var ratio = orientation === \"vertical\" ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        coeff /= ratio; // Divide the coeff by ratio to fit into the bbox of the actual shape (discluding ports)\n      }\n      return this.getDynamicLabelTextSize(ele, coeff);\n    }\n    if (_class === \"delay\") {\n      return this.getDynamicLabelTextSize(ele, 2);\n    }\n    return this.getDynamicLabelTextSize(ele);\n  };\n  elementUtilities.getStateVarShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveStateVariable(ele)) {\n      return null;\n    }\n    return [\"stadium\"];\n  };\n  elementUtilities.getResidueShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveResidueVariable(ele)) {\n      return null;\n    }\n    return [\"stadium\"];\n  };\n  elementUtilities.getBindingRegionShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveBindingRegion(ele)) {\n      return null;\n    }\n    return [\"rectangle\"];\n  };\n  elementUtilities.getUnitOfInfoShapeOptions = function (ele) {\n    var type = elementUtilities.getPureSbgnClass(ele);\n    if (!elementUtilities.canHaveUnitOfInformation(type)) {\n      return null;\n    }\n    var opts = null;\n    if (elementUtilities.isSIFNode(type)) {\n      opts = [\"rectangle\", \"stadium\"];\n    } else if (elementUtilities.isBiologicalActivity(type)) {\n      switch (type) {\n        case \"BA macromolecule\":\n          opts = [\"roundrectangle\"];\n          break;\n        case \"BA nucleic acid feature\":\n          opts = [\"bottomroundrectangle\"];\n          break;\n        case \"BA unspecified entity\":\n          opts = [\"ellipse\"];\n          break;\n        case \"BA complex\":\n          opts = [\"complex\"];\n          break;\n        case \"BA perturbing agent\":\n          opts = [\"perturbing agent\"];\n          break;\n        case \"BA simple chemical\":\n          opts = [\"stadium\"];\n          break;\n        default:\n          break;\n      }\n    } else {\n      opts = [\"rectangle\"];\n    }\n    return opts;\n  };\n  elementUtilities.getCardinalityDistance = function (ele) {\n    var srcPos = ele.source().position();\n    var tgtPos = ele.target().position();\n    var distance = Math.sqrt(Math.pow(srcPos.x - tgtPos.x, 2) + Math.pow(srcPos.y - tgtPos.y, 2));\n    return distance * 0.25;\n  };\n  elementUtilities.getInfoLabel = function (node) {\n    /* Info label of a collapsed node cannot be changed if\n     * the node is collapsed return the already existing info label of it\n     */\n    if (node._private.data.collapsedChildren != null) {\n      return node._private.data.infoLabel;\n    }\n\n    /*\n     * If the node is simple then it's infolabel is equal to it's label\n     */\n    if (node.children() == null || node.children().length == 0) {\n      return node._private.data.label;\n    }\n    var children = node.children();\n    var infoLabel = \"\";\n    /*\n     * Get the info label of the given node by it's children info recursively\n     */\n    for (var i = 0; i < children.length; i++) {\n      var child = children[i];\n      var childInfo = this.getInfoLabel(child);\n      if (childInfo == null || childInfo == \"\") {\n        continue;\n      }\n      if (infoLabel != \"\") {\n        infoLabel += \":\";\n      }\n      infoLabel += childInfo;\n    }\n\n    //return info label\n    return infoLabel;\n  };\n  elementUtilities.getQtipContent = function (node) {\n    /* Check the label of the node if it is not valid\n     * then check the infolabel if it is also not valid do not show qtip\n     */\n    var label = node.data(\"label\");\n    if (label == null || label == \"\") {\n      label = this.getInfoLabel(node);\n    }\n    if (label == null || label == \"\") {\n      return;\n    }\n    var contentHtml = \"<b style='text-align:center;font-size:16px;'>\" + label + \"</b>\";\n    var statesandinfos = node._private.data.statesandinfos;\n    for (var i = 0; i < statesandinfos.length; i++) {\n      var sbgnstateandinfo = statesandinfos[i];\n      if (sbgnstateandinfo.clazz == \"state variable\") {\n        var value = sbgnstateandinfo.state.value;\n        var variable = sbgnstateandinfo.state.variable;\n        var stateLabel = variable == null /*|| typeof stateVariable === undefined */ ? value : value + \"@\" + variable;\n        if (stateLabel == null) {\n          stateLabel = \"\";\n        }\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + stateLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"unit of information\") {\n        var stateLabel = sbgnstateandinfo.label.text;\n        if (stateLabel == null) {\n          stateLabel = \"\";\n        }\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + stateLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"residue variable\") {\n        var variable = sbgnstateandinfo.residue.variable;\n        var residueLabel = variable;\n        if (residueLabel == null) {\n          residueLabel = \"\";\n        }\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + residueLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"binding region\") {\n        var variable = sbgnstateandinfo.region.variable;\n        var regionLabel = variable;\n        if (regionLabel == null) {\n          regionLabel = \"\";\n        }\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + regionLabel + \"</div>\";\n      }\n    }\n    return contentHtml;\n  };\n\n  // general utilities\n\n  elementUtilities.getDynamicLabelSizeCoefficient = function (dynamicLabelSize) {\n    var map = {\n      small: 0.75,\n      regular: 1,\n      large: 1.25\n    };\n    return map[dynamicLabelSize];\n  };\n  elementUtilities.getDynamicLabelTextSize = function (ele, dynamicLabelSizeCoefficient) {\n    var sbgnclass, h;\n\n    // ele can either be node itself or an object that has class and height fields\n    if (ele.isNode && ele.isNode()) {\n      sbgnclass = ele.data(\"class\");\n      h = ele.height();\n    } else {\n      sbgnclass = ele[\"class\"];\n      h = ele[\"height\"];\n    }\n    var dynamicLabelSize = options.dynamicLabelSize;\n    dynamicLabelSize = typeof dynamicLabelSize === \"function\" ? dynamicLabelSize.call() : dynamicLabelSize;\n    if (dynamicLabelSizeCoefficient === undefined) {\n      if (dynamicLabelSize == \"small\") {\n        if (sbgnclass.startsWith(\"complex\")) return 10;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 12;\n      } else if (dynamicLabelSize == \"regular\") {\n        if (sbgnclass.startsWith(\"complex\")) return 11;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 14;\n      } else if (dynamicLabelSize == \"large\") {\n        if (sbgnclass.startsWith(\"complex\")) return 12;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 16;\n      }\n      dynamicLabelSizeCoefficient = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);\n    }\n    var textHeight = parseInt(h / 2.45) * dynamicLabelSizeCoefficient;\n    return textHeight;\n  };\n\n  /*\n   * Get source/target end point of edge in 'x-value% y-value%' format. It returns 'outside-to-node' if there is no source/target port.\n   */\n  elementUtilities.getEndPoint = function (edge, sourceOrTarget) {\n    var portId = sourceOrTarget === \"source\" ? edge.data(\"portsource\") : edge.data(\"porttarget\");\n    if (portId == null || !graphUtilities.portsEnabled) {\n      return \"outside-to-node\"; // If there is no portsource return the default value which is 'outside-to-node'\n    }\n    var endNode = sourceOrTarget === \"source\" ? edge.source() : edge.target();\n    var ports = endNode.data(\"ports\");\n    var port;\n    for (var i = 0; i < ports.length; i++) {\n      if (ports[i].id === portId) {\n        port = ports[i];\n      }\n    }\n    if (port === undefined) {\n      return \"outside-to-node\"; // If port is not found return the default value which is 'outside-to-node'\n    }\n    var x, y;\n    // Note that for drawing ports we represent the whole shape by a polygon and ports are always 50% away from the node center\n    if (port.x != 0) {\n      x = Math.sign(port.x) * 50;\n      y = 0;\n    } else {\n      x = 0;\n      y = Math.sign(port.y) * 50;\n    }\n    return \"\" + x + \"% \" + y + \"%\";\n  };\n\n  /*\n   * Return ordering of ports of a node.\n   * Possible return values are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'\n   */\n  elementUtilities.getPortsOrdering = function (node) {\n    // Return the cached portsordering if exists\n    if (node.data(\"portsordering\")) {\n      return node.data(\"portsordering\");\n    }\n    var ports = node.data(\"ports\");\n    if (ports.length !== 2) {\n      node.data(\"portsordering\", \"none\"); // Cache the ports ordering\n      return \"none\"; // Nodes are supposed to have 2 nodes or none\n    }\n\n    /*\n     * Retursn if the given portId is porttarget of any of the given edges.\n     * These edges are expected to be the edges connected to the node associated with that port.\n     */\n    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data(\"porttarget\") === portId) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'.\n    var orientation = ports[0].x === 0 ? \"vertical\" : \"horizontal\";\n    // We need the connected edges of the node to find out if a port is an input port or an output port\n    var connectedEdges = node.connectedEdges();\n    var portsordering;\n    if (orientation === \"horizontal\") {\n      var leftPortId = ports[0].x < 0 ? ports[0].id : ports[1].id; // Left port is the port whose x value is negative\n      // If left port is port target for any of connected edges then the ordering is 'L-to-R' else it is 'R-to-L'\n      if (isPortTargetOfAnyEdge(connectedEdges, leftPortId)) {\n        portsordering = \"L-to-R\";\n      } else {\n        portsordering = \"R-to-L\";\n      }\n    } else {\n      var topPortId = ports[0].y < 0 ? ports[0].id : ports[1].id; // Top port is the port whose y value is negative\n      // If top  port is port target for any of connected edges then the ordering is 'T-to-B' else it is 'B-to-T'\n      if (isPortTargetOfAnyEdge(connectedEdges, topPortId)) {\n        portsordering = \"T-to-B\";\n      } else {\n        portsordering = \"B-to-T\";\n      }\n    }\n\n    // Cache the portsordering and return it.\n    node.data(\"portsordering\", portsordering);\n    return portsordering;\n  };\n\n  /*\n   * Sets the ordering of the given nodes.\n   * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.\n   * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is\n   * used to set the distance between the node center and the ports. The default port distance is 60.\n   */\n  elementUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {\n    /*\n     * Returns if the given portId is porttarget of any of the given edges.\n     * These edges are expected to be the edges connected to the node associated with that port.\n     */\n    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data(\"porttarget\") === portId) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    /*\n     * Returns if the given portId is portsource of any of the given edges.\n     * These edges are expected to be the edges connected to the node associated with that port.\n     */\n    var isPortSourceOfAnyEdge = function isPortSourceOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data(\"portsource\") === portId) {\n          return true;\n        }\n      }\n      return false;\n    };\n    portDistance = portDistance ? portDistance : 70; // The default port distance is 60\n\n    cy.startBatch();\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var currentOrdering = this.getPortsOrdering(node); // The current ports ordering of the node\n\n      // If the current ordering is already equal to the desired ordering pass this node directly\n      if (ordering === currentOrdering) {\n        continue;\n      }\n      if (ordering === \"none\") {\n        // If the ordering is 'none' remove the ports of the node\n        elementUtilities.removePorts(node);\n      } else if (currentOrdering === \"none\") {\n        // If the desired ordering is not 'none' but the current one is 'none' add ports with the given parameters.\n        elementUtilities.addPorts(node, ordering, portDistance);\n      } else {\n        // Else change the ordering by altering node 'ports'\n        var ports = node.data(\"ports\"); // Ports of the node\n        // If currentOrdering is 'none' use the portDistance given by parameter else use the existing one\n        var dist = currentOrdering === \"none\" ? portDistance : Math.abs(ports[0].x) || Math.abs(ports[0].y);\n        var connectedEdges = node.connectedEdges(); // The edges connected to the node\n        var portsource, porttarget; // The ports which are portsource/porttarget of the connected edges\n\n        // Determine the portsource and porttarget\n        if (isPortTargetOfAnyEdge(connectedEdges, ports[0].id) || isPortSourceOfAnyEdge(connectedEdges, ports[1].id)) {\n          porttarget = ports[0];\n          portsource = ports[1];\n        } else {\n          porttarget = ports[1];\n          portsource = ports[0];\n        }\n        if (ordering === \"L-to-R\") {\n          // If ordering is 'L-to-R' the porttarget should be the left most port and the portsource should be the right most port\n          porttarget.x = -1 * dist;\n          portsource.x = dist;\n          porttarget.y = 0;\n          portsource.y = 0;\n        } else if (ordering === \"R-to-L\") {\n          // If ordering is 'R-to-L' the porttarget should be the right most port and the portsource should be the left most port\n          porttarget.x = dist;\n          portsource.x = -1 * dist;\n          porttarget.y = 0;\n          portsource.y = 0;\n        } else if (ordering === \"T-to-B\") {\n          // If ordering is 'T-to-B' the porttarget should be the top most port and the portsource should be the bottom most port\n          porttarget.x = 0;\n          portsource.x = 0;\n          porttarget.y = -1 * dist;\n          portsource.y = dist;\n        } else {\n          //if ordering is 'B-to-T'\n          // If ordering is 'B-to-T' the porttarget should be the bottom most port and the portsource should be the top most port\n          porttarget.x = 0;\n          portsource.x = 0;\n          porttarget.y = dist;\n          portsource.y = -1 * dist;\n        }\n      }\n      node.data(\"ports\", ports); // Reset the node ports\n    }\n    nodes.data(\"portsordering\", ordering); // Update the cached orderings of the nodes\n    cy.endBatch();\n  };\n\n  /*\n   * Add ports to the given node, with given ordering and port distance.\n   */\n  elementUtilities.addPorts = function (node, ordering, portDistance) {\n    var firstPortId = node.id() + \".1\"; // Id of first port\n    var secondPortId = node.id() + \".2\"; // Id of seconf port\n    // First port object x and y will be filled according to ordering, the first port is supposed to be the left most or the top most one\n    var firstPort = {\n      id: firstPortId\n    };\n    // Second port object x and y will be filled according to ordering, the second port is supposed to be the right most or the bottom most one\n    var secondPort = {\n      id: secondPortId\n    };\n\n    // Complete port objects according to ordering\n    if (ordering === \"L-to-R\" || ordering === \"R-to-L\") {\n      // If ordering is in horizontal axis first port is the left most one and the second port is the right most one\n      firstPort.x = -1 * portDistance;\n      secondPort.x = portDistance;\n      firstPort.y = 0;\n      secondPort.y = 0;\n    } else {\n      // If ordering is 'T-to-B' or 'B-to-T'\n      // If ordering is in vertical axis first port is the top most one and the second port is the bottom most one\n      firstPort.y = -1 * portDistance;\n      secondPort.y = portDistance;\n      firstPort.x = 0;\n      secondPort.x = 0;\n    }\n    var fromLorT = ordering === \"L-to-R\" || ordering === \"T-to-B\"; // Check if ordering starts from left or top\n    var ports = [firstPort, secondPort]; // Ports array for the node\n    var connectedEdges = node.connectedEdges(); // The edges connected to the node\n\n    cy.startBatch();\n    node.data(\"ports\", ports);\n\n    // Reset the portsource and porttarget for each edge connected to the node\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      var edgeClass = edge.data(\"class\");\n      /*\n       * If the node is the edge target we may need to set the porttarget of the edge to the input port of the node (First or second port accoring to the orientation)\n       * if it is the edge soruce we may need to set the portsource of the edge to the output port similarly.\n       * Note that if fron left or top (fromLorT) is true then the first port is the source port and second port is the target port,\n       * else it is vice versa.\n       *\n       */\n      if (edge.data(\"target\") === node.id()) {\n        if (edgeClass === \"production\" || this.isModulationArcClass(edgeClass)) {\n          continue; // production or modulation type of edges cannot be connected to any port of target node (A production can have a process as target node but it is supposed to be connected to that node from its body, not from a port)\n        }\n        if (fromLorT) {\n          edge.data(\"porttarget\", firstPortId);\n        } else {\n          edge.data(\"porttarget\", secondPortId);\n        }\n      } else {\n        if (edgeClass === \"consumption\") {\n          continue; // consumpiton edge cannot be connected to any port of source node\n        }\n        if (fromLorT) {\n          edge.data(\"portsource\", secondPortId);\n        } else {\n          edge.data(\"portsource\", firstPortId);\n        }\n      }\n    }\n    cy.endBatch();\n  };\n\n  /*\n   * Remove the ports of the given node\n   */\n  elementUtilities.removePorts = function (node) {\n    var connectedEdges = node.connectedEdges();\n    var nodeId = node.id();\n    cy.startBatch();\n\n    // Reset portsource or porttarget of the connected edges to the node id\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      if (edge.data(\"source\") === nodeId) {\n        edge.data(\"portsource\", nodeId);\n      } else {\n        edge.data(\"porttarget\", nodeId);\n      }\n    }\n    node.data(\"ports\", []); // Clear ports data\n\n    cy.endBatch();\n  };\n  elementUtilities.changePortsOrientationAfterLayout = function () {\n    //Check all processes and logical operators with ports\n    cy.nodes().forEach(function (ele) {\n      if (ele.data(\"class\") === \"process\" || ele.data(\"class\") === \"omitted process\" || ele.data(\"class\") === \"uncertain process\" || ele.data(\"class\") === \"truncated process\" || ele.data(\"class\") === \"association\" || ele.data(\"class\") === \"dissociation\" || ele.data(\"class\") === \"and\" || ele.data(\"class\") === \"or\" || ele.data(\"class\") === \"not\" || ele.data(\"class\") === \"unknown logical operator\") {\n        if (ele.data(\"ports\").length === 2) {\n          var bestOrientation = elementUtilities.changePortsOrientation(ele);\n          elementUtilities.setPortsOrdering(ele, bestOrientation);\n          // If improve-flow is checked we do the swaping of simple nodes with each other\n          var improveFlow = options.improveFlow;\n          improveFlow = typeof improveFlow === \"function\" ? improveFlow.call() : improveFlow;\n          if (improveFlow) {\n            elementUtilities.postChangePortsOrientation(ele, bestOrientation);\n          }\n        }\n      }\n    });\n    cy.style().update();\n  };\n\n  /*\n   Calculates the best orientation for an 'ele' with port (process or logical operator) and returns it.\n   */\n  elementUtilities.changePortsOrientation = function (ele) {\n    var processId = ele.id();\n    var orientation = {\n      \"L-to-R\": 0,\n      \"R-to-L\": 0,\n      \"T-to-B\": 0,\n      \"B-to-T\": 0\n    };\n    var targetingEdges = cy.edges(\"[target='\" + processId + \"']\"); // Holds edges who have the input port as a target\n    var sourcingEdges = cy.edges(\"[source='\" + processId + \"']\"); // Holds edges who have the output port as a source\n    // Checks if the ports belong to a process or logial operator, it does the calculations based on the edges connected to its ports\n    if (ele.data(\"class\") === \"process\" || ele.data(\"class\") === \"omitted process\" || ele.data(\"class\") === \"uncertain process\" || ele.data(\"class\") === \"truncated process\" || ele.data(\"class\") === \"association\" || ele.data(\"class\") === \"dissociation\") {\n      targetingEdges.forEach(function (edge) {\n        if (edge.data(\"class\") === \"consumption\") {\n          var source = cy.getElementById(edge.data(\"source\")); //Holds the element from the other side of edge\n          var simple = false; //Checks if it is a simple node - connected with only 1 edge\n          if (source.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, source, orientation, \"L-to-R\", \"R-to-L\", \"x\", simple);\n          elementUtilities.calculateOrientationScore(ele, source, orientation, \"T-to-B\", \"B-to-T\", \"y\", simple);\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        if (edge.data(\"class\") === \"production\") {\n          var target = cy.getElementById(edge.data(\"target\"));\n          var simple = false;\n          if (target.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, target, orientation, \"R-to-L\", \"L-to-R\", \"x\", simple);\n          elementUtilities.calculateOrientationScore(ele, target, orientation, \"B-to-T\", \"T-to-B\", \"y\", simple);\n        }\n      });\n    } else if (ele.data(\"class\") === \"and\" || ele.data(\"class\") === \"or\" || ele.data(\"class\") === \"not\" || ele.data(\"class\") === \"unknown logical operator\") {\n      targetingEdges.forEach(function (edge) {\n        if (edge.data(\"class\") === \"logic arc\") {\n          var source = cy.getElementById(edge.data(\"source\"));\n          var simple = false;\n          if (source.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, source, orientation, \"L-to-R\", \"R-to-L\", \"x\", simple);\n          elementUtilities.calculateOrientationScore(ele, source, orientation, \"T-to-B\", \"B-to-T\", \"y\", simple);\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        if (edge.data(\"class\") === \"modulation\" || edge.data(\"class\") === \"stimulation\" || edge.data(\"class\") === \"catalysis\" || edge.data(\"class\") === \"inhibition\" || edge.data(\"class\") === \"necessary stimulation\" || edge.data(\"class\") === \"logic arc\") {\n          var target = cy.getElementById(edge.data(\"target\"));\n          var simple = false;\n          if (target.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, target, orientation, \"R-to-L\", \"L-to-R\", \"x\", simple);\n          elementUtilities.calculateOrientationScore(ele, target, orientation, \"B-to-T\", \"T-to-B\", \"y\", simple);\n        }\n      });\n    }\n    //Calculates the best orientation from all orientation scores\n    var bestOrientation = \"L-to-R\";\n    var bestScore = orientation[\"L-to-R\"]; //The score of the best orientation is always positive\n    for (var property in orientation) {\n      if (orientation[property] > bestScore) {\n        bestScore = orientation[property];\n        bestOrientation = property;\n      }\n    }\n    return bestOrientation;\n  };\n\n  /*\n   This function calculates the scores for each orientation\n   @param ele - is the node (process, logical operator) whose orientation will be changed. It can be process,omitted process,\n   uncertain process, association, dissociation, logical operator\n   @param other - is the other node, and based on its position scores are given to orientations\n   @param orientation - holds scores for each orientation\n   @param firstOrientation - can be L-to-R or T-to-B\n   @param oppositeOrientation - opposite of the upper orientation (R-to-L , B-to-T)\n   @param pos - can be 'x' or 'y' (based on vertical or horizontal direction of ports)\n   @param simple - checks if 'other' node is simple node (with degree 1)\n   */\n  elementUtilities.calculateOrientationScore = function (ele, other, orientation, firstOrientation, oppositeOrientation, pos, simple) {\n    var coeff = 0.5;\n    var score = 2;\n    if (simple) score = 1; // If it is a simple node, its score should affect less\n    var nodeWidthOrHeight = 0;\n    if (pos === \"x\") nodeWidthOrHeight = ele.width() / 2;else if (pos === \"y\") nodeWidthOrHeight = ele.height() / 2;\n    if (other.position(pos) < ele.position(pos) - nodeWidthOrHeight) {\n      orientation[firstOrientation] += score;\n      orientation[oppositeOrientation] -= score;\n    } else if (other.position(pos) >= ele.position(pos) - nodeWidthOrHeight && other.position(pos) <= ele.position(pos) + nodeWidthOrHeight) {\n      orientation[firstOrientation] += (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;\n      orientation[oppositeOrientation] -= (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;\n    } else if (other.position(pos) > ele.position(pos) + nodeWidthOrHeight) {\n      orientation[firstOrientation] -= score;\n      orientation[oppositeOrientation] += score;\n    }\n  };\n\n  /*\n  After a process is oriented, for each simple node that is on the wrong side of the port,\n  we try to find another simple node of degree 0 on the opposite side and swap them afterwards.\n  If from the opposide side we cannot find such a node then we try to swap it with an effector node of degree 1\n  */\n  elementUtilities.postChangePortsOrientation = function (ele, bestOrientation) {\n    var processId = ele.id();\n    var inputPort = []; // Holds all simple nodes connected with input port\n    var outputPort = []; // Holds all simple nodes connected with output port\n    var notConnectedToPort = []; // Holds all simple nodes not connected with input or output port\n    var targetingEdges = cy.edges(\"[target='\" + processId + \"']\");\n    var sourcingEdges = cy.edges(\"[source='\" + processId + \"']\");\n    // Checks simple nodes and add them to one of the arrays mentioned above\n    if (ele.data(\"class\") === \"process\" || ele.data(\"class\") === \"omitted process\" || ele.data(\"class\") === \"truncated process\" || ele.data(\"class\") === \"uncertain process\" || ele.data(\"class\") === \"association\" || ele.data(\"class\") === \"dissociation\") {\n      targetingEdges.forEach(function (edge) {\n        var source = cy.getElementById(edge.data(\"source\"));\n        if (!source.isParent()) {\n          if (edge.data(\"class\") === \"consumption\") {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, \"input\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        var target = cy.getElementById(edge.data(\"target\"));\n        if (!target.isParent()) {\n          if (edge.data(\"class\") === \"production\") {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, \"output\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n    } else if (ele.data(\"class\") === \"and\" || ele.data(\"class\") === \"or\" || ele.data(\"class\") === \"not\" || ele.data(\"class\") === \"unknown logical operator\") {\n      targetingEdges.forEach(function (edge) {\n        var source = cy.getElementById(edge.data(\"source\"));\n        if (!source.isParent()) {\n          if (edge.data(\"class\") === \"logic arc\") {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, \"input\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        var target = cy.getElementById(edge.data(\"target\"));\n        if (!target.isParent()) {\n          if (edge.data(\"class\") === \"modulation\" || edge.data(\"class\") === \"stimulation\" || edge.data(\"class\") === \"catalysis\" || edge.data(\"class\") === \"inhibition\" || edge.data(\"class\") === \"necessary stimulation\" || edge.data(\"class\") === \"logic arc\") {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, \"output\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n    }\n    //The arrays are sorted in order to keep the high priority of nodes positioned completely to the other side\n    inputPort.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    outputPort.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    notConnectedToPort.sort(function (a, b) {\n      return a.score - b.score;\n    });\n    //First we check for direct swaping between nodes from different ports positioned to the wrong side\n    var minLength = inputPort.length;\n    if (outputPort.length < minLength) minLength = outputPort.length;\n    for (i = 0; i < minLength; i++) {\n      var inputPortEle = inputPort.pop();\n      var outputPortEle = outputPort.pop();\n      //Checks if free nodes belong to the same compound\n      var firstNode = cy.getElementById(inputPortEle.id);\n      var secondNode = cy.getElementById(outputPortEle.id);\n      if (firstNode.data(\"parent\") !== secondNode.data(\"parent\")) {\n        continue;\n      }\n      elementUtilities.swapElements(inputPortEle, outputPortEle);\n    }\n    /*\n       After that we iterate over each element of effector nodes and see the scores it produces by swaping\n       with nodes connected to input or output ports\n       */\n    for (i = notConnectedToPort.length - 1; i >= 0; i--) {\n      var effector = notConnectedToPort[i];\n      if (outputPort.length > 0) {\n        var firstOutput = outputPort[outputPort.length - 1];\n        //Checks if free nodes belong to the same compound\n        var firstNode = cy.getElementById(effector.id);\n        var secondNode = cy.getElementById(firstOutput.id);\n        if (firstNode.data(\"parent\") !== secondNode.data(\"parent\")) {\n          continue;\n        }\n        elementUtilities.swapElements(effector, firstOutput);\n        var firstOutputScore = -elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstOutput.id), bestOrientation);\n        if (firstOutputScore > firstOutput.score) {\n          outputPort.pop();\n        } else elementUtilities.swapElements(effector, firstOutput); //swap back\n      } else if (inputPort.length > 0) {\n        var firstInput = inputPort[inputPort.length - 1];\n        //Checks if free nodes belong to the same compound\n        var firstNode = cy.getElementById(effector.id);\n        var secondNode = cy.getElementById(firstInput.id);\n        if (firstNode.data(\"parent\") !== secondNode.data(\"parent\")) {\n          continue;\n        }\n        elementUtilities.swapElements(effector, firstInput);\n        var firstInputScore = elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstInput.id), bestOrientation);\n        if (firstInputScore > firstInput.score) {\n          inputPort.pop();\n        } else elementUtilities.swapElements(effector, firstInput);\n      }\n    }\n  };\n\n  /*\n   * Adds simple nodes when they have negative score to inputPort, outputPort or notConnectedPort arrays\n   * */\n  elementUtilities.addSimpleNodeToArray = function (ele, other, orientation, array, connectedTo) {\n    if (other.connectedEdges().length === 1) {\n      var nodeScore;\n      var obj = {};\n      if (connectedTo === \"notConnected\") {\n        nodeScore = Math.abs(elementUtilities.checkNegativeOrientationScore(ele, other, orientation));\n        obj[\"id\"] = other.id();\n        obj[\"score\"] = nodeScore;\n        array.push(obj);\n      } else {\n        if (connectedTo === \"input\") nodeScore = elementUtilities.checkNegativeOrientationScore(ele, other, orientation);else if (connectedTo === \"output\") nodeScore = -elementUtilities.checkNegativeOrientationScore(ele, other, orientation);\n        if (nodeScore < 0) {\n          //if it is in the wrong side we add it to the input array\n          obj[\"id\"] = other.id();\n          obj[\"score\"] = nodeScore;\n          array.push(obj);\n        }\n      }\n    }\n  };\n\n  /*\n  This function calculates the score of a node based on its position with respect to a process/logical operator\n  @param ele - is the node with the ports. It can be process,omitted process,\n  uncertain process, association, dissociation, logical operator\n  @param other - is the other node, and based on its position score of a node is calculated\n  @param orientation - A string which holds current best orientation\n  */\n  elementUtilities.checkNegativeOrientationScore = function (ele, other, orientation) {\n    var coeff = 0.5;\n    var score = 1;\n    if (orientation === \"L-to-R\" || orientation === \"R-to-L\") {\n      var nodeWidth = ele.width() / 2;\n      if (other.position(\"x\") < ele.position(\"x\") - nodeWidth) {\n        if (orientation === \"L-to-R\") return score;else if (orientation === \"R-to-L\") return -score;\n      } else if (other.position(\"x\") >= ele.position(\"x\") - nodeWidth && other.position(\"x\") <= ele.position(\"x\") + nodeWidth) {\n        if (orientation === \"L-to-R\") return (ele.position(\"x\") - other.position(\"x\")) / nodeWidth * coeff;else if (orientation === \"R-to-L\") return -(ele.position(\"x\") - other.position(\"x\")) / nodeWidth * coeff;\n      } else if (other.position(\"x\") > ele.position(\"x\") + nodeWidth) {\n        if (orientation === \"L-to-R\") return -score;else if (orientation === \"R-to-L\") return score;\n      }\n    }\n    if (orientation === \"T-to-B\" || orientation === \"B-to-T\") {\n      var nodeHeight = ele.height() / 2;\n      if (other.position(\"y\") < ele.position(\"y\") - nodeHeight) {\n        if (orientation === \"T-to-B\") return score;else if (orientation === \"B-to-T\") return -score;\n      } else if (other.position(\"y\") >= ele.position(\"y\") - nodeHeight && other.position(\"y\") <= ele.position(\"y\") + nodeHeight) {\n        if (orientation === \"T-to-B\") return (ele.position(\"y\") - other.position(\"y\")) / nodeHeight * coeff;else if (orientation === \"B-to-T\") return -(ele.position(\"y\") - other.position(\"y\")) / nodeHeight * coeff;\n      } else if (other.position(\"y\") > ele.position(\"y\") + nodeHeight) {\n        if (orientation === \"T-to-B\") return -score;else if (orientation === \"B-to-T\") return score;\n      }\n    }\n  };\n\n  /*\n  Swaps the positions of 2 elements\n  */\n  elementUtilities.swapElements = function (firstEle, secondEle) {\n    var firstNode = cy.getElementById(firstEle.id);\n    var secondNode = cy.getElementById(secondEle.id);\n    var tempx = firstNode.position(\"x\");\n    var tempy = firstNode.position(\"y\");\n    firstNode.position(\"x\", secondNode.position(\"x\"));\n    firstNode.position(\"y\", secondNode.position(\"y\"));\n    secondNode.position(\"x\", tempx);\n    secondNode.position(\"y\", tempy);\n  };\n\n  // used for handling the variable property of complexes\n  elementUtilities.getComplexPadding = function (ele) {\n    // this property needs to take into account:\n    // - presence of a label\n    // - option to display complex labels\n    // - presence of states and info box on the bottom\n    var padding = graphUtilities.getCompoundPaddings();\n    padding = padding < 5 ? 5 : padding;\n    if (options.showComplexName && elementUtilities.getElementContent(ele)) {\n      padding += options.extraComplexPadding * 0.5;\n      // if there is something on the bottom side\n\n      if (ele.data(\"auxunitlayouts\") && ele.data(\"auxunitlayouts\").bottom && ele.data(\"auxunitlayouts\").bottom.units.length > 0) {\n        padding += options.extraComplexPadding * 0.5;\n      } else {\n        for (var i = 0; i < ele.data(\"statesandinfos\").length; i++) {\n          var statesandinfos = ele.data(\"statesandinfos\")[i];\n          var thisY = statesandinfos.bbox.y;\n          var thisH = statesandinfos.bbox.h;\n          var parentY = ele.data(\"class\") == \"compartment\" || ele.data(\"class\") == \"complex\" ? ele.data(\"bbox\").y : ele.position().y;\n          var height = ele.data(\"originalH\") ? ele.data(\"originalH\") : ele.height();\n          var parentY2 = Number((parentY + height / 2).toFixed(2));\n          var centerY = Number((thisY + thisH / 2).toFixed(2));\n          if (centerY == parentY2) {\n            padding += options.extraComplexPadding * 0.5;\n            break;\n          }\n        }\n      }\n    }\n    // for the case where the padding is the tightest, we need a bit of extra space\n    // to avoid touching the infoboxes of the complex\n    else {\n      if (ele.data(\"statesandinfos\").length > 0) {\n        padding += 2;\n      }\n    }\n    return padding;\n  };\n\n  // used for handling the variable property of complexes\n  elementUtilities.getComplexMargin = function (ele) {\n    // this property needs to take into account:\n    // - presence of a label\n    // - option to display complex labels\n    // - presence of states and info box on the bottom\n    var margin = -1 * options.extraComplexPadding;\n    if (options.showComplexName && elementUtilities.getElementContent(ele) && ele.data(\"auxunitlayouts\") &&\n    // check if there is something on the bottom side\n    ele.data(\"auxunitlayouts\").bottom && ele.data(\"auxunitlayouts\").bottom.units.length > 0) {\n      margin -= options.extraComplexPadding * 0.5;\n    }\n    if (ele.css(\"font-size\") == \"14px\") margin -= 2;\n    return margin;\n  };\n\n  // Set clone marker status of given nodes to the given status.\n  elementUtilities.setCloneMarkerStatus = function (node, status) {\n    if (status) node.data(\"clonemarker\", true);else node.removeData(\"clonemarker\");\n    if (node.data(\"class\") !== \"unspecified entity\" && node.data(\"class\") !== \"perturbing agent\") return;\n    var bgObj = {\n      \"background-image\": \"data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E\",\n      \"background-position-x\": \"50%\",\n      \"background-position-y\": \"100%\",\n      \"background-width\": \"100%\",\n      \"background-height\": \"25%\",\n      \"background-fit\": \"none\",\n      \"background-image-opacity\": \"0\"\n    };\n    var imgs = node.data(\"background-image\") ? node.data(\"background-image\").split(\" \") : [];\n    var xPos = node.data(\"background-position-x\") ? node.data(\"background-position-x\").split(\" \") : [];\n    var yPos = node.data(\"background-position-y\") ? node.data(\"background-position-y\").split(\" \") : [];\n    var widths = node.data(\"background-width\") ? node.data(\"background-width\").split(\" \") : [];\n    var heights = node.data(\"background-height\") ? node.data(\"background-height\").split(\" \") : [];\n    var fits = node.data(\"background-fit\") ? node.data(\"background-fit\").split(\" \") : [];\n    var opacities = node.data(\"background-image-opacity\") ? (\"\" + node.data(\"background-image-opacity\")).split(\" \") : [];\n    if (status) {\n      var index = imgs.indexOf(bgObj[\"background-image\"]);\n      // Already exists; Make opacity non-zero\n      if (index > -1) opacities[index] = node.css(\"background-opacity\");else {\n        imgs.push(bgObj[\"background-image\"]);\n        xPos.push(bgObj[\"background-position-x\"]);\n        yPos.push(bgObj[\"background-position-y\"]);\n        widths.push(bgObj[\"background-width\"]);\n        heights.push(bgObj[\"background-height\"]);\n        fits.push(bgObj[\"background-fit\"]);\n        opacities.push(node.css(\"background-opacity\"));\n      }\n    } else {\n      var index = imgs.indexOf(bgObj[\"background-image\"]);\n      // Already exists; Make opacity zero\n      if (index > -1) opacities[index] = \"0\";\n    }\n    node.data(\"background-image\", imgs.join(\" \"));\n    node.data(\"background-position-x\", xPos.join(\" \"));\n    node.data(\"background-position-y\", yPos.join(\" \"));\n    node.data(\"background-width\", widths.join(\" \"));\n    node.data(\"background-height\", heights.join(\" \"));\n    node.data(\"background-fit\", fits.join(\" \"));\n    node.data(\"background-image-opacity\", opacities.join(\" \"));\n  };\n\n  // Section End\n  // Stylesheet helpers\n\n  var defaultProperties = {};\n  var getDefaultNodeProperties = function getDefaultNodeProperties() {\n    return {\n      \"border-width\": 1.25,\n      \"border-color\": \"#555555\",\n      \"background-color\": \"#ffffff\",\n      \"background-opacity\": 1,\n      \"background-image-opacity\": 1,\n      \"text-wrap\": \"wrap\",\n      \"border-style\": \"solid\"\n    };\n  };\n  var getDefaultEdgeProperties = function getDefaultEdgeProperties() {\n    return {\n      \"line-color\": \"#555555\",\n      width: 1.25\n    };\n  };\n  var getDefaultProcessSize = function getDefaultProcessSize() {\n    return {\n      width: 20,\n      height: 20\n    };\n  };\n  var getDefaultLogicalOperatorSize = function getDefaultLogicalOperatorSize() {\n    return {\n      width: 30,\n      height: 30\n    };\n  };\n  var getDefaultBASize = function getDefaultBASize() {\n    return {\n      width: 60,\n      height: 30\n    };\n  };\n  var defaultSifEdgeColorMap = {\n    \"neighbor-of\": \"#FC002C\",\n    \"interacts-with\": \"#B57261\",\n    \"in-complex-with\": \"#B4987A\",\n    \"controls-state-change-of\": \"#B4E1CD\",\n    \"controls-transport-of\": \"#F0E7C8\",\n    \"controls-phosphorylation-of\": \"#D970A1\",\n    \"catalysis-precedes\": \"#8EC3ED\",\n    \"controls-expression-of\": \"#6A0F30\",\n    \"consumption-controled-by\": \"#A9A9F7\",\n    \"controls-production-of\": \"#2D5207\",\n    \"controls-transport-of-chemical\": \"#3F00FF\",\n    \"chemical-affects\": \"#D95F23\",\n    \"reacts-with\": \"#4E214B\",\n    \"used-to-produce\": \"#FF2F07\",\n    phosphorylates: \"#43A93C\",\n    dephosphorylates: \"#CD4F32\",\n    \"upregulates-expression\": \"#43A93C\",\n    \"downregulates-expression\": \"#CD4F32\",\n    activates: \"#32D849\",\n    inhibits: \"#4886A5\",\n    \"activates-gtpase\": \"#468DE3\",\n    \"inhibits-gtpase\": \"#C364BF\",\n    acetylates: \"#55B1B6\",\n    deacetylates: \"#EE5F78\",\n    methylates: \"#B0B03D\",\n    demethylates: \"#DB6F21\"\n  };\n  var defaultSizeMap = {\n    macromolecule: {\n      width: 60,\n      height: 30\n    },\n    protein: {\n      width: 60,\n      height: 30\n    },\n    \"nucleic acid feature\": {\n      width: 60,\n      height: 30\n    },\n    \"simple chemical\": {\n      width: 30,\n      height: 30\n    },\n    \"empty set\": {\n      width: 22,\n      height: 22\n    },\n    degradation: {\n      width: 22,\n      height: 22\n    },\n    phenotype: {\n      width: 60,\n      height: 30\n    },\n    \"unspecified entity\": {\n      width: 60,\n      height: 30\n    },\n    \"perturbing agent\": {\n      width: 60,\n      height: 30\n    },\n    complex: {\n      width: 44,\n      height: 44\n    },\n    compartment: {\n      width: 80,\n      height: 80\n    },\n    submap: {\n      width: 80,\n      height: 80\n    },\n    tag: {\n      width: 35,\n      height: 35\n    },\n    \"SIF macromolecule\": {\n      width: 60,\n      height: 30\n    },\n    \"SIF simple chemical\": {\n      width: 30,\n      height: 30\n    },\n    \"topology group\": {\n      width: 44,\n      height: 44\n    },\n    gene: {\n      width: 50,\n      height: 30\n    },\n    rna: {\n      width: 50,\n      height: 44\n    },\n    \"simple-molecule\": {\n      width: 30,\n      height: 30\n    },\n    \"unknown molecule\": {\n      width: 60,\n      height: 30\n    },\n    ion: {\n      width: 30,\n      height: 30\n    },\n    drug: {\n      width: 60,\n      height: 40\n    },\n    // phenotype: {\n    //   width: 30,\n    //   height: 30,\n    // },\n    \"simple molecule\": {\n      width: 50,\n      height: 40\n    },\n    \"truncated protein\": {\n      width: 60,\n      height: 40\n    },\n    \"ion channel\": {\n      width: 60,\n      height: 40\n    },\n    receptor: {\n      width: 60,\n      height: 40\n    },\n    \"phenotype sbml\": {\n      width: 50,\n      height: 50\n    },\n    \"complex sbml\": {\n      width: 44,\n      height: 44\n    }\n  };\n  elementUtilities.processTypes.forEach(function (type) {\n    // phenotype has a different default size\n    if (type == \"phenotype\") {\n      return;\n    }\n    defaultSizeMap[type] = getDefaultProcessSize();\n  });\n  elementUtilities.logicalOperatorTypes.forEach(function (type) {\n    defaultSizeMap[type] = getDefaultLogicalOperatorSize();\n  });\n  elementUtilities.biologicalActivityTypes.forEach(function (type) {\n    defaultSizeMap[type] = getDefaultBASize();\n  });\n  var getDefaultSize = function getDefaultSize(type) {\n    return defaultSizeMap[type];\n  };\n  var getDefaultFontProperties = function getDefaultFontProperties() {\n    return {\n      \"font-size\": 11,\n      \"font-family\": \"Helvetica\",\n      \"font-style\": \"normal\",\n      \"font-weight\": \"normal\",\n      color: \"#000\"\n    };\n  };\n  var getDefaultInfoboxProperties = function getDefaultInfoboxProperties(nodeClass, infoboxType) {\n    return {\n      \"font-size\": getDefaultInfoboxFontSize(nodeClass, infoboxType),\n      \"font-family\": \"Arial\",\n      \"font-style\": \"normal\",\n      \"font-weight\": \"normal\",\n      \"font-color\": \"#0f0f0f\",\n      \"border-width\": 1,\n      \"border-style\": \"solid\",\n      \"border-color\": \"#555555\",\n      \"background-color\": \"#ffffff\",\n      \"shape-name\": getDefaultInfoboxShapeName(nodeClass, infoboxType),\n      width: getDefaultInfoboxSize(nodeClass, infoboxType).w,\n      height: getDefaultInfoboxSize(nodeClass, infoboxType).h\n    };\n  };\n  var getDefaultInfoboxFontSize = function getDefaultInfoboxFontSize(nodeClass, infoboxType) {\n    var fontsize = 9;\n    if (nodeClass === \"SIF macromolecule\" || nodeClass === \"SIF simple chemical\") {\n      fontsize = 11;\n    }\n    return fontsize;\n  };\n  var getDefaultInfoboxSize = function getDefaultInfoboxSize(nodeClass, infoboxType) {\n    var w = 12,\n      h = 12;\n    if (nodeClass === \"SIF macromolecule\" || nodeClass === \"SIF simple chemical\") {\n      w = 15;\n      h = 15;\n    }\n    return {\n      w: w,\n      h: h\n    };\n  };\n  var getDefaultInfoboxShapeName = function getDefaultInfoboxShapeName(nodeClass, infoboxType) {\n    if (infoboxType === \"state variable\" || infoboxType === \"residue variable\") {\n      return \"stadium\";\n    }\n    if (elementUtilities.isSIFNode(nodeClass)) {\n      if (infoboxType === \"unit of information\" || infoboxType === \"binding region\") {\n        if (nodeClass == \"SIF macromolecule\") {\n          return \"stadium\";\n        }\n        return \"rectangle\";\n      }\n    } else {\n      var list = elementUtilities.getUnitOfInfoShapeOptions(nodeClass);\n      return list[0];\n    }\n  };\n  elementUtilities.nodeTypes.forEach(function (type) {\n    defaultProperties[type] = $.extend({}, getDefaultNodeProperties(), getDefaultSize(type));\n    if (elementUtilities.canHaveStateVariable(type)) {\n      var props = getDefaultInfoboxProperties(type, \"state variable\");\n      defaultProperties[type][\"state variable\"] = props;\n    }\n    if (elementUtilities.canHaveResidueVariable(type)) {\n      var props = getDefaultInfoboxProperties(type, \"residue variable\");\n      defaultProperties[type][\"residue variable\"] = props;\n    }\n    if (elementUtilities.canHaveBindingRegion(type)) {\n      var props = getDefaultInfoboxProperties(type, \"binding region\");\n      defaultProperties[type][\"binding region\"] = props;\n    }\n    if (elementUtilities.canHaveUnitOfInformation(type)) {\n      var props = getDefaultInfoboxProperties(type, \"unit of information\");\n      defaultProperties[type][\"unit of information\"] = props;\n    }\n  });\n  elementUtilities.compoundNodeTypes.forEach(function (type) {\n    defaultProperties[type] = $.extend(defaultProperties[type], {\n      \"background-opacity\": 0.5\n    });\n  });\n  $.extend(defaultProperties[\"association\"], {\n    \"background-color\": \"#707070\"\n  });\n  $.extend(defaultProperties[\"unknown molecule\"], {\n    \"background-color\": \"#707070\"\n  });\n  elementUtilities.epnTypes.concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes).concat(elementUtilities.biologicalActivityTypes).concat([\"phenotype\"]).concat(elementUtilities.sbmlType).forEach(function (type) {\n    $.extend(defaultProperties[type], getDefaultFontProperties());\n  });\n  $.extend(defaultProperties[\"submap\"], {\n    \"font-size\": 14,\n    \"border-width\": 2.25\n  });\n  $.extend(defaultProperties[\"compartment\"], {\n    \"font-size\": 14,\n    \"border-width\": 3.25\n  });\n  elementUtilities.edgeTypes.forEach(function (type) {\n    defaultProperties[type] = getDefaultEdgeProperties();\n    if (defaultSifEdgeColorMap[type]) {\n      defaultProperties[type][\"line-color\"] = defaultSifEdgeColorMap[type];\n    }\n  });\n  function getProp(props, name) {\n    var prop = props[name];\n    if (_typeof(prop) !== null && _typeof(prop) === \"object\") {\n      return $.extend({}, prop);\n    }\n    return prop;\n  }\n  function extendDataWithClassDefaults(data, className, propsToSkip) {\n    if (!className) {\n      return;\n    }\n    var defaultProps = elementUtilities.getDefaultProperties(className);\n    Object.keys(defaultProps).forEach(function (name) {\n      if (!propsToSkip || !propsToSkip[name]) {\n        data[name] = getProp(defaultProps, name);\n      }\n    });\n    if (data.language && data.language == 'SBML') {\n      var defaultSimulationProps = elementUtilities.getSBMLSimulationDefaults(className);\n      if (!data['simulation']) {\n        data['simulation'] = defaultSimulationProps;\n        return;\n      }\n      Object.keys(defaultSimulationProps).forEach(function (name) {\n        if (!Object.hasOwn(data['simulation'], name)) data['simulation'][name] = defaultSimulationProps[name];\n      });\n    }\n  }\n  elementUtilities.getSBMLSimulationDefaults = function (className) {\n    var pureClass = elementUtilities.getPureSbgnClass(className);\n    if (pureClass == 'compartment') {\n      return {\n        'spatialDimensions': 3,\n        'size': 1,\n        'units': \"\",\n        'constant': true\n      };\n    } else if (elementUtilities.processTypes.includes(pureClass)) {\n      // SBML Process\n      return {\n        'localParameters': [],\n        // {name: , value: , unit: }\n        'kineticLaw': \"0\"\n      };\n    } else if (elementUtilities.edgeTypes.includes(pureClass)) {\n      // SBML Edge\n      return {\n        'stoichiometry': 1,\n        'constant': true\n      };\n    } else {\n      // SBML Species\n      return {\n        'initialAmount': 0.0,\n        'initialConcentration': 0.0,\n        'substanceUnits': \"\",\n        'hasOnlySubstanceUnits': true,\n        // true for amount, false for density\n        'constant': false,\n        'boundaryCondition': false,\n        'conversionFactor': 1\n      };\n    }\n  };\n  elementUtilities.extendNodeDataWithClassDefaults = function (data, className) {\n    // list of properties to skip\n    var propsToSkip = {\n      width: true,\n      height: true,\n      \"state variable\": true,\n      \"residue variable\": true,\n      \"binding region\": true,\n      \"unit of information\": true,\n      multimer: true,\n      clonemarker: true,\n      \"ports-ordering\": true,\n      active: true,\n      hypothetical: true\n    };\n    extendDataWithClassDefaults(data, className, propsToSkip);\n  };\n  elementUtilities.extendEdgeDataWithClassDefaults = function (data, className) {\n    extendDataWithClassDefaults(data, className);\n  };\n\n  // get infobox properties and filter the ones related to style only\n  elementUtilities.getDefaultInfoboxStyle = function (nodeClass, infoboxType) {\n    var defaultProps = elementUtilities.getDefaultProperties(nodeClass);\n    var infoboxStyle = $.extend({}, defaultProps[infoboxType]);\n\n    // width and height are belonging to bbox object rather than style object\n    var nonStyleProps = [\"width\", \"height\"];\n    nonStyleProps.forEach(function (propName) {\n      delete infoboxStyle[propName];\n    });\n    return infoboxStyle;\n  };\n  elementUtilities.getDefaultProperties = function (sbgnclass) {\n    if (sbgnclass == undefined) {\n      return defaultProperties;\n    }\n    var pureClass = elementUtilities.getPureSbgnClass(sbgnclass);\n\n    // init default properties for the class if not initialized yet\n    //console.log('defaultProperties[ pureClass ] ', defaultProperties[ pureClass ] )\n    if (defaultProperties[pureClass] == null) {\n      defaultProperties[pureClass] = {};\n    }\n    return defaultProperties[pureClass];\n  };\n  elementUtilities.setDefaultProperties = function (sbgnclass, props) {\n    $.extend(elementUtilities.getDefaultProperties(sbgnclass), props);\n  };\n  elementUtilities.lockGraphTopology = function () {\n    elementUtilities.graphTopologyLocked = true;\n    if (cy.expandCollapse) {\n      cy.expandCollapse(\"get\").disableCue();\n    }\n  };\n  elementUtilities.unlockGraphTopology = function () {\n    elementUtilities.graphTopologyLocked = false;\n    if (cy.expandCollapse) {\n      cy.expandCollapse(\"get\").enableCue();\n    }\n  };\n  elementUtilities.isGraphTopologyLocked = function () {\n    return elementUtilities.graphTopologyLocked;\n  };\n  elementUtilities.languageToMapType = function (lang) {\n    switch (lang) {\n      case \"process description\":\n        return \"PD\";\n      case \"activity flow\":\n        return \"AF\";\n      case \"sif\":\n        return \"SIF\";\n      case \"sbml\":\n        return \"SBML\";\n      case \"hybrid sbgn\":\n        return \"HybridSbgn\";\n      default:\n        return \"HybridAny\";\n    }\n  };\n  elementUtilities.mapTypeToLanguage = function (mapType) {\n    switch (mapType) {\n      case \"PD\":\n        return \"process description\";\n      case \"AF\":\n        return \"activity flow\";\n      case \"SIF\":\n        return \"sif\";\n      case \"SBML\":\n        return \"sbml\";\n      case \"HybridSbgn\":\n        return \"hybrid sbgn\";\n      default:\n        return \"hybrid any\";\n    }\n  };\n  elementUtilities.getAllCollapsedChildrenRecursively = function (nodes) {\n    var expandCollapse = cy.expandCollapse(\"get\");\n    var collapsedChildren = cy.collection();\n    var collapsedNodes = nodes.filter(\".cy-expand-collapse-collapsed-node\");\n    collapsedNodes.forEach(function (n) {\n      collapsedChildren = collapsedChildren.union(expandCollapse.getCollapsedChildrenRecursively(n));\n    });\n    return collapsedChildren;\n  };\n  elementUtilities.getWidthByContent = function (content, fontFamily, fontSize, options) {\n    return textUtilities.getWidthByContent(content, fontFamily, fontSize, options);\n  };\n  return elementUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/element-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/experimental-data-overlay.js":
/*!****************************************************!*\
  !*** ./src/utilities/experimental-data-overlay.js ***!
  \****************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var cy;\n  var parsedDataMap;\n  var visibleDataMapByExp;\n  var groupedDataMap;\n  var visibleFiles;\n  var colorMap;\n  var allVis;\n  var fileDescription;\n  var fileTitle;\n  function experimentalDataOverlay(param) {\n    // Init\n    cy = param.sbgnCyInstance.getCy();\n    parsedDataMap = {};\n    visibleDataMapByExp = {};\n    visibleFiles = {};\n    groupedDataMap = {};\n    colorMap = {};\n    allVis = true;\n    fileDescription = {};\n    fileTitle = {};\n  }\n  experimentalDataOverlay.getName = function () {\n    return fname;\n  };\n  experimentalDataOverlay.getDesc = function () {\n    return fdesc;\n  };\n  experimentalDataOverlay.getGroupedDataMap = function () {\n    return groupedDataMap;\n  };\n  experimentalDataOverlay.getParsedDataMap = function () {\n    return parsedDataMap;\n  };\n  experimentalDataOverlay.getVisibleData = function () {\n    return visibleDataMapByExp;\n  };\n  experimentalDataOverlay.hideAll = function () {\n    var invisibleExp = {};\n    var invisibleFile = {};\n    allVis = false;\n    for (var i in groupedDataMap) {\n      if (visibleFiles[i]) {\n        visibleFiles[i] = false;\n        invisibleFile[i] = false;\n      }\n    }\n    for (var fileName in groupedDataMap) {\n      for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n        var expName = groupedDataMap[fileName][j];\n        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n        if (visibleDataMapByExp[fileName + '?' + expName] == true) {\n          invisibleExp[fileName + '?' + expName] = false;\n          visibleDataMapByExp[fileName + '?' + expName] = false;\n        }\n      }\n    }\n    this.showData();\n    params = {\n      invisibleFile: invisibleFile,\n      invisibleExp: invisibleExp\n    };\n    return params;\n  };\n  experimentalDataOverlay.hideAllUndo = function (invisibleFile, invisibleExp) {\n    for (var j in invisibleFile) {\n      visibleFiles[j] = true;\n    }\n    for (var _j in invisibleExp) {\n      visibleDataMapByExp[_j] = true;\n    }\n    allVis = true;\n    this.showData();\n    return;\n  };\n  experimentalDataOverlay.unhideAll = function () {\n    var visibleExp = {};\n    var visibleFile = {};\n    allVis = true;\n    for (var i in visibleFiles) {\n      if (!visibleFiles[i]) {\n        visibleFiles[i] = true;\n        visibleFile[i] = true;\n      }\n    }\n    for (var fileName in groupedDataMap) {\n      if (groupedDataMap[fileName] == undefined) {\n        return;\n      }\n      for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n        var expName = groupedDataMap[fileName][j];\n        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n        if (visibleDataMapByExp[fileName + '?' + expName] == false) {\n          visibleExp[fileName + '?' + expName] = true;\n          visibleDataMapByExp[fileName + '?' + expName] = true;\n        }\n      }\n    }\n    this.showData();\n    return {\n      visibleExp: visibleExp,\n      visibleFile: visibleFile\n    };\n  };\n  experimentalDataOverlay.unhideAllUndo = function (visibleFile, visibleExp) {\n    for (var j in visibleFile) {\n      visibleFiles[j] = false;\n    }\n    for (var _j2 in visibleExp) {\n      visibleDataMapByExp[_j2] = false;\n    }\n    allVis = false;\n    this.showData();\n    return;\n  };\n  experimentalDataOverlay.removeAll = function () {\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n    for (var _i in visibleDataMapByExp) {\n      visible[_i] = visibleDataMapByExp[_i];\n    }\n    for (var _i2 in visibleFiles) {\n      visiblef[_i2] = visibleFiles[_i2];\n    }\n    for (var _i3 in groupedDataMap) {\n      if (!grouped[_i3]) {\n        grouped[_i3] = [];\n      }\n      for (var _j3 in groupedDataMap[_i3]) {\n        grouped[_i3].push(groupedDataMap[_i3][_j3]);\n      }\n    }\n    parsedDataMap = {};\n    visibleDataMapByExp = {};\n    visibleFiles = {};\n    groupedDataMap = {};\n    this.showData();\n    params = {\n      parsed: parsed,\n      visible: visible,\n      grouped: grouped,\n      visiblef: visiblef\n    };\n    return params;\n  };\n  experimentalDataOverlay.restoreAll = function (parsed, visible, grouped, visiblef) {\n    parsedDataMap = parsed;\n    visibleDataMapByExp = visible;\n    groupedDataMap = grouped;\n    visibleFiles = visiblef;\n    this.showData();\n    param = {};\n    return param;\n  };\n  experimentalDataOverlay.addExp = function (fileName, expName, isVisible, values, groupArray) {\n    visibleDataMapByExp[fileName + '?' + expName] = isVisible;\n    groupedDataMap[fileName] = groupArray;\n    for (var i in values) {\n      if (values[i][fileName + '?' + expName] != undefined) parsedDataMap[i][fileName + '?' + expName] = values[i][fileName + '?' + expName];\n    }\n    var params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.addFile = function (fileName, parsed, visible, grouped, visiblef) {\n    parsedDataMap = parsed;\n    visibleDataMapByExp = visible;\n    groupedDataMap = grouped;\n    visibleFiles = visiblef;\n    this.showData();\n    param = {\n      fileName: fileName\n    };\n    return param;\n  };\n  experimentalDataOverlay.removeExp = function (fileName, expName) {\n    var isVisible = false;\n    var values = {};\n    var groupArray = [];\n    if (visibleDataMapByExp[fileName + '?' + expName] != undefined) {\n      isVisible = visibleDataMapByExp[fileName + '?' + expName];\n      delete visibleDataMapByExp[fileName + '?' + expName];\n    }\n    if (groupedDataMap[fileName] != undefined) {\n      for (var i in groupedDataMap[fileName]) {\n        groupArray[i] = groupedDataMap[fileName][i];\n      }\n      //groupArray = groupedDataMap[fileName];\n      var index = groupedDataMap[fileName].indexOf(expName);\n      if (index != -1) {\n        delete groupedDataMap[fileName][index];\n      }\n    }\n    for (var _i4 in parsedDataMap) {\n      if (parsedDataMap[_i4][fileName + '?' + expName] != undefined) {\n        if (!(_i4 in values)) {\n          values[_i4] = {};\n        }\n        values[_i4][fileName + '?' + expName] = parsedDataMap[_i4][fileName + '?' + expName];\n        delete parsedDataMap[_i4][fileName + '?' + expName];\n      }\n    }\n    if (groupedDataMap[fileName] != undefined) {\n      var count = 0;\n      for (var _i5 = 0; _i5 < groupedDataMap[fileName].length; _i5++) {\n        if (!groupedDataMap[fileName][_i5]) count++;\n      }\n      if (count == groupedDataMap[fileName].length) {\n        delete groupedDataMap[fileName];\n      }\n    }\n    params = {\n      fileName: fileName,\n      expName: expName,\n      isVisible: isVisible,\n      values: values,\n      groupArray: groupArray\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.removeFile = function (fileName) {\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n    for (var _i6 in visibleDataMapByExp) {\n      visible[_i6] = visibleDataMapByExp[_i6];\n    }\n    for (var _i7 in visibleFiles) {\n      visiblef[_i7] = visibleFiles[_i7];\n    }\n    for (var _i8 in groupedDataMap) {\n      if (!grouped[_i8]) {\n        grouped[_i8] = [];\n      }\n      for (var _j4 in groupedDataMap[_i8]) {\n        grouped[_i8].push(groupedDataMap[_i8][_j4]);\n      }\n    }\n    for (var _j5 = 0; _j5 < groupedDataMap[fileName].length; _j5++) {\n      var expName = groupedDataMap[fileName][_j5];\n      if (visibleDataMapByExp[fileName + '?' + expName] != undefined) delete visibleDataMapByExp[fileName + '?' + expName];\n      for (var _i9 in parsedDataMap) {\n        delete parsedDataMap[_i9][fileName + '?' + expName];\n      }\n    }\n    delete groupedDataMap[fileName];\n    var params = {\n      fileName: fileName,\n      parsed: parsed,\n      visible: visible,\n      grouped: grouped,\n      visiblef: visiblef\n    };\n    this.showData();\n    var k = 0;\n    for (var _i10 in groupedDataMap) {\n      k++;\n    }\n    if (k == 0) {\n      groupedDataMap = {};\n    }\n    return params;\n  };\n  experimentalDataOverlay.hideExp = function (fileName, expName) {\n    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;\n    visibleDataMapByExp[fileName + '?' + expName] = false;\n    params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.hideFile = function (fileName) {\n    visibleFiles[fileName] = false;\n    var invisible = {};\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n    for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n      var expName = groupedDataMap[fileName][j];\n      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n      if (visibleDataMapByExp[fileName + '?' + expName] == true) {\n        invisible[fileName + '?' + expName] = false;\n        visibleDataMapByExp[fileName + '?' + expName] = false;\n      }\n    }\n    this.showData();\n    params = {\n      fileName: fileName,\n      invisible: invisible\n    };\n    return params;\n  };\n  experimentalDataOverlay.hideFileUndo = function (fileName, invisible) {\n    if (visibleFiles[fileName] != undefined) visibleFiles[fileName] = true;else return;\n    for (var j in invisible) {\n      visibleDataMapByExp[j] = true;\n    }\n    this.showData();\n    return {\n      fileName: fileName\n    };\n  };\n  experimentalDataOverlay.unhideExp = function (fileName, expName) {\n    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;\n    visibleDataMapByExp[fileName + '?' + expName] = true;\n    params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.unhideFile = function (fileName) {\n    var visible = {};\n    visibleFiles[fileName] = true;\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n    for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n      var expName = groupedDataMap[fileName][j];\n      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n      if (visibleDataMapByExp[fileName + '?' + expName] == false) {\n        visibleDataMapByExp[fileName + '?' + expName] = true;\n        visible[fileName + '?' + expName] = true;\n      }\n    }\n    this.showData();\n    params = {\n      fileName: fileName,\n      visible: visible\n    };\n    return params;\n  };\n  experimentalDataOverlay.unhideFileUndo = function (fileName, visible) {\n    visibleFiles[fileName] = false;\n    for (var j in visible) {\n      visibleDataMapByExp[j] = false;\n    }\n    this.showData();\n    return {\n      fileName: fileName\n    };\n  };\n  experimentalDataOverlay.countVisibleDataByExp = function () {\n    // Count the genomic data that will be displayed on nodes' body\n    var dataBoxCount = 0;\n    for (var exp in visibleDataMapByExp) {\n      if (visibleDataMapByExp[exp]) {\n        dataBoxCount++;\n      }\n    }\n    return dataBoxCount;\n  };\n  experimentalDataOverlay.generateSVGForNode = function (ele, tooltip) {\n    var dataBoxCount = this.countVisibleDataByExp();\n    var values = [];\n    // Experimental data overlay part !\n    // const dataURI = 'data:image/svg+xml;utf8,'\n    var svgNameSpace = 'http://www.w3.org/2000/svg';\n    var nodeLabel = ele.data('label');\n    var reqWidth = ele.outerWidth();\n    var reqHeight = ele.outerHeight();\n    var overlayRecBoxW = reqWidth;\n    var overlayRecBoxH = reqHeight;\n    var svg = document.createElementNS(svgNameSpace, 'svg');\n    // It seems this should be set according to the node size !\n    svg.setAttribute('width', reqWidth);\n    svg.setAttribute('height', reqHeight);\n    // This is important you need to include this to succesfully render in cytoscape.js!\n    svg.setAttribute('xmlns', svgNameSpace);\n\n    // Overlay Data Rect\n    var overLayRectBBox = {\n      w: overlayRecBoxW,\n      h: overlayRecBoxH,\n      x: 0,\n      y: 0\n    };\n    var frequencyData = parsedDataMap[nodeLabel];\n    var maxDataBoxCount = /*(genomicDataBoxCount > 3) ? 3:*/dataBoxCount;\n    var counter = 0;\n    for (var i in groupedDataMap) {\n      for (var j in groupedDataMap[i]) {\n        var fileName = i;\n        var expName = groupedDataMap[i][j];\n        if (!visibleDataMapByExp[fileName + '?' + expName]) {\n          continue;\n        }\n        if (frequencyData[fileName + '?' + expName] !== undefined) {\n          values.push(frequencyData[fileName + '?' + expName]);\n          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, frequencyData[fileName + '?' + expName], svg, fileName);\n        } else {\n          values.push(\"-\");\n          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, null, svg, fileName);\n        }\n\n        //  draw separator line between data rectangles\n        if (counter < maxDataBoxCount - 1) {\n          var overlayRect = document.createElementNS(svgNameSpace, 'line');\n          overlayRect.setAttribute('x1', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);\n          overlayRect.setAttribute('y1', overLayRectBBox.y);\n          overlayRect.setAttribute('x2', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);\n          overlayRect.setAttribute('y2', overLayRectBBox.y + overLayRectBBox.h);\n          overlayRect.setAttribute('style', 'stroke-width:1;stroke:rgb(85,85,85);');\n          svg.appendChild(overlayRect);\n        }\n        counter++;\n      }\n    }\n    tooltip.content = \"(\" + values.join(\",\") + \")\";\n    function interpolateColor(color1, color2, factor) {\n      var result = color1.slice();\n      for (var i = 0; i < 3; i++) {\n        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n      }\n      return result;\n    }\n    ;\n    function decideColor(percent, fileName) {\n      var sorted = [];\n      for (var _i11 in colorMap[fileName]) {\n        sorted.push(_i11);\n      }\n      sorted.sort();\n      var prev = sorted[0];\n      var next = sorted[sorted.length - 1];\n      if (percent < prev || percent > next) {\n        return {\n          r: 210,\n          g: 210,\n          b: 210\n        };\n      }\n      for (var k in sorted) {\n        var i = sorted[k];\n        if (i == percent) {\n          return {\n            r: colorMap[fileName][i][0],\n            g: colorMap[fileName][i][1],\n            b: colorMap[fileName][i][2]\n          };\n        } else if (i > percent) {\n          next = i;\n          break;\n        } else {\n          prev = i;\n        }\n      }\n      var steps = 1 / (next - prev);\n      var res = interpolateColor(colorMap[fileName][prev], colorMap[fileName][next], steps * (percent - prev));\n      return {\n        r: res[0],\n        g: res[1],\n        b: res[2]\n      };\n    }\n    function dataRectangleGenerator(x, y, w, h, percent, parentSVG, fileName) {\n      var colorString = '';\n      if (percent) {\n        var color = decideColor(parseInt(percent), fileName);\n        colorString = 'rgb(' + Math.round(color.r) + ',' + Math.round(color.g) + ',' + Math.round(color.b) + ')';\n        // Rectangle Part\n        var _overlayRect = document.createElementNS(svgNameSpace, 'rect');\n        _overlayRect.setAttribute('x', x);\n        _overlayRect.setAttribute('y', y);\n        _overlayRect.setAttribute('width', w);\n        _overlayRect.setAttribute('height', h);\n        _overlayRect.setAttribute('style', 'opacity:1;fill:' + colorString + ';');\n        parentSVG.appendChild(_overlayRect);\n      } else {\n        colorString = 'rgb(210,210,210)';\n\n        // Rectangle Part\n        var _overlayRect2 = document.createElementNS(svgNameSpace, 'rect');\n        _overlayRect2.setAttribute('x', x);\n        _overlayRect2.setAttribute('y', y);\n        _overlayRect2.setAttribute('width', w);\n        _overlayRect2.setAttribute('height', h);\n        _overlayRect2.setAttribute('style', 'opacity:1;fill:' + colorString + ';');\n        parentSVG.appendChild(_overlayRect2);\n      }\n    }\n    return svg;\n  };\n  experimentalDataOverlay.showData = function () {\n    var self = this;\n    var nodeCollection = cy.collection();\n    var collapsedChildren = cy.expandCollapse('get').getAllCollapsedChildrenRecursively().filter(\"node\");\n    var collapsedChildrenNotParent = cy.collection();\n    var parentSet = new Set(); // parent ids of collapsed children\n    collapsedChildren.forEach(function (node) {\n      parentSet.add(node.parent().id());\n    });\n    // filter parent nodes from collapsed children\n    collapsedChildren.forEach(function (node) {\n      if (!parentSet.has(node.id())) {\n        // this means removed node is not parent\n        collapsedChildrenNotParent = collapsedChildrenNotParent.union(node);\n      }\n    });\n    var expandableNodes = cy.expandCollapse('get').expandableNodes();\n    nodeCollection = nodeCollection.union(cy.nodes()).union(collapsedChildrenNotParent).difference(expandableNodes);\n    cy.batch(function () {\n      nodeCollection.forEach(function (node) {\n        var nodeLabel = node.data('label');\n        var imageURI = 'data:image/svg+xml;utf8,';\n        if (nodeLabel in parsedDataMap && !node.isParent()) {\n          var tooltip = {\n            content: ''\n          };\n          imageURI = imageURI + encodeURIComponent(self.generateSVGForNode(node, tooltip).outerHTML);\n          if (Object.keys(parsedDataMap[nodeLabel]).length > 0) {\n            // var tooltip = \"(\" + Object.values(parsedDataMap[nodeLabel]).join(\",\") + \")\";\n            node.data(\"tooltip\", tooltip.content);\n          } else {\n            node.data('tooltip', '');\n          }\n          node.data('background-image', imageURI), node.data('background-position-x', '100%');\n          node.data('background-position-y', '100%');\n          node.data('background-width', '100%');\n          node.data('background-height', '100%');\n          node.data('background-fit', 'contain');\n          node.data('background-image-opacity', '1');\n        } else {\n          node.data('background-image', \"\");\n          node.data('tooltip', '');\n        }\n      });\n    });\n  };\n  experimentalDataOverlay.hexToRgb = function (hex) {\n    if (hex[0] == '#') {\n      hex = hex.substring(1);\n    } else {\n      return;\n    }\n    var bigint = parseInt(hex, 16);\n    var r = bigint >> 16 & 255;\n    var g = bigint >> 8 & 255;\n    var b = bigint & 255;\n    return [r, g, b];\n  };\n  experimentalDataOverlay.isHex = function (hex) {\n    return typeof hex == 'string' && hex.length == 7 && !isNaN(Number('0x' + hex.substring(1))) && hex[0] == '#';\n  };\n  experimentalDataOverlay.parseData = function (data, fileName, errorCallback, sampleExperiment) {\n    parsedDataMap = parsedDataMap || {};\n    visibleDataMapByExp = visibleDataMapByExp || {};\n    groupedDataMap = groupedDataMap || {};\n    colorMap = colorMap || {};\n    var experiments = [];\n    var colors = {};\n    if (fileName in groupedDataMap && !sampleExperiment) {\n      return;\n    } else if (fileName in groupedDataMap && sampleExperiment) {\n      this.removeAll();\n    }\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    var colorm = {};\n    var fileD = {};\n    var fileN = {};\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n    for (var _i12 in visibleDataMapByExp) {\n      visible[_i12] = visibleDataMapByExp[_i12];\n    }\n    for (var _i13 in visibleFiles) {\n      visiblef[_i13] = visibleFiles[_i13];\n    }\n    for (var _i14 in groupedDataMap) {\n      if (!grouped[_i14]) {\n        grouped[_i14] = [];\n      }\n      for (var _j6 in groupedDataMap[_i14]) {\n        grouped[_i14].push(groupedDataMap[_i14][_j6]);\n      }\n    }\n    for (var _i15 in colorMap) {\n      colorm[_i15] = colorMap[_i15];\n    }\n    for (var _i16 in visibleFiles) {\n      fileD[_i16] = fileDescription[_i16];\n    }\n    for (var _i17 in visibleFiles) {\n      fileN[_i17] = fileTitle[_i17];\n    }\n    var intregex = \"^(-?)(0|([1-9][0-9]*))(\\\\.[0-9]+)?$\";\n    var version = '1.0';\n    var clr = false;\n    // By lines\n    var lines = data.split('\\n');\n    if (lines.length < 2) {\n      errorCallback();\n      return \"Error\";\n    }\n    var k = 0;\n    var upto = 4;\n    if (lines.length < 4) {\n      upto = lines.length;\n    }\n    for (var _i18 = 0; _i18 < upto; _i18++) {\n      if (lines[_i18].substring(0, 7) == 'version') {\n        k++;\n        var metaLines = lines[_i18].split('\\t');\n        if (metaLines[1] && metaLines[1].length > 1) {\n          version = metaLines[1];\n        } else {\n          fileDescription = fileD;\n          fileTitle = fileN;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n      if (lines[_i18].substring(0, 4) == 'name') {\n        k++;\n        var _metaLines = lines[_i18].split('\\t');\n        if (_metaLines[1] && _metaLines[1].length > 1) {\n          fileTitle[fileName] = _metaLines[1];\n        } else {\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n      if (lines[_i18].substring(0, 11) == 'description') {\n        k++;\n        var _metaLines2 = lines[_i18].split('\\t');\n        if (_metaLines2[1] && _metaLines2[1].length > 1) {\n          fileDescription[fileName] = _metaLines2[1];\n        } else {\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n      if (lines[_i18].substring(0, 5) == 'color') {\n        clr = true;\n        k++;\n        var _metaLines3 = lines[_i18].split('\\t');\n        if (_metaLines3.length <= 1 && _metaLines3.length % 2 == 0) {\n          errorCallback();\n          return \"Error\";\n        }\n        for (var t = 1; t < _metaLines3.length - 1; t = t + 2) {\n          var hex = _metaLines3[t + 1];\n          if (t == _metaLines3.length - 2) {\n            hex = hex.trim();\n          }\n          if (_metaLines3[t] == \"min\" || _metaLines3[t] == \"max\") {\n            if (this.isHex(hex)) {\n              colors[_metaLines3[t]] = this.hexToRgb(hex);\n            }\n          } else if (parseInt(_metaLines3[t]) != NaN) {\n            if (this.isHex(hex)) {\n              colors[parseInt(_metaLines3[t])] = this.hexToRgb(hex);\n            } else {\n              fileTitle = fileN;\n              fileDescription = fileD;\n              colorMap = colorm;\n              version = \"1.0\";\n              errorCallback();\n              return \"Error\";\n            }\n          } else {\n            fileTitle = fileN;\n            fileDescription = fileD;\n            colorMap = colorm;\n            version = \"1.0\";\n            errorCallback();\n            return \"Error\";\n          }\n        }\n      }\n    }\n\n    //default colors\n    if (!clr) {\n      colors[-100] = this.hexToRgb('#0000ff');\n      colors[100] = this.hexToRgb('#ff0000');\n      colors[0] = this.hexToRgb('#ffffff');\n    }\n\n    // First line is meta data !\n    var metaLineColumns = lines[k].split('\\t');\n\n    // Parse experiment types\n    for (var _i19 = 1; _i19 < metaLineColumns.length; _i19++) {\n      if (_i19 == metaLineColumns.length - 1) {\n        var trimmed = metaLineColumns[_i19].trim();\n        experiments.push(trimmed);\n      } else experiments.push(metaLineColumns[_i19]);\n      visibleDataMapByExp[fileName + '?' + experiments[_i19 - 1]] = true;\n      if (groupedDataMap[fileName] === undefined) {\n        groupedDataMap[fileName] = [];\n      }\n      groupedDataMap[fileName].push(experiments[_i19 - 1]);\n    }\n    visibleFiles[fileName] = true;\n    var min = Number.MAX_VALUE;\n    var max = Number.MIN_VALUE;\n\n    // parse genomic data\n    for (var _i20 = k + 1; _i20 < lines.length; _i20++) {\n      // EOF check\n      if (lines[_i20].length === 0) {\n        break;\n      }\n      // Split each line by tab and parse genomic data content\n      var lineContent = lines[_i20].split('\\t');\n      var eleSymbol = lineContent[0];\n\n      // If current gene entry is not  in genomic data map create new map\n      if (!(eleSymbol in parsedDataMap)) {\n        parsedDataMap[eleSymbol] = {};\n      }\n\n      // Add each entry of genomic data\n      for (var _j7 = 1; _j7 < lineContent.length; _j7++) {\n        if (_j7 == lineContent.length - 1) {\n          lineContent[_j7] = lineContent[_j7].trim();\n        }\n        if (lineContent[_j7].match(intregex)) {\n          parsedDataMap[eleSymbol][fileName + '?' + experiments[_j7 - 1]] = lineContent[_j7];\n        } else {\n          parsedDataMap = parsed;\n          visibleDataMapByExp = visible;\n          groupedDataMap = grouped;\n          colorMap = colorm;\n          visibleFiles = visiblef;\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          errorCallback();\n          return \"Error\";\n        }\n        if (lineContent[_j7] > max) {\n          max = lineContent[_j7];\n        }\n        if (lineContent[_j7] < min) {\n          min = lineContent[_j7];\n        }\n      }\n    }\n    if (colors['min']) {\n      var colorvalue = colors['min'];\n      delete colors['min'];\n      colors[min] = colorvalue;\n    }\n    if (colors['max']) {\n      var colorvalue = colors['max'];\n      delete colors['max'];\n      colors[max] = colorvalue;\n    }\n    colorMap[fileName] = colors;\n    var params = {\n      fileName: fileName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.getExperimentalData = function () {\n    return {\n      visibleDataMapByExp: visibleDataMapByExp,\n      visibleFiles: visibleFiles,\n      fileDescription: fileDescription,\n      allVis: allVis,\n      fileTitle: fileTitle,\n      parsedDataMap: parsedDataMap\n    };\n  };\n  return experimentalDataOverlay;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/experimental-data-overlay.js\n");

/***/ }),

/***/ "./src/utilities/file-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/file-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/*\n* File Utilities: To be used on read/write file operation\n*/\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar saveAs = libs.saveAs;\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nmodule.exports = function () {\n  // Helper functions Start\n  // see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\n  function b64toBlob(b64Data, contentType, sliceSize) {\n    contentType = contentType || '';\n    sliceSize = sliceSize || 512;\n    var byteCharacters = atob(b64Data);\n    var byteArrays = [];\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\n      var byteNumbers = new Array(slice.length);\n      for (var i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      var byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    var blob = new Blob(byteArrays, {\n      type: contentType\n    });\n    return blob;\n  }\n  function loadTextDoc(fullFilePath) {\n    if (window.XMLHttpRequest) {\n      xhttp = new XMLHttpRequest();\n    } else {\n      xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    xhttp.overrideMimeType('application/text');\n    xhttp.open(\"GET\", fullFilePath, false);\n    xhttp.send();\n    return xhttp.responseText;\n  }\n  function loadXMLDoc(fullFilePath) {\n    if (window.XMLHttpRequest) {\n      xhttp = new XMLHttpRequest();\n    } else {\n      xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    xhttp.overrideMimeType('application/xml');\n    xhttp.open(\"GET\", fullFilePath, false);\n    xhttp.send();\n    return xhttp.responseXML;\n  }\n\n  // Should this be exposed or should this be moved to the helper functions section?\n  function textToXmlObject(text) {\n    if (window.ActiveXObject) {\n      var doc = new ActiveXObject('Microsoft.XMLDOM');\n      doc.async = 'false';\n      doc.loadXML(text);\n    } else {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(text, 'text/xml');\n    }\n    return doc;\n  }\n  // Helper functions End\n\n  var sbgnmlToJson, sbmlToJson, jsonToSbgnml, jsonToSbml, jsonToNwt, uiUtilities, tdToJson, sifToJson, graphUtilities, layoutToText, nwtToJson, jsonToSif, sbgnmlToCd, cdToSbgnml, sbgnmlToSbml, sbmlToSbgnml;\n  var updateGraph;\n  var options, cy;\n  function fileUtilities(param) {\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    sbmlToJson = param.sbmlToJsonConverter;\n    nwtToJson = param.nwtToJsonConverter;\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    jsonToSbml = param.jsonToSbmlConverter;\n    jsonToNwt = param.jsonToNwtConverter;\n    jsonToSif = param.jsonToSifConverter;\n    uiUtilities = param.uiUtilities;\n    tdToJson = param.tdToJsonConverter;\n    sifToJson = param.sifToJsonConverter;\n    layoutToText = param.layoutToText;\n    graphUtilities = param.graphUtilities;\n    updateGraph = graphUtilities.updateGraph.bind(graphUtilities);\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnCyInstance.getCy();\n    sbgnmlToCd = param.sbgnmlToCdConverter;\n    cdToSbgnml = param.cdToSbgnmlConverter;\n    sbgnmlToSbml = param.sbgnmlToSbmlConverter;\n    sbmlToSbgnml = param.sbmlToSbgnmlConverter;\n    gpmlToSbgnml = param.gpmlToSbgnmlConverter;\n    sbgnmlToGpml = param.sbgnmlToGpmlConverter;\n  }\n  fileUtilities.loadXMLDoc = loadXMLDoc;\n  fileUtilities.textToXmlObject = textToXmlObject;\n  fileUtilities.saveAsPng = function (filename, scale, bg, maxWidth, maxHeight) {\n    if (maxWidth || maxHeight) {\n      var pngContent = cy.png({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n    } else {\n      var pngContent = cy.png({\n        scale: scale || 3,\n        full: true,\n        bg: bg\n      });\n    }\n\n    // this is to remove the beginning of the pngContent: data:img/png;base64,\n    var b64data = pngContent.substr(pngContent.indexOf(\",\") + 1);\n\n    // lower quality when response is empty\n    if (!b64data || b64data === \"\") {\n      pngContent = cy.png({\n        maxWidth: 15000,\n        maxHeight: 15000,\n        full: true,\n        bg: bg\n      });\n      b64data = pngContent.substr(pngContent.indexOf(\",\") + 1);\n    }\n    saveAs(b64toBlob(b64data, \"image/png\"), filename || \"network.png\");\n  };\n  fileUtilities.saveAsJpg = function (filename, scale, bg, maxWidth, maxHeight, quality) {\n    if (maxWidth || maxHeight) {\n      var jpgContent = cy.jpg({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        quality: quality\n      });\n    } else {\n      var jpgContent = cy.jpg({\n        scale: scale || 3,\n        full: true,\n        bg: bg,\n        quality: quality\n      });\n    }\n\n    // this is to remove the beginning of the pngContent: data:img/png;base64,\n    var b64data = jpgContent.substr(jpgContent.indexOf(\",\") + 1);\n\n    // lower quality when response is empty\n    if (!b64data || b64data === \"\") {\n      jpgContent = cy.jpg({\n        maxWidth: 15000,\n        maxHeight: 15000,\n        full: true,\n        bg: bg\n      });\n      b64data = jpgContent.substr(jpgContent.indexOf(\",\") + 1);\n    }\n    saveAs(b64toBlob(b64data, \"image/jpg\"), filename || \"network.jpg\");\n  };\n  fileUtilities.saveAsSvg = function (filename, scale, bg, maxWidth, maxHeight) {\n    if (maxWidth || maxHeight) {\n      var svgContent = cy.svg({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n    } else {\n      var svgContent = cy.svg({\n        scale: scale || 1,\n        full: true,\n        bg: bg\n      });\n    }\n    saveAs(new Blob([svgContent], {\n      type: \"image/svg+xml;charset=utf-8\"\n    }), filename || \"network.svg\");\n  };\n  fileUtilities.loadSample = function (filename, folderpath, callback) {\n    var file = (folderpath || 'sample-app/samples/') + filename;\n    uiUtilities.startSpinner(\"load-spinner\");\n    // Users may want to do customized things while a sample is being loaded\n    // Trigger an event for this purpose and specify the 'filename' as an event parameter\n    $(document).trigger(\"sbgnvizLoadSample\", [filename, cy]); // Aliases for sbgnvizLoadSampleStart\n    $(document).trigger(\"sbgnvizLoadSampleStart\", [filename, cy]);\n    var text = loadTextDoc(file);\n    var matchResult = text.match(\"<renderInformation[^]*</renderInformation>\");\n    if (matchResult != null) {\n      var renderInfoString = matchResult[0];\n      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n      var regex = /\\s([\\S]+)([\\s]*)=/g;\n      var result;\n      var matches = [];\n      while (result = regex.exec(renderInfoString)) {\n        matches.push(result[0]);\n      }\n      ;\n      matches.forEach(function (match) {\n        renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));\n      });\n      text = text.replace(renderInfoStringCopy, renderInfoString);\n    }\n    var xmlObject = textToXmlObject(text);\n    setTimeout(function () {\n      updateGraph(nwtToJson.convert(xmlObject));\n      fileUtilities.collapseMarkedNodes();\n      uiUtilities.endSpinner(\"load-spinner\");\n      $(document).trigger(\"sbgnvizLoadSampleEnd\", [filename, cy]); // Trigger an event signaling that a sample is loaded\n      if (typeof callback !== 'undefined') {\n        callback();\n      }\n    }, 0);\n  };\n  fileUtilities.loadSIFFile = function (file, layoutBy, callback) {\n    var convert = function convert(text) {\n      return sifToJson.convert(text);\n    };\n    var runLayout = function runLayout() {\n      if (layoutBy) {\n        if (typeof layoutBy === 'function') {\n          layoutBy();\n        } else {\n          var layout = cy.layout(layoutBy);\n\n          // for backward compatibility need to make this if check\n          if (layout && layout.run) {\n            layout.run();\n          }\n        }\n      }\n      cy.fit(cy.elements(\":visible\"), 20);\n    };\n    fileUtilities.loadFile(file, convert, undefined, callback, undefined, runLayout);\n  };\n  fileUtilities.loadTDFile = function functionName(file, callback) {\n    var convert = function convert(text) {\n      return tdToJson.convert(text);\n    };\n    fileUtilities.loadFile(file, convert, undefined, callback);\n  };\n  fileUtilities.loadSBGNMLFile = function (file, callback1, callback2) {\n    var convert = function convert(text) {\n      return sbgnmlToJson.convert(textToXmlObject(text));\n    };\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  };\n  fileUtilities.loadNwtFile = function (file, callback1, callback2, urlParams) {\n    var convert = function convert(text) {\n      return nwtToJson.convert(textToXmlObject(text), urlParams);\n    };\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  };\n\n  // collapse the nodes whose collapse data field is set\n  fileUtilities.collapseMarkedNodes = function () {\n    // collapse nodes\n    var nodesToCollapse = cy.nodes(\"[collapse]\");\n    if (nodesToCollapse.length > 0) {\n      cy.expandCollapse('get').collapse(nodesToCollapse, {\n        layoutBy: null\n      });\n      nodesToCollapse.forEach(function (ele, i, eles) {\n        ele.position(ele.data(\"positionBeforeSaving\"));\n      });\n      nodesToCollapse.removeData(\"positionBeforeSaving\");\n    }\n  };\n\n  /*\n    callback is a function remotely defined to add specific behavior that isn't implemented here.\n    it is completely optional.\n    signature: callback(textXml)\n  */\n  fileUtilities.loadFile = function (file, convertFcn, callback1, callback2, callback3, callback4) {\n    var self = this;\n    console.log(\"loadFile spinner\");\n    uiUtilities.startSpinner(\"load-file-spinner\");\n    var textType = /text.*/;\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      var text = this.result;\n      var matchResult = text.match(\"<renderInformation[^]*</renderInformation>\");\n      if (matchResult != null) {\n        var imagesElementMatch = text.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n        var imagesElement;\n        if (imagesElementMatch != null) {\n          imagesElement = imagesElementMatch[0];\n        }\n        var renderInfoString = matchResult[0];\n        var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n        var regex = /\\s([\\S]+)([\\s]*)=/g;\n        var result;\n        var matches = [];\n        while (result = regex.exec(renderInfoString)) {\n          matches.push(result[0]);\n        }\n        ;\n        matches.forEach(function (match) {\n          renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));\n        });\n        text = text.replace(renderInfoStringCopy, renderInfoString);\n        var imagesElementMatchDirty = text.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n        if (imagesElementMatchDirty != null) {\n          text = text.replace(imagesElementMatchDirty[0], imagesElement);\n        }\n      }\n      setTimeout(function () {\n        if (typeof callback1 !== 'undefined') callback1(text);\n        var cyGraph;\n        try {\n          cyGraph = convertFcn(text);\n          // Users may want to do customized things while an external file is being loaded\n          // Trigger an event for this purpose and specify the 'filename' as an event parameter\n          $(document).trigger(\"sbgnvizLoadFile\", [file.name, cy]); // Aliases for sbgnvizLoadFileStart\n          $(document).trigger(\"sbgnvizLoadFileStart\", [file.name, cy]);\n        } catch (err) {\n          uiUtilities.endSpinner(\"load-file-spinner\");\n          console.log(err);\n          if (typeof callback2 !== 'undefined') callback2();\n          return;\n        }\n        updateGraph(cyGraph);\n        if (typeof callback3 !== 'undefined') {\n          callback3();\n        }\n        uiUtilities.endSpinner(\"load-file-spinner\");\n        $(document).trigger(\"sbgnvizLoadFileEnd\", [file.name, cy]); // Trigger an event signaling that a file is loaded\n\n        if (typeof callback4 !== 'undefined') {\n          callback4();\n        }\n      }, 0);\n    };\n    reader.readAsText(file);\n  };\n  fileUtilities.loadSBGNMLText = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(textData, tileInfoBoxes, filename, cy, urlParams) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return updateGraph(sbgnmlToJson.convert(textToXmlObject(textData), urlParams), undefined, undefined, tileInfoBoxes);\n          case 2:\n            _context.next = 4;\n            return $(document).trigger(\"sbgnvizLoadFileEnd\", [filename, cy]);\n          case 4:\n            uiUtilities.endSpinner(\"load-file-spinner\");\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2, _x3, _x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  fileUtilities.loadSBMLText = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(textData, tileInfoBoxes, filename, cy, urlParams) {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return updateGraph(sbmlToJson.convert(textToXmlObject(textData), urlParams), undefined, undefined, tileInfoBoxes);\n          case 2:\n            _context2.next = 4;\n            return $(document).trigger(\"sbgnvizLoadFileEnd\", [filename, cy]);\n          case 4:\n            uiUtilities.endSpinner(\"load-file-spinner\");\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x6, _x7, _x8, _x9, _x10) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  // supported versions are either 0.2 or 0.3\n  fileUtilities.saveAsSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, version, renderInfo, mapProperties, nodes, edges);\n    var blob = new Blob([sbgnmlText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.saveAsSbgnmlForSBML = function (filename, errorCallback) {\n    // We have sbml map typed nodes and edges in the cytoscape graph and we want to export to sbgnml\n    // Create sbml file first, then get the sbgnml from the Minerva conversion service\n    uiUtilities.startSpinner(\"load-file-spinner\");\n    var sbgnText = jsonToSbml.createSbml(filename);\n    //convert sbml to sbgnml\n    this.convertSbmlToSbgnml(sbgnText, function (data) {\n      if (!data.result) {\n        errorCallback();\n      } else {\n        var blob = new Blob([data.message], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-file-spinner\");\n    }.bind(this));\n  };\n\n  // supported versions are either 0.2 or 0.3\n  fileUtilities.saveAsNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToNwt.createNwt(filename, version, renderInfo, mapProperties, nodes, edges);\n    var blob = new Blob([sbgnmlText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.saveAsCellDesigner = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = jsonToSbgnml.createSbgnml();\n    this.convertSbgnmlToCD(sbgnml, function (data) {\n      if (data == null) {\n        errorCallback();\n      } else {\n        var blob = new Blob([data], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n  fileUtilities.loadCellDesigner = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      // this.convertCDToSbgnml(e.target.result, function(data){\n      cdToSbgnml.convert(e.target.result, function (data) {\n        uiUtilities.endSpinner(\"load-spinner\");\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n    uiUtilities.startSpinner(\"load-spinner\");\n    reader.readAsText(file);\n  };\n  fileUtilities.saveAsSbml = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = this.convertSbgn();\n    this.convertSbgnmlToSbml(sbgnml, function (data) {\n      if (!data.result) {\n        errorCallback(sbgnml, data.error);\n      } else if (data.message.indexOf(\"Internal server error\") !== -1) {\n        errorCallback(sbgnml, data.message);\n      } else {\n        var blob = new Blob([data.message], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n  fileUtilities.saveSbmlForSBML = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    try {\n      var sbgnText = jsonToSbml.createSbml(filename);\n      var blob = new Blob([sbgnText], {\n        type: \"text/plain;charset=utf-8;\"\n      });\n      saveAs(blob, filename);\n    } catch (err) {\n      errorCallback();\n    }\n    uiUtilities.endSpinner(\"load-spinner\");\n  };\n  fileUtilities.hasLayoutSBML = function (file) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n      var layoutFound = false;\n      reader.onload = function (e) {\n        var text = this.result;\n        var matchResult = text.match(/<[^>]*listOfLayouts[^>]*>[\\s\\S]*<\\/[^>]*listOfLayouts[^>]*>/);\n        if (matchResult != null) {\n          layoutFound = true;\n        }\n        resolve(layoutFound);\n      };\n      reader.onerror = function () {\n        reject(new Error(\"Failed to read the file\"));\n      };\n      reader.readAsText(file);\n    });\n  };\n  fileUtilities.loadSbmlForSBML = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(file, callback1, callback2, layoutBy) {\n      var convert, runLayout, layoutFound;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            convert = function convert(text) {\n              var converted = sbmlToJson.convert(text);\n              return converted;\n            };\n            runLayout = function runLayout() {\n              if (layoutBy) {\n                if (typeof layoutBy === 'function') {\n                  layoutBy();\n                } else {\n                  var layout = cy.layout(layoutBy);\n\n                  // for backward compatibility need to make this if check\n                  if (layout && layout.run) {\n                    layout.run();\n                  }\n                }\n              }\n              cy.fit(cy.elements(\":visible\"), 20);\n            };\n            _context3.next = 4;\n            return fileUtilities.hasLayoutSBML(file);\n          case 4:\n            layoutFound = _context3.sent;\n            if (layoutFound) {\n              fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes, undefined);\n            } else {\n              fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes, runLayout);\n            }\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function (_x11, _x12, _x13, _x14) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  fileUtilities.loadSbml = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      this.convertSbmlToSbgnml(e.target.result, function (data) {\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n    reader.readAsText(file);\n  };\n  fileUtilities.saveAsGpml = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = this.convertSbgn();\n    this.convertSbgnmlToGpml(sbgnml, function (data) {\n      if (!data.result) {\n        errorCallback(sbgnml, data.error);\n      } else if (data.message.indexOf(\"Internal server error\") !== -1) {\n        errorCallback(sbgnml, data.message);\n      } else {\n        var blob = new Blob([data.message], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n  fileUtilities.loadGpml = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      gpmlToSbgnml.convert(e.target.result, function (data) {\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n    reader.readAsText(file);\n  };\n  fileUtilities.convertSbgn = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, version, renderInfo, mapProperties, nodes, edges, hidden);\n    return sbgnmlText;\n  };\n  fileUtilities.exportLayoutData = function (filename, byName) {\n    var layoutText = layoutToText.convert(byName);\n    var blob = new Blob([layoutText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.saveAsPlainSif = function (filename) {\n    var text = jsonToSif.convert();\n    var blob = new Blob([text], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.convertSbgnmlTextToJson = function (sbgnmlText) {\n    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n  fileUtilities.convertSbmlTextToJson = function (sbgnmlText) {\n    return sbmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n  fileUtilities.convertSifTextToJson = function (sifText) {\n    return sifToJson.convert(sifText);\n  };\n  fileUtilities.createJsonFromSBGN = function () {\n    var sbgnmlText = jsonToSbgnml.createSbgnml();\n    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n  fileUtilities.createJsonFromSBML = function () {\n    var sbgnmlText = jsonToSbgnml.createSbgnml(); //SBML\n    var converted_ = sbmlToJson.convert(textToXmlObject(sbgnmlText));\n    console.log(\"converted_\", converted_);\n    return converted_;\n  };\n  fileUtilities.createJsonFromSif = function () {\n    var sifText = jsonToSif.convert();\n    return sifToJson.convert(sifText);\n  };\n  fileUtilities.convertSbgnmlToCD = function (sbgnml, callback) {\n    return sbgnmlToCd.convert(sbgnml, callback);\n  };\n  fileUtilities.convertCDToSbgnml = function (xml, callback) {\n    return cdToSbgnml.convert(xml, callback);\n  };\n  fileUtilities.convertSbgnmlToSbml = function (sbgnml, callback) {\n    return sbgnmlToSbml.convert(sbgnml, callback);\n  };\n  fileUtilities.convertSbmlToSbgnml = function (sbml, callback) {\n    return sbmlToSbgnml.convert(sbml, callback);\n  };\n  fileUtilities.convertGpmlToSbgnml = function (gpml, callback) {\n    return gpmlToSbgnml.convert(gpml, callback);\n  };\n  fileUtilities.convertSbgnmlToGpml = function (sbgnml, callback) {\n    return sbgnmlToGpml.convert(sbgnml, callback);\n  };\n  return fileUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/file-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/gpml-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/gpml-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function gpmlToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  gpmlToSbgnml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-dev.lcsb.uni.lu/minerva/api/convert/GPML:SBGN-ML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"application/xml\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return gpmlToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2dwbWwtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsImdwbWxUb1NiZ25tbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvZ3BtbC10by1zYmdubWwtY29udmVydGVyLWZhY3RvcnkuanM/YmEwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXG4gIHZhciBqc29uVG9TYmdubWwsIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xuXG4gIGZ1bmN0aW9uIGdwbWxUb1NiZ25tbChwYXJhbSkge1xuICAgIGpzb25Ub1NiZ25tbCA9IHBhcmFtLmpzb25Ub1NiZ25tbENvbnZlcnRlcjtcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XG4gIH1cblxuXG4gIGdwbWxUb1NiZ25tbC5jb252ZXJ0ID0gZnVuY3Rpb24gKHhtbCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBjb252ZXJzaW9uQXBpVXJsID0gXCJodHRwczovL21pbmVydmEtZGV2Lmxjc2IudW5pLmx1L21pbmVydmEvYXBpL2NvbnZlcnQvR1BNTDpTQkdOLU1MXCI7XG5cbiAgICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICB1cmw6IGNvbnZlcnNpb25BcGlVcmwsXG4gICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veG1sXCIsXG4gICAgICAgICAgZGF0YTogeG1sLFxuICAgICAgICAgIGRhdGFUeXBlOiBcInRleHRcIixcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSwgdGV4dFN0YXR1cywgeGhyKSB7XG4gICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZGF0YSwgbWVzc2FnZTogXCJJbnZhbGlkIHJlc3BvbnNlIGNvZGU6IFwiICsgeGhyLnN0YXR1c30pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogdHJ1ZSwgbWVzc2FnZTogZGF0YSwgZXJyb3I6IFwiXCJ9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmYWlsOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBlcnJvciwgbWVzc2FnZTogXCJcIn0pO1xuICAgICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgXG4gIH1cblxuICByZXR1cm4gZ3BtbFRvU2Jnbm1sO1xuXG59XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFXO0VBRTFCLElBQUlDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLEVBQUU7RUFFdEMsU0FBU0MsWUFBWUEsQ0FBQ0MsS0FBSyxFQUFFO0lBQzNCSixZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXFCO0lBQzFDSixnQkFBZ0IsR0FBR0csS0FBSyxDQUFDSCxnQkFBZ0I7SUFDekNDLEVBQUUsR0FBR0UsS0FBSyxDQUFDRSxjQUFjLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0VBR0FKLFlBQVksQ0FBQ0ssT0FBTyxHQUFHLFVBQVVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO0lBQzVDLElBQUlDLGdCQUFnQixHQUFHLGtFQUFrRTtJQUV6RixPQUFPQyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNWQyxJQUFJLEVBQUUsTUFBTTtNQUNaQyxHQUFHLEVBQUVKLGdCQUFnQjtNQUNyQkssV0FBVyxFQUFFLGlCQUFpQjtNQUM5QkMsSUFBSSxFQUFFUixHQUFHO01BQ1RTLFFBQVEsRUFBRSxNQUFNO01BQ2hCQyxPQUFPLEVBQUUsU0FBQUEsUUFBVUYsSUFBSSxFQUFFRyxVQUFVLEVBQUVDLEdBQUcsRUFBRTtRQUN0QyxJQUFJQSxHQUFHLENBQUNDLE1BQU0sS0FBSyxHQUFHLEVBQUU7VUFDcEJaLFFBQVEsQ0FBQztZQUFDYSxNQUFNLEVBQUUsS0FBSztZQUFFQyxLQUFLLEVBQUVQLElBQUk7WUFBRVEsT0FBTyxFQUFFLHlCQUF5QixHQUFHSixHQUFHLENBQUNDO1VBQU0sQ0FBQyxDQUFDO1FBQzNGLENBQUMsTUFBTTtVQUNIWixRQUFRLENBQUM7WUFBQ2EsTUFBTSxFQUFFLElBQUk7WUFBRUUsT0FBTyxFQUFFUixJQUFJO1lBQUVPLEtBQUssRUFBRTtVQUFFLENBQUMsQ0FBQztRQUN0RDtNQUNKLENBQUM7TUFDREEsS0FBSyxFQUFFLFNBQUFBLE1BQVVBLE1BQUssRUFBRTtRQUNwQmQsUUFBUSxDQUFDO1VBQUNhLE1BQU0sRUFBRSxLQUFLO1VBQUVDLEtBQUssRUFBRUEsTUFBSztVQUFFQyxPQUFPLEVBQUU7UUFBRSxDQUFDLENBQUM7TUFDeEQsQ0FBQztNQUNEQyxJQUFJLEVBQUUsU0FBQUEsS0FBVUYsS0FBSyxFQUFFO1FBQ25CZCxRQUFRLENBQUM7VUFBQ2EsTUFBTSxFQUFFLEtBQUs7VUFBRUMsS0FBSyxFQUFFQSxLQUFLO1VBQUVDLE9BQU8sRUFBRTtRQUFFLENBQUMsQ0FBQztNQUN4RDtJQUNKLENBQUMsQ0FBQztFQUVOLENBQUM7RUFFRCxPQUFPdEIsWUFBWTtBQUVyQixDQUFDIiwiaWdub3JlTGlzdCI6W119\n//# sourceURL=webpack-internal:///./src/utilities/gpml-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/graph-utilities-factory.js":
/*!**************************************************!*\
  !*** ./src/utilities/graph-utilities-factory.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Common utilities for sbgnviz graphs\n */\n\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var optionUtilities;\n  var options, cy;\n  function graphUtilities(param) {\n    optionUtilities = param.optionUtilities;\n    elementUtilities = param.elementUtilities;\n    options = optionUtilities.getOptions();\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  // TODO make these initial values user options instead of hardcoding them here\n  graphUtilities.portsEnabled = true;\n  graphUtilities.compoundSizesConsidered = true;\n  graphUtilities.disablePorts = function () {\n    graphUtilities.portsEnabled = false;\n    cy.style().update();\n  };\n  graphUtilities.enablePorts = function () {\n    graphUtilities.portsEnabled = true;\n    cy.style().update();\n  };\n  graphUtilities.arePortsEnabled = function () {\n    return graphUtilities.portsEnabled;\n  };\n  graphUtilities.considerCompoundSizes = function () {\n    graphUtilities.compoundSizesConsidered = true;\n    cy.style().update();\n  };\n  graphUtilities.omitCompoundSizes = function () {\n    graphUtilities.compoundSizesConsidered = false;\n    cy.style().update();\n  };\n  graphUtilities.areCompoundSizesConsidered = function () {\n    return graphUtilities.compoundSizesConsidered == true;\n  };\n  graphUtilities.updateGraph = function (cyGraph, callback, layoutOptions, tileInfoBoxes) {\n    var isLayoutRequired;\n    if (layoutOptions === undefined) {\n      isLayoutRequired = false;\n    } else {\n      isLayoutRequired = true;\n    }\n    $(document).trigger(\"updateGraphStart\", cy);\n    // Reset undo/redo stack and buttons when a new graph is loaded\n    if (options.undoable) {\n      cy.undoRedo().reset();\n      //    this.resetUndoRedoButtons();\n    }\n    cy.startBatch();\n    // clear data\n    cy.remove(\"*\");\n    cy.add(cyGraph);\n\n    //add position information to data for preset layout\n    var positionMap = {};\n    cy.nodes().not(\":parent\").forEach(function (node) {\n      var xPos = node.data(\"bbox\").x;\n      var yPos = node.data(\"bbox\").y;\n      positionMap[node.data(\"id\")] = {\n        x: xPos,\n        y: yPos\n      };\n    });\n    cy.nodes().forEach(function (node) {\n      // assign correct parents to info boxes\n      var statesandinfos = node.data(\"statesandinfos\");\n      for (var j = 0; j < statesandinfos.length; j++) {\n        classes.getAuxUnitClass(statesandinfos[j]).setParentRef(statesandinfos[j], node);\n      }\n    });\n\n    // change parent of PNClass nodes based on neighbor majority if inferNestingOnLoad is enabled and node has no parent\n    if (options.inferNestingOnLoad) {\n      cy.nodes().forEach(function (node) {\n        if (elementUtilities.isPNClass(node) && node.parent().length == 0) {\n          var processParentMap = new Map();\n          node.neighborhood().nodes().forEach(function (neighbor) {\n            if (processParentMap.has(neighbor.parent().id())) processParentMap.set(neighbor.parent().id(), processParentMap.get(neighbor.parent().id()) + 1);else processParentMap.set(neighbor.parent().id(), 1);\n          });\n          // find the max occurrence\n          var max_count = 0,\n            result = null;\n          processParentMap.forEach(function (value, key) {\n            if (max_count < value || max_count == value && result == undefined) {\n              result = key;\n              max_count = value;\n            }\n          });\n          node.move({\n            parent: result\n          });\n        }\n      });\n    }\n\n    //this.refreshPaddings(); // Recalculates/refreshes the compound paddings\n    cy.endBatch();\n    if (isLayoutRequired) {\n      var preferences = {};\n      if (cy.nodes().length > 3000 || cy.edges().length > 3000) {\n        preferences.quality = \"draft\";\n      }\n      preferences.animate = false;\n      preferences.randomize = true;\n      preferences = $.extend({}, layoutOptions, preferences);\n      var layout = cy.layout(preferences);\n    } else {\n      var layout = cy.layout({\n        name: \"preset\",\n        positions: positionMap,\n        fit: true,\n        padding: 20\n      });\n    }\n\n    // Check this for cytoscape.js backward compatibility\n    if (layout && layout.run) {\n      layout.run();\n    }\n    var performLayout = function performLayout() {\n      cy.fit(cy.elements(\":visible\"), 20);\n    };\n    // Update the style\n    cy.style().update();\n    // Initilize the anchor points once the elements are created\n    if (cy.edgeEditing && cy.edgeEditing(\"initialized\")) {\n      cy.edgeEditing(\"get\").initAnchorPoints(cy.edges());\n    }\n    $(document).trigger(\"updateGraphEnd\", [cy, isLayoutRequired || tileInfoBoxes, performLayout]);\n    if (callback) callback();\n  };\n  graphUtilities.calculatePaddings = function (paddingPercent) {\n    //As default use the compound padding value\n    if (!paddingPercent) {\n      var compoundPadding = options.compoundPadding;\n      paddingPercent = typeof compoundPadding === \"function\" ? compoundPadding.call() : compoundPadding;\n    }\n    var nodes = cy.nodes();\n    var total = 0;\n    var numOfSimples = 0;\n    for (var i = 0; i < nodes.length; i++) {\n      var theNode = nodes[i];\n      if (theNode.children() == null || theNode.children().length == 0) {\n        total += Number(theNode.width());\n        total += Number(theNode.height());\n        numOfSimples++;\n      }\n    }\n    var calc_padding = paddingPercent / 100 * Math.floor(total / (2 * numOfSimples));\n    if (calc_padding < 5) {\n      calc_padding = 5;\n    }\n    return calc_padding;\n  };\n  graphUtilities.recalculatePaddings = graphUtilities.refreshPaddings = function () {\n    // this.calculatedPaddings is not working here\n    // TODO: replace this reference with this.calculatedPaddings once the reason is figured out\n    //graphUtilities.calculatedPaddings = this.calculatePaddings();\n    var compoundPadding = options.compoundPadding;\n    return typeof compoundPadding === \"function\" ? compoundPadding.call() : compoundPadding;\n    //return graphUtilities.calculatedPaddings;\n  };\n  graphUtilities.getCompoundPaddings = function () {\n    // Return calculated paddings in case of that data is invalid return 5\n    var compoundPadding = options.compoundPadding;\n    return typeof compoundPadding === \"function\" ? compoundPadding.call() : compoundPadding;\n\n    //return graphUtilities.calculatedPaddings || 5;\n  };\n  return graphUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/graph-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-nwt-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-nwt-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nmodule.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function jsonToNwt(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  function setToStr(set) {\n    if (set) {\n      return Object.keys(set).join(';');\n    }\n    return null;\n  }\n  var sifEdgePropHandlerMap = {\n    'pcIDs': function pcIDs(edge) {\n      return setToStr(edge.data('pcIDSet'));\n    },\n    'siteLocations': function siteLocations(edge) {\n      return setToStr(edge.data('siteLocSet'));\n    }\n  };\n  var sifNodePropHandlerMap = {\n    'tooltip': function tooltip(node) {\n      return node.data('tooltip');\n    },\n    'infoboxes': function infoboxes(node, obj) {\n      var sifInfoboxPropHandlerMap = {\n        'tooltip': function tooltip(infobox) {\n          return infobox.tooltip;\n        }\n      };\n      var infoboxes = node.data('statesandinfos');\n      var glyphs = obj.glyph;\n      infoboxes.forEach(function (infobox, i) {\n        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {\n          var val = sifInfoboxPropHandlerMap[propName](infobox);\n          if (val) {\n            glyphs[i][propName] = val;\n          }\n        });\n      });\n    }\n  };\n\n  // objects consist of arcs or gylphs\n  function extendObjectsData(objs, filterFcn, propHandlerMap) {\n    if (!objs) {\n      return;\n    }\n    objs.forEach(function (obj) {\n      if (filterFcn(obj.$[\"class\"])) {\n        var ele = cy.getElementById(obj.$.id);\n        Object.keys(propHandlerMap).forEach(function (propName) {\n          // does not have to return a value, maybe a void function as well\n          var val = propHandlerMap[propName](ele, obj);\n          if (val) {\n            obj[propName] = val;\n          }\n        });\n      }\n    });\n  }\n  function extendStylesData(toExtend, extendFrom) {\n    if (!toExtend || !extendFrom) {\n      return;\n    }\n    var styleNames = ['shapeName'];\n    var styleMap = {};\n    Object.keys(extendFrom).forEach(function (key) {\n      styleNames.forEach(function (name) {\n        var el = extendFrom[key];\n        var props = el && el.properties;\n        if (props && props[name]) {\n          var val = props[name];\n          var idList = el.idList;\n          idList.forEach(function (id) {\n            styleMap[id] = styleMap[id] || {};\n            styleMap[id][name] = val;\n          });\n        }\n      });\n    });\n    toExtend.forEach(function (style) {\n      var idList = style.$.idList.split(' ');\n      styleNames.forEach(function (name) {\n        var val = null;\n        idList.forEach(function (id) {\n          var currVal = styleMap[id] && styleMap[id][name];\n          if (currVal === undefined) {\n            return;\n          }\n          if (val == null) {\n            val = currVal;\n          } else if (val !== currVal) {\n            console.warn('Shape name of some glyphs defined multiple times in render information!');\n          }\n        });\n        if (val !== null) {\n          style.g.$[name] = val;\n        }\n      });\n    });\n  }\n  jsonToNwt.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n    if (elementUtilities.mapType !== 'PD' && elementUtilities.mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn' && elementUtilities.mapType !== 'SBML') {\n      var map = jsObj.map[0];\n      var arcs = map.arc;\n      var glyphs = map.glyph;\n      extendObjectsData(arcs, elementUtilities.isSIFEdge, sifEdgePropHandlerMap);\n      extendObjectsData(glyphs, elementUtilities.isSIFNode, sifNodePropHandlerMap);\n      var jsObjStyles = (map && map.extension && map.extension.renderInformation && map.extension.renderInformation.listOfStyles).style;\n      var appStyles = renderInfo && renderInfo.styles;\n      extendStylesData(jsObjStyles, appStyles);\n    }\n    return jsObj;\n  };\n  jsonToNwt.createNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToNwt.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n    return jsonToSbgnml.buildString({\n      sbgn: jsObj\n    });\n  };\n  return jsonToNwt;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-nwt-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/json-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nvar libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\nvar renderExtension = libsbgnjs.render;\nvar annot = libsbgnjs.annot;\nvar pkgVersion = (__webpack_require__(/*! ../../package.json */ \"./package.json\").version); // need info about sbgnviz to put in xml\nvar pkgName = (__webpack_require__(/*! ../../package.json */ \"./package.json\").name);\nvar prettyprint = (__webpack_require__(/*! pretty-data */ \"pretty-data\").pd);\nvar xml2js = __webpack_require__(/*! xml2js */ \"xml2js\");\nvar mapPropertiesBuilder = new xml2js.Builder({\n  rootName: \"nwt:mapProperties\"\n});\nvar compoundExtensionBuilder = new xml2js.Builder({\n  rootName: \"nwt:extraInfo\"\n});\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, experimentalDataOverlay;\n  var cy;\n\n  /*\n      takes renderInfo as an optional argument. It contains all the information needed to save\n      the style and colors to the render extension. See newt/app-utilities getAllStyles()\n      Structure: {\n          background: the map background color,\n          colors: {\n            validXmlValue: color_id\n            ...\n          },\n          styles: {\n              styleKey1: {\n                  idList: list of the nodes ids that have this style\n                  properties: {\n                      fontSize: ...\n                      fill: ...\n                      ...\n                  }\n              }\n              styleKey2: ...\n              ...\n          }\n      }\n  */\n  function jsonToSbgnml(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  /*\n   version is either 0.2 or 0.3 or plain, 0.3 used as default if none provided.\n   Only difference right now is that <map> element doesn't have an id attribute in 0.2, and has on in 0.3.\n   Serious changes occur between the format version for submaps content. Those changes are not implemented yet.\n   TODO implement 0.3 changes when submap support is fully there.\n   */\n  jsonToSbgnml.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var _this = this;\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    return function (edges) {\n      var self = _this;\n      var mapID = textUtilities.getXMLValidId(filename);\n      var hasExtension = false;\n      var hasRenderExtension = false;\n      var mapType = mapProperties && mapProperties.mapType || elementUtilities.mapType;\n      _this.nodes = nodes || cy.nodes();\n      _this.edges = edges || cy.edges();\n      var id = [];\n      var i = 0;\n      //console.log(\"this.nodes\",this.nodes)\n      _this.nodes.forEach(function (node) {\n        return function () {\n          id[i] = node._private.data.id;\n          i++;\n        };\n      });\n      var collapsedChildren = elementUtilities.getAllCollapsedChildrenRecursively(_this.nodes);\n      _this.allCollapsedNodes = collapsedChildren.filter(\"node\");\n      _this.allCollapsedEdges = collapsedChildren.filter(\"edge\");\n      if (typeof renderInfo !== 'undefined') {\n        hasExtension = true;\n        hasRenderExtension = true;\n      }\n      if (typeof version === 'undefined') {\n        // default if not specified\n        version = \"0.3\";\n      }\n\n      // check version validity\n      if (version !== \"0.2\" && version !== \"0.3\" && version !== \"plain\" && version !== \"plain3\") {\n        console.error(\"Invalid SBGN-ML version provided. Expected 0.2, 0.3, plain or plain3, got: \" + version);\n        return \"Error\";\n      }\n      var mapLanguage = elementUtilities.mapTypeToLanguage(mapType);\n\n      //add headers\n      xmlHeader = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\";\n      var versionNo;\n      if (version === \"plain\") {\n        versionNo = \"0.2\";\n      } else if (version === \"plain3\") {\n        versionNo = \"0.3\";\n      } else {\n        versionNo = version;\n      }\n      //var versionNo = (version === \"plain\") ? \"0.2\" : version;\n      console.log(\"Version number\", versionNo);\n      var sbgn = new libsbgnjs.Sbgn({\n        xmlns: 'http://sbgn.org/libsbgn/' + versionNo\n      });\n      var map;\n      if (version === \"0.3\" || version === \"plain3\") {\n        var map = new libsbgnjs.Map({\n          language: mapLanguage,\n          id: mapID\n        });\n      } else if (version === \"0.2\" || version === \"plain\") {\n        var map = new libsbgnjs.Map({\n          language: mapLanguage\n        });\n      }\n      if (hasExtension) {\n        // extension is there\n        var extension = new libsbgnjs.Extension();\n        if (hasRenderExtension) {\n          extension.add(self.getRenderExtensionSbgnml(renderInfo));\n        }\n        map.setExtension(extension);\n        if (mapProperties) {\n          delete mapProperties.experimentDescription;\n          mapProperties.$ = {\n            \"xmlns:nwt\": \"https://newteditor.org/\"\n          };\n          var xml = mapPropertiesBuilder.buildObject(mapProperties);\n          map.extension.add(xml);\n        }\n      } else if (mapProperties) {\n        map.setExtension(new libsbgnjs.Extension());\n        mapProperties.$ = {\n          \"xmlns:nwt\": \"https://newteditor.org/\"\n        };\n        var xml = mapPropertiesBuilder.buildObject(mapProperties);\n        map.extension.add(xml);\n      }\n\n      // get all glyphs\n      var glyphList = [];\n      // be careful that :visible is also used during recursive search of nodes\n      // in the getGlyphSbgnml function. If not set accordingly, discrepancies will occur.\n      var self = _this;\n      _this.nodes.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        if (jsonToSbgnml.childOfNone(ele, self.nodes)) {\n          var vis = true;\n          if (hidden) vis = id.includes(ele._private.data.id);\n          glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version, vis)); // returns potentially more than 1 glyph\n        }\n      });\n      // add them to the map\n      for (var i = 0; i < glyphList.length; i++) {\n        if (version === \"plain\" && !hidden) glyphList[i].extension = null;\n        if (glyphList[i] != undefined) map.addGlyph(glyphList[i]);\n      }\n      // get all arcs\n      var edges = _this.allCollapsedEdges.union(_this.edges);\n      edges.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        var arc = self.getArcSbgnml(ele, version, hidden);\n        if (version === \"plain\" && (!hidden || hidden && ele.visible())) arc.extension = null;\n        map.addArc(arc);\n      });\n      sbgn.addMap(map);\n      return sbgn.buildJsObj();\n    }(edges);\n  };\n  jsonToSbgnml.createSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges, hidden);\n    return jsonToSbgnml.buildString({\n      sbgn: jsObj\n    });\n  };\n\n  // Copies and extends buildString() of https://github.com/sbgn/libsbgn.js/blob/master/src/utilities.js\n  jsonToSbgnml.buildString = function (obj) {\n    var xmlString = new xml2js.Builder({\n      headless: true,\n      renderOpts: {\n        pretty: false\n      }\n    }).buildObject(obj);\n\n    // change naming convention from Camel Case (variableName) to Kebab case (variable-name)\n    var matchResult = xmlString.match(\"<renderInformation[^]*</renderInformation>\");\n    if (matchResult != null) {\n      var imagesElementMatch = xmlString.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n      var imagesElement;\n      if (imagesElementMatch != null) {\n        imagesElement = imagesElementMatch[0];\n      }\n      var renderInfoString = matchResult[0];\n      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n      var regex = /\\s([\\S]+)([\\s]*)=/g;\n      var result;\n      var matches = [];\n      while (result = regex.exec(renderInfoString)) {\n        matches.push(result[0]);\n      }\n      ;\n      matches.forEach(function (match) {\n        if (match != \" idList=\") renderInfoString = renderInfoString.replace(match, textUtilities.FromCamelToKebabCase(match));\n      });\n      xmlString = xmlString.replace(renderInfoStringCopy, renderInfoString);\n      var imagesElementMatchDirty = xmlString.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n      if (imagesElementMatchDirty != null) {\n        xmlString = xmlString.replace(imagesElementMatchDirty[0], imagesElement);\n      }\n    }\n\n    /* \tdirty hack needed to solve the newline char encoding problem\n    \txml2js doesn't encode \\n as &#xA; we need to do it manually\n    */\n    var re = /<label text=\"((.|\\n+)+?)\"/gm;\n    var xmlString_correctLabel = xmlString.replace(re, function (match, p1, p2) {\n      return '<label text=\"' + p1.replace(/\\n/g, \"&#xA;\") + '\"';\n    });\n    var xmlHeader = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\";\n    /*\n      prettyprint puts a line break inside the root <sbgn> tag before the xmlns attribute.\n      This is perfecly valid, but Vanted doesn't like it and cannot load those files as is.\n      This line break is removed here to make Newt output directly compatible with Vanted. This issue will be reported\n      to the Vanted guys and hopefully fixed at some point. After that the following workaround can be removed.\n    */\n    var xmlbody = prettyprint.xml(xmlString_correctLabel).replace(\"<sbgn \\n  xmlns=\\\"http://sbgn.org/libsbgn\", \"<sbgn xmlns=\\\"http://sbgn.org/libsbgn\");\n    return xmlHeader + xmlbody;\n  };\n\n  // see createSbgnml for info on the structure of renderInfo\n  jsonToSbgnml.getRenderExtensionSbgnml = function (renderInfo) {\n    // initialize the main container\n    var renderInformation = new renderExtension.RenderInformation({\n      id: 'renderInformation',\n      backgroundColor: renderInfo.background,\n      programName: pkgName,\n      programVersion: pkgVersion\n    });\n\n    // populate list of colors\n    var listOfColorDefinitions = new renderExtension.ListOfColorDefinitions();\n    for (var color in renderInfo.colors) {\n      var colorDefinition = new renderExtension.ColorDefinition({\n        id: renderInfo.colors[color],\n        value: color\n      });\n      listOfColorDefinitions.addColorDefinition(colorDefinition);\n    }\n    renderInformation.setListOfColorDefinitions(listOfColorDefinitions);\n\n    // populate list of background images\n    var listOfBackgroundImages = new renderExtension.ListOfBackgroundImages();\n    if (!(Object.keys(experimentalDataOverlay.getParsedDataMap()).length > 0)) {\n      for (var img in renderInfo.images) {\n        var backgroundImage = new renderExtension.BackgroundImage({\n          id: renderInfo.images[img],\n          value: img\n        });\n        listOfBackgroundImages.addBackgroundImage(backgroundImage);\n      }\n    }\n    renderInformation.setListOfBackgroundImages(listOfBackgroundImages);\n\n    // populates styles\n    var listOfStyles = new renderExtension.ListOfStyles();\n    for (var key in renderInfo.styles) {\n      var style = renderInfo.styles[key];\n      var properties = {};\n      for (var prop in style.properties) {\n        if (style.properties[prop] !== '') {\n          properties[prop] = style.properties[prop];\n        }\n      }\n      var xmlStyle = new renderExtension.Style({\n        id: textUtilities.getXMLValidId(key),\n        idList: style.idList.join(' ')\n      });\n      var g = new renderExtension.RenderGroup(properties);\n      xmlStyle.setRenderGroup(g);\n      listOfStyles.addStyle(xmlStyle);\n    }\n    renderInformation.setListOfStyles(listOfStyles);\n    return renderInformation;\n  };\n  jsonToSbgnml.getAnnotationExtension = function (cyElement) {\n    var annotations = cyElement.data('annotations');\n    var annotExt = new annot.Annotation();\n    var rdfElement = new annot.RdfElement();\n    for (var annotID in annotations) {\n      var currentAnnot = annotations[annotID];\n\n      // check validity of annotation\n      if (currentAnnot.status != 'validated' || !currentAnnot.selectedDB || !currentAnnot.annotationValue) {\n        continue;\n      }\n\n      // check if uncontrolled vocabulary\n      if (currentAnnot.selectedRelation == \"sio:SIO_000223\") {\n        var obj = {};\n        obj[currentAnnot.selectedDB] = currentAnnot.annotationValue;\n        rdfElement.addCustomProperty('#' + cyElement.data('id'), obj);\n      } else {\n        var obj = {};\n        obj[currentAnnot.selectedRelation] = currentAnnot.annotationValue;\n        rdfElement.addResource('#' + cyElement.data('id'), obj);\n      }\n    }\n    annotExt.setRdfElement(rdfElement);\n    return annotExt;\n  };\n  jsonToSbgnml.getGlyphSbgnml = function (node, version) {\n    var visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    console.log(\"Saving With the changes\");\n    var self = this;\n    var nodeClass = node._private.data[\"class\"];\n    var glyphList = [];\n    if (!visible && !node.visible()) return;\n    if (nodeClass.startsWith('BA')) {\n      nodeClass = \"biological activity\";\n    }\n\n    // Workaround: In application we use 'empty set' class but SBGN-ML files \n    // use 'source and sink' so we read and write as 'source and sink'\n    if (nodeClass === \"empty set\") {\n      nodeClass = \"source and sink\";\n    }\n    var glyph = new libsbgnjs.Glyph({\n      id: node._private.data.id,\n      class_: nodeClass\n    });\n\n    // assign compartmentRef\n    if (node.parent() && node.parent().length > 0) {\n      if (nodeClass === \"compartment\") {\n        var parent = node.parent();\n        glyph.compartmentRef = node._private.data.parent;\n      } else {\n        var parent = node.parent()[0];\n        if (parent._private.data[\"class\"] == \"compartment\" || parent._private.data[\"class\"] === 'complex sbml') glyph.compartmentRef = parent._private.data.id;\n      }\n    }\n\n    // misc information\n    var label = node._private.data.label;\n    if (typeof label != 'undefined') glyph.setLabel(new libsbgnjs.Label({\n      text: label\n    }));\n    //add clone information\n    if (typeof node._private.data.clonemarker != 'undefined') glyph.setClone(new libsbgnjs.CloneType());\n    //add bbox information\n    glyph.setBbox(this.addGlyphBbox(node));\n    if (node.isParent() || node.data()[\"class\"] == 'topology group' || node.data()[\"class\"] == 'submap' || node.data()[\"class\"] == 'complex' || node.data()[\"class\"] == 'compartment') {\n      var extraInfo = {};\n      extraInfo.w = node.width();\n      extraInfo.h = node.height();\n      extraInfo.minW = Number(node.css(\"min-width\").replace(\"px\", \"\"));\n      extraInfo.minH = Number(node.css(\"min-height\").replace(\"px\", \"\"));\n      extraInfo.WLBias = Number(node.css(\"min-width-bias-left\").replace(\"px\", \"\"));\n      extraInfo.WRBias = Number(node.css(\"min-width-bias-right\").replace(\"px\", \"\"));\n      extraInfo.HTBias = Number(node.css(\"min-height-bias-top\").replace(\"px\", \"\"));\n      extraInfo.HBBias = Number(node.css(\"min-height-bias-bottom\").replace(\"px\", \"\"));\n      glyph.setExtension(new libsbgnjs.Extension());\n      extraInfo.$ = {\n        \"xmlns:nwt\": \"https://newteditor.org/\"\n      };\n      var extraInfoXml = compoundExtensionBuilder.buildObject(extraInfo);\n      glyph.extension.add(extraInfoXml);\n    }\n\n    //add port information\n    var ports = node._private.data.ports;\n    for (var i = 0; i < ports.length; i++) {\n      var orientation = ports[i].x === 0 ? 'vertical' : 'horizontal';\n      // This is the ratio of the area occupied for ports over the whole shape\n      var ratio = orientation === 'vertical' ? Math.abs(ports[i].y) / 50 : Math.abs(ports[i].x) / 50;\n\n      // Divide the node sizes by the ratio because that sizes includes ports as well\n      var x = node._private.position.x + ports[i].x * (node.width() / ratio) / 100;\n      var y = node._private.position.y + ports[i].y * (node.height() / ratio) / 100;\n      glyph.addPort(new libsbgnjs.Port({\n        id: ports[i].id,\n        x: x,\n        y: y\n      }));\n    }\n    //add state and info box information\n    for (var i = 0; i < node._private.data.statesandinfos.length; i++) {\n      var boxGlyph = node._private.data.statesandinfos[i];\n      var statesandinfosId = boxGlyph.id;\n      if (boxGlyph.clazz === \"state variable\") {\n        glyph.addGlyphMember(this.addStateBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"unit of information\") {\n        glyph.addGlyphMember(this.addInfoBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"residue variable\") {\n        glyph.addGlyphMember(this.addResidueBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"binding region\") {\n        glyph.addGlyphMember(this.addBindingBoxGlyph(boxGlyph, statesandinfosId, node));\n      }\n    }\n    // check for annotations\n    if (version !== \"plain\" && node.data('annotations') && !$.isEmptyObject(node.data('annotations'))) {\n      var extension = self.getOrCreateExtension(glyph);\n      var annotExt = self.getAnnotationExtension(node);\n      extension.add(annotExt);\n    }\n    // add glyph members that are not state variables or unit of info: subunits\n    if (nodeClass === \"complex\" || nodeClass === \"complex multimer\" || nodeClass === \"submap\" || nodeClass === \"topology group\" || nodeClass == \"active protein\") {\n      var children = node.children();\n      children = children.union(this.allCollapsedNodes);\n      if (node.data('collapsedChildren')) {\n        var collapsedChildren = node.data('collapsedChildren');\n        children = children.union(collapsedChildren);\n      }\n      children = children.filter(\"[parent = '\" + node.id() + \"']\");\n      children.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        var glyphMemberList = self.getGlyphSbgnml(ele, version, visible);\n        for (var i = 0; i < glyphMemberList.length; i++) {\n          glyph.addGlyphMember(glyphMemberList[i]);\n        }\n      });\n    }\n    var sbgnvizExtString = \"\";\n    var hasNewtExt = false;\n\n    // add info for collapsed nodes\n    if (node.data('collapsedChildren')) {\n      sbgnvizExtString += \"<collapsed/>\";\n      sbgnvizExtString += \"<positionBeforeSaving x='\" + node.position().x + \"' y='\" + node.position().y + \"'/>\";\n      hasNewtExt = true;\n    }\n\n    // add info for hidden nodes\n    if (node.hidden()) {\n      sbgnvizExtString += \"<hidden/>\";\n      hasNewtExt = true;\n    }\n\n    // add info for nodes which has hidden neighbour\n    if (node.data(\"thickBorder\")) {\n      sbgnvizExtString += \"<hasHiddenNeighbour/>\";\n      hasNewtExt = true;\n    }\n\n    // add string to a new extension for this glyph\n    if (hasNewtExt) {\n      var extension = self.getOrCreateExtension(glyph);\n      extension.add(\"<sbgnviz>\" + sbgnvizExtString + \"</sbgnviz>\");\n    }\n\n    // current glyph is done\n    glyphList.push(glyph);\n\n    // keep going with all the included glyphs\n    if (nodeClass === \"compartment\" || nodeClass === 'complex sbml') {\n      var children = node.children();\n      children = children.union(this.allCollapsedNodes);\n      children = children.filter(\"[parent = '\" + node.id() + \"']\");\n      children.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version, visible));\n      });\n    }\n    return glyphList;\n  };\n\n  // element: a libsbgn.js glyph or edge object\n  jsonToSbgnml.getOrCreateExtension = function (element) {\n    var extension;\n    if (element.extension) {\n      // an extension is already there for this element\n      extension = element.extension;\n    } else {\n      extension = new libsbgnjs.Extension();\n      element.setExtension(extension);\n    }\n    return extension;\n  };\n  jsonToSbgnml.getArcSbgnml = function (edge, version) {\n    var hidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var self = this;\n    //Temporary hack to resolve \"undefined\" arc source and targets\n    var arcTarget = edge._private.data.porttarget;\n    var arcSource = edge._private.data.portsource;\n    if (hidden && !edge.visible()) return;\n    if (arcSource == null || arcSource.length === 0) arcSource = edge._private.data.source;\n    if (arcTarget == null || arcTarget.length === 0) arcTarget = edge._private.data.target;\n    var arcId = edge._private.data.id;\n    var arc = new libsbgnjs.Arc({\n      id: arcId,\n      source: arcSource,\n      target: arcTarget,\n      class_: edge._private.data[\"class\"]\n    });\n    arc.setStart(new libsbgnjs.StartType({\n      x: edge._private.rscratch.startX,\n      y: edge._private.rscratch.startY\n    }));\n\n    // Export anchor points if edgeEditingExtension is registered\n    if (cy.edgeEditing && cy.edgeEditing('initialized')) {\n      var segpts = cy.edgeEditing('get').getAnchorsAsArray(edge);\n      if (typeof segpts !== 'undefined') {\n        if (segpts.length > 0) {\n          for (var i = 0; segpts && i < segpts.length; i = i + 2) {\n            var anchorX = segpts[i];\n            var anchorY = segpts[i + 1];\n            arc.addNext(new libsbgnjs.NextType({\n              x: anchorX,\n              y: anchorY\n            }));\n          }\n        }\n      }\n    }\n    arc.setEnd(new libsbgnjs.EndType({\n      x: edge._private.rscratch.endX,\n      y: edge._private.rscratch.endY\n    }));\n    var cardinality = edge._private.data.cardinality;\n    if (typeof cardinality != 'undefined' && cardinality != null && cardinality != 0) {\n      var edgebBox = edge.boundingBox({\n        includeLabels: true,\n        includeNodes: false,\n        includeEdges: false,\n        includeOverlays: false\n      });\n      arc.addGlyph(new libsbgnjs.Glyph({\n        id: arc.id + '_card',\n        class_: 'stoichiometry',\n        label: new libsbgnjs.Label({\n          text: cardinality\n        }),\n        bbox: new libsbgnjs.Bbox({\n          x: edgebBox.x1,\n          y: edgebBox.y1,\n          w: edgebBox.w,\n          h: edgebBox.h\n        }) // dummy bbox, needed for format compliance\n      }));\n    }\n    // check for annotations\n    if (edge.data('annotations') && !$.isEmptyObject(edge.data('annotations'))) {\n      var extension = self.getOrCreateExtension(arc);\n      var annotExt = this.getAnnotationExtension(edge);\n      extension.add(annotExt);\n    }\n\n    // add info for hidden edges\n    if (edge.hidden()) {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<sbgnviz><hidden/></sbgnviz>\");\n    }\n\n    // add info about edge type\n    // since curve style is not standard we shouldn't have it for either version\n    if (edge.css('curve-style') && version !== \"plain\" && version !== \"plain3\") {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<curveStyle>\" + edge.css('curve-style') + \"</curveStyle>\");\n    }\n    if (edge.data('sif-meta') && version !== \"plain\" && version !== \"plain3\") {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<sifMetaEdge>true</sifMetaEdge>\");\n    }\n    return arc;\n  };\n  jsonToSbgnml.addGlyphBbox = function (node) {\n    var padding = node.padding();\n    var borderWidth = Number(node.css(\"border-width\").replace(\"px\", \"\"));\n    var _class = node.data('class');\n    var width = node.outerWidth() - borderWidth;\n    var height = node.outerHeight() - borderWidth;\n    // If the node can have ports and it has exactly 2 ports then it is represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n    if (elementUtilities.canHavePorts(_class)) {\n      if (node.data('ports').length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = node.data('ports')[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal';\n        // This is the ratio of the area occupied with ports over without ports\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        // Divide the bbox to the calculated ratio to get the bbox of the actual shape discluding the ports\n        width /= ratio;\n        height /= ratio;\n      }\n    }\n    var x = node.position().x - width / 2;\n    var y = node.position().y - height / 2;\n    //var x =node._private.position.x - width/2 - padding;    \n    //var y = node._private.position.y - height/2 - padding;\n    //var x = node._private.position.x - width/2;\n    //var y = node._private.position.y - height/2;\n\n    return new libsbgnjs.Bbox({\n      x: x,\n      y: y,\n      w: width,\n      h: height\n    });\n  };\n  jsonToSbgnml.addStateAndInfoBbox = function (node, boxGlyph) {\n    boxBbox = boxGlyph.bbox;\n    var borderWidth = node.data()['border-width'];\n    var padding = node.padding();\n    var x = boxBbox.x * (node.outerWidth() - borderWidth) / 100 + (node._private.position.x - node.width() / 2 - padding - boxBbox.w / 2);\n    var y = boxBbox.y * (node.outerHeight() - borderWidth) / 100 + (node._private.position.y - node.height() / 2 - padding - boxBbox.h / 2);\n    //var x = boxBbox.x / 100 * node.width();\n    //var y = boxBbox.y / 100 * node.height();\n\n    //x = node._private.position.x - node.width()/2 + (x - boxBbox.w/2);\n    //y = node._private.position.y - node.height()/2 + (y - boxBbox.h/2);\n\n    return new libsbgnjs.Bbox({\n      x: x,\n      y: y,\n      w: boxBbox.w,\n      h: boxBbox.h\n    });\n  };\n  jsonToSbgnml.addStateBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'state variable'\n    });\n    var state = new libsbgnjs.StateType();\n    if (typeof node.state.value != 'undefined') state.value = node.state.value;\n    if (typeof node.state.variable != 'undefined') state.variable = node.state.variable;\n    glyph.setState(state);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n  jsonToSbgnml.addBindingBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'binding region'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.region.variable != 'undefined') label.text = node.region.variable;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n  jsonToSbgnml.addResidueBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'residue variable'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.residue.variable != 'undefined') label.text = node.residue.variable;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n  jsonToSbgnml.addInfoBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'unit of information'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.label.text != 'undefined') label.text = node.label.text;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n\n    // assign correct entity tag for AF case\n    var entityName = null;\n    switch (mainGlyph._private.data[\"class\"]) {\n      case 'BA unspecified entity':\n        entityName = \"unspecified entity\";\n        break;\n      case 'BA simple chemical':\n        entityName = \"simple chemical\";\n        break;\n      case 'BA macromolecule':\n        entityName = \"macromolecule\";\n        break;\n      case 'BA nucleic acid feature':\n        entityName = \"nucleic acid feature\";\n        break;\n      case 'BA perturbing agent':\n        entityName = \"perturbation\";\n        break;\n      case 'BA complex':\n        entityName = \"complex\";\n        break;\n    }\n    // entity tag aren't always there, only for AF\n    // but we still need to keep this information for unknown map type\n    if (entityName) {\n      glyph.setEntity(new libsbgnjs.EntityType({\n        name: entityName\n      }));\n    }\n    return glyph;\n  };\n  jsonToSbgnml.childOfNone = function (ele, nodes) {\n    return !ele.isChild() || nodes.getElementById(ele.data('parent')).length === 0;\n  };\n  return jsonToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sbml-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/json-to-sbml-converter-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar libsbml = __webpack_require__(/*! libsbmljs_stable */ \"libsbmljs_stable\");\nvar libsbmlInstance = libsbml();\nvar pkgVersion = (__webpack_require__(/*! ../../package.json */ \"./package.json\").version); // need info about sbgnviz to put in xml\nvar pkgName = (__webpack_require__(/*! ../../package.json */ \"./package.json\").name);\nvar prettyprint = (__webpack_require__(/*! pretty-data */ \"pretty-data\").pd);\nvar xml2js = __webpack_require__(/*! xml2js */ \"xml2js\");\nvar mapPropertiesBuilder = new xml2js.Builder({\n  rootName: \"nwt:mapProperties\"\n});\nvar compoundExtensionBuilder = new xml2js.Builder({\n  rootName: \"nwt:extraInfo\"\n});\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, experimentalDataOverlay, sbmlSimulationUtilities;\n  var cy;\n  var nodesToSbo = {\n    \"rna\": 278,\n    \"complex sbml\": 253,\n    \"hypothetical complex\": 289,\n    \"degradation\": 291,\n    \"drug\": 298,\n    \"gene\": 243,\n    \"protein\": 252,\n    \"ion\": 327,\n    \"ion channel\": 284,\n    \"phenotype sbml\": 358,\n    \"receptor\": 244,\n    \"simple molecule\": 247,\n    \"truncated protein\": 248,\n    \"unknown molecule\": 285,\n    \"and\": 173,\n    \"or\": 174,\n    \"not\": 238,\n    \"unknown logical operator\": 398\n  };\n  var reducedNotationEdge = {\n    \"positive influence sbml\": 171,\n    \"negative influence\": 407,\n    \"reduced modulation\": 344,\n    \"reduced stimulation\": 411,\n    \"reduced trigger\": 168,\n    \"unknown negative influence\": 169,\n    \"unknown positive influence\": 172,\n    \"unknown reduced stimulation\": 170,\n    \"unknown reduced modulation\": 342,\n    \"unknown reduced trigger\": 205\n  };\n  var modifierNotationEdge = {\n    \"modulation\": 594,\n    \"stimulation\": 459,\n    \"catalysis\": 13,\n    \"inhibition\": 537,\n    \"trigger\": 461,\n    \"unknown inhibition\": 536,\n    \"unknown catalysis\": 462\n  };\n  var twoOrThreeEdge = {\n    \"consumption\": 1,\n    \"production\": 1,\n    \"transport\": 1,\n    \"transcription consumptio\": 1,\n    \"transcription production\": 1,\n    \"translation consumption\": 1,\n    \"translation production\": 1\n  };\n  function jsonToSbml(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    sbmlSimulationUtilities = param.sbmlSimulationUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  jsonToSbml.createSbml = function (filename) {\n    var jsObj = jsonToSbml.buildJsObj(filename);\n    return jsObj;\n  };\n\n  /*\n      Here are the role strings:\n      1 - substrate, 2 - product, 3 - sidesubstrate, 4 - sideproduct, 5 - modifier\n      6 - activator, 7 - inhibitor\n  */\n\n  jsonToSbml.buildJsObj = function (filename) {\n    var edges = cy.edges();\n    var nodes = cy.nodes();\n    var sbmlDoc = new libsbmlInstance.SBMLDocument(3, 2);\n    var model = sbmlDoc.createModel();\n    model.setId('model1');\n\n    // Layout Information\n    sbmlDoc.enablePackage(libsbmlInstance.LayoutExtension.prototype.getXmlnsL3V1V1(), 'layout', true);\n    sbmlDoc.setPackageRequired('layout', false);\n    var layoutPlugin = libsbmlInstance.castObject(model.findPlugin('layout'), libsbmlInstance.LayoutModelPlugin);\n    var layout = layoutPlugin.createLayout();\n    layout.setId(\"layout_1\");\n    var dim = layout.getDimensions();\n    var box = cy.elements().boundingBox();\n    dim.setWidth(box.w);\n    dim.setHeight(box.h);\n\n    // Create Parameters\n    var parameters = sbmlSimulationUtilities.getParameters();\n    var _iterator = _createForOfIteratorHelper(parameters),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var p = _step.value;\n        var param = model.createParameter();\n        param.setId(p.id);\n        param.setName(p.name);\n        param.setValue(p.value);\n        param.setConstant(p.constant);\n      }\n\n      // Create compartment\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    for (var i = 0; i < nodes.length; i++) {\n      var nodeClass = nodes[i]._private.data[\"class\"];\n      if (nodeClass !== \"compartment\") continue;\n      var comp = model.createCompartment();\n      var compId = nodes[i]._private.data.id.replace(/-/g, \"_\");\n      comp.setId(compId);\n      // TODO: Implement Units\n      var simulationData = nodes[i].data(\"simulation\");\n      if (simulationData) {\n        if (simulationData[\"size\"]) comp.setSize(simulationData[\"size\"]);\n        if (simulationData[\"constant\"] !== null) comp.setConstant(simulationData[\"constant\"]);\n        if (simulationData[\"spatialDimensions\"] !== null) comp.setSpatialDimensions(simulationData[\"spatialDimensions\"]);\n      }\n      if (nodes[i]._private.data.label) comp.setName(nodes[i]._private.data.label);\n\n      // Add Layout Info for Compartment\n      var glyph = layout.createCompartmentGlyph();\n      glyph.setId(compId + '_glyph');\n      glyph.setCompartmentId(compId);\n      var _box = {\n        x: 0,\n        y: 0,\n        w: 0,\n        h: 0\n      };\n      _box.x = nodes[i].position().x;\n      _box.y = nodes[i].position().y;\n      _box.w = nodes[i].width();\n      _box.h = nodes[i].height();\n      var bb = glyph.getBoundingBox();\n      bb.setX(_box.x - _box.w / 2);\n      bb.setY(_box.y - _box.h / 2);\n      bb.width = _box.w;\n      bb.height = _box.h;\n    }\n\n    // Set species\n    var infoId = 1;\n    var defaultNeeded = false;\n    for (var _i = 0; _i < nodes.length; _i++) {\n      var nodeClass = nodes[_i]._private.data[\"class\"];\n      var active = false,\n        hypothetical = false,\n        multimer = false;\n      if (nodeClass.includes('active')) {\n        nodeClass = nodeClass.replace('active', '');\n        active = true;\n      }\n      if (nodeClass.includes('hypothetical')) {\n        nodeClass = nodeClass.replace('hypothetical', '');\n        hypothetical = true;\n      }\n      if (nodeClass.includes('multimer')) {\n        nodeClass = nodeClass.replace('multimer', '');\n        multimer = true;\n      }\n      nodeClass = nodeClass.trim();\n      if (!jsonToSbml.isSpecies(nodeClass)) continue;\n      var newSpecies = model.createSpecies();\n      if (nodesToSbo[nodeClass]) {\n        newSpecies.setSBOTerm(nodesToSbo[nodeClass]);\n      }\n      var parent = nodes[_i].parent();\n      while (parent.length > 0 && parent.data('class') !== 'compartment') {\n        parent = parent.parent();\n      }\n      if (parent.length > 0 && parent.data('class') === 'compartment') {\n        newSpecies.setCompartment(parent.id().replace(/-/g, \"_\"));\n      } else {\n        defaultNeeded = true;\n        newSpecies.setCompartment('default');\n      }\n      var simulationData = nodes[_i].data(\"simulation\");\n      if (simulationData) {\n        if (simulationData[\"hasOnlySubstanceUnits\"] !== null) newSpecies.setHasOnlySubstanceUnits(simulationData[\"hasOnlySubstanceUnits\"]);\n        if (simulationData[\"initialAmount\"] !== null && simulationData[\"hasOnlySubstanceUnits\"]) newSpecies.setInitialAmount(simulationData[\"initialAmount\"]);\n        if (simulationData[\"initialConcentration\"] !== null && !simulationData[\"hasOnlySubstanceUnits\"]) newSpecies.setInitialConcentration(simulationData[\"initialConcentration\"]);\n        if (simulationData[\"boundaryCondition\"] !== null) newSpecies.setBoundaryCondition(simulationData[\"boundaryCondition\"]);\n        if (simulationData[\"constant\"] !== null) newSpecies.setConstant(simulationData[\"constant\"]);\n      }\n      var new_id = nodes[_i].id();\n      var newStr = new_id.replace(/-/g, \"_\"); //Replacing - with _ because libsml doesn't allow - in id\n      newSpecies.setId(newStr);\n      if (nodes[_i]._private.data.label) {\n        newSpecies.setName(nodes[_i]._private.data.label);\n      }\n\n      // Add Layout Info for Species\n      var _glyph = layout.createSpeciesGlyph();\n      _glyph.setId(newStr + '_glyph');\n      _glyph.setSpeciesId(newStr);\n      var _box2 = {\n        x: 0,\n        y: 0,\n        w: 0,\n        h: 0\n      };\n      var _bb = _glyph.getBoundingBox();\n      _box2.x = nodes[_i].position().x;\n      _box2.y = nodes[_i].position().y;\n      _box2.w = nodes[_i].width();\n      _box2.h = nodes[_i].height();\n      _bb.setX(_box2.x - _box2.w / 2);\n      _bb.setY(_box2.y - _box2.h / 2);\n      _bb.width = _box2.w;\n      _bb.height = _box2.h;\n\n      // Add State Info for Species as Annotation\n      if (!active && !hypothetical && !multimer && nodes[_i].data('statesandinfos').length == 0) continue;\n      var annotationString = '<nwt:extension xmlns:nwt=\"https://newteditor.org/\">';\n      annotationString += '<nwt:info nwt:multimer=\"' + multimer + '\" nwt:active=\"' + active + '\" nwt:hypothetical=\"' + hypothetical + '\" nwt:infoid=\"info_' + infoId + '\" nwt:id=\"' + newSpecies.getId() + '\">';\n      var _iterator2 = _createForOfIteratorHelper(nodes[_i].data('statesandinfos')),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          var boundingBox = item.bbox;\n          var absoluteCoords = classes.AuxiliaryUnit.getAbsoluteCoord(item, cy);\n          var boundingBoxStr = 'nwt:x=\"' + (absoluteCoords.x - boundingBox.w / 2) + '\" nwt:y=\"' + (absoluteCoords.y - boundingBox.h / 2) + '\" nwt:w=\"' + boundingBox.w + '\" nwt:h=\"' + boundingBox.h + '\"';\n          if (item.clazz == \"residue variable\") {\n            annotationString += '<nwt:residuevariable ' + boundingBoxStr + '>' + item.residue.variable + '</nwt:residuevariable>';\n          } else if (item.clazz == \"binding region\") {\n            annotationString += '<nwt:bindingregion ' + boundingBoxStr + '>' + item.region.variable + '</nwt:bindingregion>';\n          } else if (item.clazz == \"unit of information\") {\n            annotationString += '<nwt:unitinfo ' + boundingBoxStr + '>' + item.label.text + '</nwt:unitinfo>';\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      annotationString += '</nwt:info>';\n      annotationString += '</nwt:extension>';\n      infoId += 1;\n      newSpecies.setAnnotation(annotationString);\n    }\n\n    // The right hand side of -> denotes the type in the syntax below.\n    // Building process array: {process: processNode -> cy node, sources: [sourceEdges] -> list[cy edge], \n    //                      targets: [targetEdges]: list[cy edge], modifiers: [modifierEdges] -> list[cy edge]}\n    var processes = [];\n    nodes.forEach(function (ele, i) {\n      var eleClass = ele.data('class').replace('active', '').replace('hypothetical', '').replace('multimer', '').trim();\n      if (!jsonToSbml.isProcessNode(eleClass)) return;\n      var connectedEdges = ele.connectedEdges();\n      var sources = [],\n        targets = [],\n        modifiers = [];\n      var eleId = ele.id();\n      connectedEdges.forEach(function (edge) {\n        if (edge.source().id() == eleId) {\n          targets.push(edge);\n          return;\n        }\n        if (jsonToSbml.isModifier(edge.data('class'))) {\n          if (!jsonToSbml.isLogicalOperatorNode(edge.source().data('class'))) modifiers.push(edge);\n          return;\n        }\n        sources.push(edge);\n      });\n      processes.push({\n        \"process\": ele,\n        \"sources\": sources,\n        \"targets\": targets,\n        \"modifiers\": modifiers\n      });\n    });\n    var _iterator3 = _createForOfIteratorHelper(processes.entries()),\n      _step3;\n    try {\n      var _loop = function _loop() {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n            i = _step3$value[0],\n            processArray = _step3$value[1];\n          var process = processArray.process;\n          var processClass = process.data('class');\n          var processId = process.id().replace(/-/g, '_');\n          rxn = model.createReaction();\n          rxn.setId('process_' + processId);\n          rxn.setReversible(false);\n\n          // Parent Info\n          var parent = process.parent();\n          while (parent.length > 0 && parent.data('class') !== 'compartment') {\n            parent = parent.parent();\n          }\n          if (parent.length > 0 && parent.data('class') === 'compartment') {\n            rxn.setCompartment(parent.id().replace(/-/g, \"_\"));\n          } else {\n            defaultNeeded = true;\n            rxn.setCompartment('default');\n          }\n          var _iterator5 = _createForOfIteratorHelper(processArray.sources),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var sourceEdge = _step5.value;\n              var _sourceId = sourceEdge.source().id().replace(/-/g, '_');\n              var spr1 = rxn.createReactant();\n              spr1.setSpecies(_sourceId);\n              spr1.setStoichiometry(sourceEdge.data(\"simulation\")[\"stoichiometry\"] || \"\");\n              spr1.setConstant(true);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n          var _iterator6 = _createForOfIteratorHelper(processArray.targets),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var targetEdge = _step6.value;\n              var _targetId = targetEdge.target().id().replace(/-/g, '_');\n              var spr2 = rxn.createProduct();\n              spr2.setSpecies(_targetId);\n              spr2.setStoichiometry(targetEdge.data(\"simulation\")[\"stoichiometry\"] || \"\");\n              spr2.setConstant(true);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n          var _iterator7 = _createForOfIteratorHelper(processArray.modifiers),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var modifierEdge = _step7.value;\n              var _modifierId = modifierEdge.source().id().replace(/-/g, '_');\n              var _modifier = rxn.createModifier();\n              _modifier.setSpecies(_modifierId);\n              _modifier.setSBOTerm(modifierNotationEdge[modifierEdge.data('class')]);\n            }\n\n            //Set sbo term for reaction\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n          var sourceEdgeClass = 'undefined',\n            targetEdgeClass = 'undefined';\n          if (processArray.sources[0]) sourceEdgeClass = processArray.sources[0].data('class');\n          if (processArray.targets[0]) targetEdgeClass = processArray.targets[0].data('class');\n          if ((sourceEdgeClass == \"consumption\" || sourceEdgeClass == \"undefined\") && (targetEdgeClass == \"production\" || targetEdgeClass == \"undefined\") && processClass == \"process\") rxn.setSBOTerm(176);else if ((sourceEdgeClass == \"consumption\" || sourceEdgeClass == \"undefined\") && (targetEdgeClass == \"production\" || targetEdgeClass == \"undefined\") && processClass == \"omitted process\") rxn.setSBOTerm(397);else if ((sourceEdgeClass == \"consumption\" || sourceEdgeClass == \"undefined\") && (targetEdgeClass == \"production\" || targetEdgeClass == \"undefined\") && processClass == \"uncertain process\") rxn.setSBOTerm(396);else if (processClass == \"truncated process\") rxn.setSBOTerm(178);else if (processClass == \"association\") rxn.setSBOTerm(177);else if (processClass == \"dissociation\") rxn.setSBOTerm(180);else if (sourceEdgeClass == \"transcription consumption\" || targetEdgeClass == \"transcription production\") rxn.setSBOTerm(183);else if (sourceEdgeClass == \"translation consumption\" || targetEdgeClass == \"translation production\") rxn.setSBOTerm(184);else if (targetEdgeClass == \"transport\") rxn.setSBOTerm(185);else rxn.setSBOTerm(176);\n          var k1 = rxn.createKineticLaw();\n          for (lp in process.data(\"simulation\")[\"localParameters\"]) {\n            localp = k1.createLocalParameter();\n            localp.setValue(lp.quantity);\n            localp.setName(lp.name.replace(/-/g, '_'));\n          }\n          var parser = new libsbmlInstance.SBMLFormulaParser();\n          var kmath = parser.parseL3Formula(process.data(\"simulation\")[\"kineticLaw\"] || \"\");\n          k1.setMath(kmath);\n          // Add Layout Info for Processes\n          var glyph = layout.createReactionGlyph();\n          glyph.setId(\"process_\" + (i + 1));\n          glyph.setReactionId(rxn.getId());\n          lineSegment = glyph.createLineSegment();\n          bbox = process.data('bbox');\n          bbox.x = process.position().x;\n          bbox.y = process.position().y;\n          ports1 = process.data('ports')[0], ports2 = process.data('ports')[1];\n          var direction = \"L-to-R\";\n          var portZeroIsInput = false,\n            portOneIsInput = false;\n          process.connectedEdges().forEach(function (ele) {\n            if (portZeroIsInput || portOneIsInput || !ele.data('porttarget')) return;\n            portZeroIsInput = ele.data('porttarget').endsWith('.1');\n            portOneIsInput = ele.data('porttarget').endsWith('.2');\n          });\n          if (portZeroIsInput && ports1.x < 0 || portOneIsInput && ports1.x > 0) direction = \"L-to-R\";else if (portZeroIsInput && ports1.x > 0 || portOneIsInput && ports1.x < 0) direction = \"R-to-L\";else if (portZeroIsInput && ports1.y < 0 || portOneIsInput && ports1.y > 0) direction = \"T-to-B\";else if (portZeroIsInput && ports1.y > 0 || portOneIsInput && ports1.y < 0) direction = \"B-to-T\";\n          var startX, startY, endX, endY;\n          if (direction == \"L-to-R\") {\n            startX = bbox.x - bbox.w / 2;\n            startY = bbox.y;\n            endX = bbox.x + bbox.w / 2;\n            endY = bbox.y;\n          } else if (direction == \"R-to-L\") {\n            startX = bbox.x + bbox.w / 2;\n            startY = bbox.y;\n            endX = bbox.x - bbox.w / 2;\n            endY = bbox.y;\n          } else if (direction == \"B-to-T\") {\n            startX = bbox.x;\n            startY = bbox.y + bbox.h / 2;\n            endX = bbox.x;\n            endY = bbox.y - bbox.h / 2;\n          } else {\n            startX = bbox.x;\n            startY = bbox.y - bbox.h / 2;\n            endX = bbox.x;\n            endY = bbox.y + bbox.h / 2;\n          }\n          start = lineSegment.getStart();\n          start.setX(startX);\n          start.setY(startY);\n          end = lineSegment.getEnd();\n          end.setX(endX);\n          end.setY(endY);\n          for (var j = 0; j < processArray.sources.length; j++) {\n            var substrate = processArray.sources[j];\n            var substrateId = substrate.source().id().replace(/-/g, '_');\n            var referenceGlyph = glyph.createSpeciesReferenceGlyph();\n            referenceGlyph.setSpeciesGlyphId(substrateId + '_glyph');\n            referenceGlyph.setRole(1);\n            referenceGlyph.setId(\"substrate_\" + (i + 1) + \"_\" + (j + 1));\n            lineSegment = referenceGlyph.createLineSegment();\n            lineStart = substrate.sourceEndpoint();\n            lineEnd = substrate.targetEndpoint();\n            start = lineSegment.getStart();\n            start.setX(lineStart.x);\n            start.setY(lineStart.y);\n            end = lineSegment.getEnd();\n            end.setX(lineEnd.x);\n            end.setY(lineEnd.y);\n          }\n          for (var _j = 0; _j < processArray.targets.length; _j++) {\n            var product = processArray.targets[_j];\n            var productId = product.target().id().replace(/-/g, '_');\n            var _referenceGlyph = glyph.createSpeciesReferenceGlyph();\n            _referenceGlyph.setSpeciesGlyphId(productId + '_glyph');\n            _referenceGlyph.setRole(2);\n            _referenceGlyph.setId(\"product_\" + (i + 1) + \"_\" + (_j + 1));\n            lineSegment = _referenceGlyph.createLineSegment();\n            lineStart = product.sourceEndpoint();\n            lineEnd = product.targetEndpoint();\n            start = lineSegment.getStart();\n            start.setX(lineStart.x);\n            start.setY(lineStart.y);\n            end = lineSegment.getEnd();\n            end.setX(lineEnd.x);\n            end.setY(lineEnd.y);\n          }\n          for (var _j2 = 0; _j2 < processArray.modifiers.length; _j2++) {\n            var modifier = processArray.modifiers[_j2];\n            var modifierId = modifier.source().id().replace(/-/g, '_');\n            var _referenceGlyph2 = glyph.createSpeciesReferenceGlyph();\n            _referenceGlyph2.setSpeciesGlyphId(modifierId + '_glyph');\n            _referenceGlyph2.setRole(5);\n            _referenceGlyph2.setId(\"modifier_\" + (i + 1) + \"_\" + (_j2 + 1));\n            lineSegment = _referenceGlyph2.createLineSegment();\n            lineStart = modifier.sourceEndpoint();\n            lineEnd = modifier.targetEndpoint();\n            start = lineSegment.getStart();\n            start.setX(lineStart.x);\n            start.setY(lineStart.y);\n            end = lineSegment.getEnd();\n            end.setX(lineEnd.x);\n            end.setY(lineEnd.y);\n          }\n        },\n        rxn,\n        lp,\n        localp,\n        lineSegment,\n        bbox,\n        ports1,\n        ports2,\n        start,\n        end,\n        lineSegment,\n        lineStart,\n        lineEnd,\n        start,\n        end,\n        lineSegment,\n        lineStart,\n        lineEnd,\n        start,\n        end,\n        lineSegment,\n        lineStart,\n        lineEnd,\n        start,\n        end;\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        _loop();\n      }\n\n      // Add default compartment\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    if (defaultNeeded) {\n      var defaultCompartment = model.createCompartment();\n      defaultCompartment.setId('default');\n      defaultCompartment.setSize(1);\n      defaultCompartment.setConstant(true);\n    }\n\n    // Building reduced process array: {edge: edge arc -> cy edge, source: source node -> cy node, \n    //                      target: target node: cy node}\n    var reducedProcesses = [];\n    edges.forEach(function (ele) {\n      if (!jsonToSbml.isReducedArc(ele.data('class'))) {\n        return;\n      }\n      if (jsonToSbml.isLogicalOperatorNode(ele.source().data('class'))) {\n        return;\n      }\n      reducedProcesses.push({\n        edge: ele,\n        source: ele.source(),\n        target: ele.target()\n      });\n    });\n    var _iterator4 = _createForOfIteratorHelper(reducedProcesses.entries()),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n          _i2 = _step4$value[0],\n          reducedProcessArray = _step4$value[1];\n        var edgeId = reducedProcessArray.edge.id().replace(/-/g, '_');\n        var sourceId = reducedProcessArray.source.id().replace(/-/g, '_');\n        var targetId = reducedProcessArray.target.id().replace(/-/g, '_');\n        var _rxn = model.createReaction();\n        _rxn.setId('reduced_' + edgeId);\n        _rxn.setSBOTerm(reducedNotationEdge[reducedProcessArray.edge.data('class')]);\n        var spr1 = _rxn.createReactant();\n        spr1.setSpecies(sourceId);\n        var spr2 = _rxn.createProduct();\n        spr2.setSpecies(targetId);\n\n        // Layout Info for Reduced Process\n        var _glyph2 = layout.createReactionGlyph();\n        _glyph2.setId(\"reduced_\" + (_i2 + 1));\n        _glyph2.setReactionId(_rxn.getId());\n\n        // Modifier\n        var referenceGlyph = _glyph2.createSpeciesReferenceGlyph();\n        referenceGlyph.setSpeciesGlyphId(sourceId + '_glyph');\n        referenceGlyph.setRole(5);\n        referenceGlyph.setId(\"reduced_modulator_\" + (_i2 + 1));\n        var lineSegment = referenceGlyph.createLineSegment();\n        var lineStart = reducedProcessArray.edge.sourceEndpoint();\n        var lineEnd = reducedProcessArray.edge.targetEndpoint();\n        var start = lineSegment.getStart();\n        start.setX(lineStart.x);\n        start.setY(lineStart.y);\n        var end = lineSegment.getEnd();\n        end.setX(lineEnd.x);\n        end.setY(lineEnd.y);\n\n        // Product\n        var referenceGlyph2 = _glyph2.createSpeciesReferenceGlyph();\n        referenceGlyph2.setSpeciesGlyphId(+'_glyph');\n        referenceGlyph2.setRole(5);\n        referenceGlyph2.setId(\"reduced_product_\" + (_i2 + 1));\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    var writer = new libsbmlInstance.SBMLWriter();\n    var serializedSBML = writer.writeSBMLToString(sbmlDoc);\n    libsbmlInstance.destroy(sbmlDoc);\n    libsbmlInstance.destroy(writer);\n    return serializedSBML;\n  };\n  jsonToSbml.buildReactions = function (model) {};\n  jsonToSbml.isProcessNode = function (nodeClass) {\n    return nodeClass.endsWith(\"process\") || nodeClass == \"association\" || nodeClass == \"dissociation\";\n  };\n  jsonToSbml.isLogicalOperatorNode = function (nodeClass) {\n    return nodeClass == \"and\" || nodeClass == \"not\" || nodeClass == \"or\" || nodeClass == \"unknown logical operator\";\n  };\n  jsonToSbml.isSpecies = function (nodeClass) {\n    return !jsonToSbml.isLogicalOperatorNode(nodeClass) && !jsonToSbml.isProcessNode(nodeClass) && nodeClass != \"compartment\";\n  };\n  jsonToSbml.isModifier = function (edgeClass) {\n    if (modifierNotationEdge[edgeClass]) return true;\n    return false;\n  };\n  jsonToSbml.isReducedArc = function (edgeClass) {\n    if (reducedNotationEdge[edgeClass]) return true;\n    return false;\n  };\n  jsonToSbml.buildString = function (obj) {};\n  jsonToSbml.getRenderExtensionSbgnml = function (renderInfo) {};\n  jsonToSbml.getAnnotationExtension = function (cyElement) {};\n  jsonToSbml.getGlyphSbgnml = function (node, version) {\n    var visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  };\n  jsonToSbml.getOrCreateExtension = function (element) {};\n  jsonToSbml.getArcSbgnml = function (edge, version) {\n    var hidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  };\n  jsonToSbml.addGlyphBbox = function (node) {};\n  jsonToSbml.addStateAndInfoBbox = function (node, boxGlyph) {};\n  jsonToSbml.addStateBoxGlyph = function (node, id, mainGlyph) {};\n  jsonToSbml.addBindingBoxGlyph = function (node, id, mainGlyph) {};\n  jsonToSbml.addResidueBoxGlyph = function (node, id, mainGlyph) {};\n  jsonToSbml.addInfoBoxGlyph = function (node, id, mainGlyph) {};\n  jsonToSbml.childOfNone = function (ele, nodes) {};\n  return jsonToSbml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2pzb24tdG8tc2JtbC1jb252ZXJ0ZXItZmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBTUEsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLDBDQUFrQixDQUFDO0FBQzNDLElBQU1DLGVBQWUsR0FBR0YsT0FBTyxDQUFDLENBQUM7QUFDakMsSUFBSUcsVUFBVSxHQUFHRix5RUFBcUMsQ0FBQyxDQUFDO0FBQ3hELElBQUlJLE9BQU8sR0FBR0osc0VBQWtDO0FBQ2hELElBQUlNLFdBQVcsR0FBR04sMERBQXlCO0FBQzNDLElBQUlRLE1BQU0sR0FBR1IsbUJBQU8sQ0FBQyxzQkFBUSxDQUFDO0FBQzlCLElBQUlTLG9CQUFvQixHQUFHLElBQUlELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDO0VBQUNDLFFBQVEsRUFBRTtBQUFtQixDQUFDLENBQUM7QUFDOUUsSUFBSUMsd0JBQXdCLEdBQUcsSUFBSUosTUFBTSxDQUFDRSxPQUFPLENBQUM7RUFBQ0MsUUFBUSxFQUFFO0FBQWUsQ0FBQyxDQUFDO0FBQzlFLElBQUlFLGFBQWEsR0FBR2IsbUJBQU8sQ0FBQywyREFBa0IsQ0FBQztBQUMvQyxJQUFJYyxPQUFPLEdBQUdkLG1CQUFPLENBQUMsNkNBQVcsQ0FBQztBQUVsQ2UsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBWTtFQUN6QixJQUFJQyxnQkFBZ0IsRUFBRUMsY0FBYyxFQUFFQyx1QkFBdUIsRUFBRUMsdUJBQXVCO0VBQ3RGLElBQUlDLEVBQUU7RUFFTixJQUFJQyxVQUFVLEdBQ2Q7SUFDSSxLQUFLLEVBQUUsR0FBRztJQUNWLGNBQWMsRUFBRSxHQUFHO0lBQ25CLHNCQUFzQixFQUFFLEdBQUc7SUFDM0IsYUFBYSxFQUFFLEdBQUc7SUFDbEIsTUFBTSxFQUFFLEdBQUc7SUFDWCxNQUFNLEVBQUUsR0FBRztJQUNYLFNBQVMsRUFBRSxHQUFHO0lBQ2QsS0FBSyxFQUFFLEdBQUc7SUFDVixhQUFhLEVBQUUsR0FBRztJQUNsQixnQkFBZ0Is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QUUsRUFBRXNNLFNBQVMsRUFBRSxDQUFDLENBQUM7RUFDOURwUCxVQUFVLENBQUN3UCxXQUFXLEdBQUcsVUFBU2xJLEdBQUcsRUFBRTdHLEtBQUssRUFBRSxDQUFDLENBQUM7RUFDaEQsT0FBT1QsVUFBVTtBQUNyQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvanNvbi10by1zYm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzPzI2MDQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbGlic2JtbCA9IHJlcXVpcmUoJ2xpYnNibWxqc19zdGFibGUnKTtcbmNvbnN0IGxpYnNibWxJbnN0YW5jZSA9IGxpYnNibWwoKTtcbnZhciBwa2dWZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjsgLy8gbmVlZCBpbmZvIGFib3V0IHNiZ252aXogdG8gcHV0IGluIHhtbFxudmFyIHBrZ05hbWUgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKS5uYW1lO1xudmFyIHByZXR0eXByaW50ID0gcmVxdWlyZSgncHJldHR5LWRhdGEnKS5wZDtcbnZhciB4bWwyanMgPSByZXF1aXJlKCd4bWwyanMnKTtcbnZhciBtYXBQcm9wZXJ0aWVzQnVpbGRlciA9IG5ldyB4bWwyanMuQnVpbGRlcih7cm9vdE5hbWU6IFwibnd0Om1hcFByb3BlcnRpZXNcIn0pO1xudmFyIGNvbXBvdW5kRXh0ZW5zaW9uQnVpbGRlciA9IG5ldyB4bWwyanMuQnVpbGRlcih7cm9vdE5hbWU6IFwibnd0OmV4dHJhSW5mb1wifSk7XG52YXIgdGV4dFV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdGV4dC11dGlsaXRpZXMnKTtcbnZhciBjbGFzc2VzID0gcmVxdWlyZSgnLi9jbGFzc2VzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtZW50VXRpbGl0aWVzLCBncmFwaFV0aWxpdGllcywgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXksIHNibWxTaW11bGF0aW9uVXRpbGl0aWVzO1xuICAgIHZhciBjeTtcblxuICAgIHZhciBub2Rlc1RvU2JvID0gXG4gICAge1xuICAgICAgICBcInJuYVwiOiAyNzgsXG4gICAgICAgIFwiY29tcGxleCBzYm1sXCI6IDI1MyxcbiAgICAgICAgXCJoeXBvdGhldGljYWwgY29tcGxleFwiOiAyODksXG4gICAgICAgIFwiZGVncmFkYXRpb25cIjogMjkxLFxuICAgICAgICBcImRydWdcIjogMjk4LFxuICAgICAgICBcImdlbmVcIjogMjQzLFxuICAgICAgICBcInByb3RlaW5cIjogMjUyLFxuICAgICAgICBcImlvblwiOiAzMjcsXG4gICAgICAgIFwiaW9uIGNoYW5uZWxcIjogMjg0LFxuICAgICAgICBcInBoZW5vdHlwZSBzYm1sXCI6IDM1OCxcbiAgICAgICAgXCJyZWNlcHRvclwiOiAyNDQsXG4gICAgICAgIFwic2ltcGxlIG1vbGVjdWxlXCI6IDI0NywgXG4gICAgICAgIFwidHJ1bmNhdGVkIHByb3RlaW5cIjogMjQ4LFxuICAgICAgICBcInVua25vd24gbW9sZWN1bGVcIjogMjg1LFxuICAgICAgICBcImFuZFwiOiAxNzMsXG4gICAgICAgIFwib3JcIjogMTc0LFxuICAgICAgICBcIm5vdFwiOiAyMzgsXG4gICAgICAgIFwidW5rbm93biBsb2dpY2FsIG9wZXJhdG9yXCI6IDM5OFxuICAgIH1cblxuICAgIHZhciByZWR1Y2VkTm90YXRpb25FZGdlID0gXG4gICAge1xuICAgICAgICBcInBvc2l0aXZlIGluZmx1ZW5jZSBzYm1sXCI6IDE3MSxcbiAgICAgICAgXCJuZWdhdGl2ZSBpbmZsdWVuY2VcIjogNDA3LFxuICAgICAgICBcInJlZHVjZWQgbW9kdWxhdGlvblwiOiAzNDQsXG4gICAgICAgIFwicmVkdWNlZCBzdGltdWxhdGlvblwiOiA0MTEsXG4gICAgICAgIFwicmVkdWNlZCB0cmlnZ2VyXCI6IDE2OCxcbiAgICAgICAgXCJ1bmtub3duIG5lZ2F0aXZlIGluZmx1ZW5jZVwiOiAxNjksXG4gICAgICAgIFwidW5rbm93biBwb3NpdGl2ZSBpbmZsdWVuY2VcIjogMTcyLFxuICAgICAgICBcInVua25vd24gcmVkdWNlZCBzdGltdWxhdGlvblwiOiAxNzAsXG4gICAgICAgIFwidW5rbm93biByZWR1Y2VkIG1vZHVsYXRpb25cIjogMzQyLFxuICAgICAgICBcInVua25vd24gcmVkdWNlZCB0cmlnZ2VyXCI6IDIwNSxcbiAgICB9XG5cbiAgICB2YXIgbW9kaWZpZXJOb3RhdGlvbkVkZ2UgPSBcbiAgICB7XG4gICAgICAgIFwibW9kdWxhdGlvblwiOiA1OTQsXG4gICAgICAgIFwic3RpbXVsYXRpb25cIjogNDU5LFxuICAgICAgICBcImNhdGFseXNpc1wiOiAxMyxcbiAgICAgICAgXCJpbmhpYml0aW9uXCI6IDUzNyxcbiAgICAgICAgXCJ0cmlnZ2VyXCI6IDQ2MSxcbiAgICAgICAgXCJ1bmtub3duIGluaGliaXRpb25cIjogNTM2LFxuICAgICAgICBcInVua25vd24gY2F0YWx5c2lzXCI6IDQ2MiwgXG4gICAgfVxuICAgIHZhciB0d29PclRocmVlRWRnZSA9IFxuICAgIHtcbiAgICAgICAgXCJjb25zdW1wdGlvblwiOiAxLFxuICAgICAgICBcInByb2R1Y3Rpb25cIiA6IDEsXG4gICAgICAgIFwidHJhbnNwb3J0XCI6IDEsXG4gICAgICAgIFwidHJhbnNjcmlwdGlvbiBjb25zdW1wdGlvXCI6IDEsXG4gICAgICAgIFwidHJhbnNjcmlwdGlvbiBwcm9kdWN0aW9uXCI6IDEsXG4gICAgICAgIFwidHJhbnNsYXRpb24gY29uc3VtcHRpb25cIjogMSxcbiAgICAgICAgXCJ0cmFuc2xhdGlvbiBwcm9kdWN0aW9uXCI6IDEsXG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBqc29uVG9TYm1sIChwYXJhbSkge1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcbiAgICAgICAgZ3JhcGhVdGlsaXRpZXMgPSBwYXJhbS5ncmFwaFV0aWxpdGllcztcbiAgICAgICAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkgPSBwYXJhbS5leHBlcmltZW50YWxEYXRhT3ZlcmxheTtcbiAgICAgICAgc2JtbFNpbXVsYXRpb25VdGlsaXRpZXMgPSBwYXJhbS5zYm1sU2ltdWxhdGlvblV0aWxpdGllcztcbiAgICAgICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xuICAgICAgfVxuXG4gICAganNvblRvU2JtbC5jcmVhdGVTYm1sID0gZnVuY3Rpb24oZmlsZW5hbWUpIHtcbiAgICAgICAgdmFyIGpzT2JqID0ganNvblRvU2JtbC5idWlsZEpzT2JqKGZpbGVuYW1lKTtcbiAgICAgICAgcmV0dXJuIGpzT2JqO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIEhlcmUgYXJlIHRoZSByb2xlIHN0cmluZ3M6XG4gICAgICAgIDEgLSBzdWJzdHJhdGUsIDIgLSBwcm9kdWN0LCAzIC0gc2lkZXN1YnN0cmF0ZSwgNCAtIHNpZGVwcm9kdWN0LCA1IC0gbW9kaWZpZXJcbiAgICAgICAgNiAtIGFjdGl2YXRvciwgNyAtIGluaGliaXRvclxuICAgICovXG4gICAgXG4gICAganNvblRvU2JtbC5idWlsZEpzT2JqID0gZnVuY3Rpb24oZmlsZW5hbWUpe1xuICAgICAgICB2YXIgZWRnZXMgPSBjeS5lZGdlcygpO1xuICAgICAgICB2YXIgbm9kZXMgPSBjeS5ub2RlcygpO1xuICAgICAgICB2YXIgc2JtbERvYyA9ICBuZXcgbGlic2JtbEluc3RhbmNlLlNCTUxEb2N1bWVudCgzLCAyKTtcbiAgICAgICAgdmFyIG1vZGVsID0gc2JtbERvYy5jcmVhdGVNb2RlbCgpXG4gICAgICAgIG1vZGVsLnNldElkKCdtb2RlbDEnKTtcblxuICAgICAgICAvLyBMYXlvdXQgSW5mb3JtYXRpb25cbiAgICAgICAgc2JtbERvYy5lbmFibGVQYWNrYWdlKGxpYnNibWxJbnN0YW5jZS5MYXlvdXRFeHRlbnNpb24ucHJvdG90eXBlLmdldFhtbG5zTDNWMVYxKCksICdsYXlvdXQnLCB0cnVlKTtcbiAgICAgICAgc2JtbERvYy5zZXRQYWNrYWdlUmVxdWlyZWQoJ2xheW91dCcsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgbGF5b3V0UGx1Z2luID0gbGlic2JtbEluc3RhbmNlLmNhc3RPYmplY3QobW9kZWwuZmluZFBsdWdpbignbGF5b3V0JyksIGxpYnNibWxJbnN0YW5jZS5MYXlvdXRNb2RlbFBsdWdpbik7XG4gICAgICAgIGNvbnN0IGxheW91dCA9IGxheW91dFBsdWdpbi5jcmVhdGVMYXlvdXQoKTtcbiAgICAgICAgbGF5b3V0LnNldElkKFwibGF5b3V0XzFcIik7XG4gICAgICAgIGNvbnN0IGRpbSA9IGxheW91dC5nZXREaW1lbnNpb25zKCk7XG4gICAgICAgIGNvbnN0IGJveCA9IGN5LmVsZW1lbnRzKCkuYm91bmRpbmdCb3goKTtcbiAgICAgICAgZGltLnNldFdpZHRoKGJveC53KTsgZGltLnNldEhlaWdodChib3guaCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIFBhcmFtZXRlcnNcbiAgICAgICAgdmFyIHBhcmFtZXRlcnMgPSBzYm1sU2ltdWxhdGlvblV0aWxpdGllcy5nZXRQYXJhbWV0ZXJzKCk7XG4gICAgICAgIGZvciAodmFyIHAgb2YgcGFyYW1ldGVycykge1xuICAgICAgICAgICAgY29uc3QgcGFyYW0gPSBtb2RlbC5jcmVhdGVQYXJhbWV0ZXIoKTtcbiAgICAgICAgICAgIHBhcmFtLnNldElkKHAuaWQpO1xuICAgICAgICAgICAgcGFyYW0uc2V0TmFtZShwLm5hbWUpO1xuICAgICAgICAgICAgcGFyYW0uc2V0VmFsdWUocC52YWx1ZSk7XG4gICAgICAgICAgICBwYXJhbS5zZXRDb25zdGFudChwLmNvbnN0YW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBjb21wYXJ0bWVudFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgbm9kZUNsYXNzID0gbm9kZXNbaV0uX3ByaXZhdGUuZGF0YS5jbGFzcztcbiAgICAgICAgICAgIGlmKCBub2RlQ2xhc3MgIT09IFwiY29tcGFydG1lbnRcIilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgY29tcCA9IG1vZGVsLmNyZWF0ZUNvbXBhcnRtZW50KClcbiAgICAgICAgICAgIGNvbnN0IGNvbXBJZCA9IG5vZGVzW2ldLl9wcml2YXRlLmRhdGEuaWQucmVwbGFjZSgvLS9nLCBcIl9cIik7XG4gICAgICAgICAgICBjb21wLnNldElkKGNvbXBJZClcbiAgICAgICAgICAgIC8vIFRPRE86IEltcGxlbWVudCBVbml0c1xuICAgICAgICAgICAgdmFyIHNpbXVsYXRpb25EYXRhID0gbm9kZXNbaV0uZGF0YShcInNpbXVsYXRpb25cIik7XG4gICAgICAgICAgICBpZihzaW11bGF0aW9uRGF0YSl7XG4gICAgICAgICAgICAgICAgaWYoc2ltdWxhdGlvbkRhdGFbXCJzaXplXCJdKVxuICAgICAgICAgICAgICAgICAgICBjb21wLnNldFNpemUoc2ltdWxhdGlvbkRhdGFbXCJzaXplXCJdKTtcbiAgICAgICAgICAgICAgICBpZihzaW11bGF0aW9uRGF0YVtcImNvbnN0YW50XCJdICE9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBjb21wLnNldENvbnN0YW50KHNpbXVsYXRpb25EYXRhW1wiY29uc3RhbnRcIl0pO1xuICAgICAgICAgICAgICAgIGlmKHNpbXVsYXRpb25EYXRhW1wic3BhdGlhbERpbWVuc2lvbnNcIl0gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIGNvbXAuc2V0U3BhdGlhbERpbWVuc2lvbnMoc2ltdWxhdGlvbkRhdGFbXCJzcGF0aWFsRGltZW5zaW9uc1wiXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihub2Rlc1tpXS5fcHJpdmF0ZS5kYXRhLmxhYmVsKVxuICAgICAgICAgICAgICAgIGNvbXAuc2V0TmFtZShub2Rlc1tpXS5fcHJpdmF0ZS5kYXRhLmxhYmVsKVxuXG4gICAgICAgICAgICAvLyBBZGQgTGF5b3V0IEluZm8gZm9yIENvbXBhcnRtZW50XG4gICAgICAgICAgICBjb25zdCBnbHlwaCA9IGxheW91dC5jcmVhdGVDb21wYXJ0bWVudEdseXBoKCk7XG4gICAgICAgICAgICBnbHlwaC5zZXRJZChjb21wSWQgKyAnX2dseXBoJyk7XG4gICAgICAgICAgICBnbHlwaC5zZXRDb21wYXJ0bWVudElkKGNvbXBJZCk7XG4gICAgICAgICAgICBsZXQgYm94ID0ge3g6IDAsIHk6IDAsIHc6IDAsIGg6IDB9O1xuICAgICAgICAgICAgYm94LnggPSBub2Rlc1tpXS5wb3NpdGlvbigpLng7IGJveC55ID0gbm9kZXNbaV0ucG9zaXRpb24oKS55O1xuICAgICAgICAgICAgYm94LncgPSBub2Rlc1tpXS53aWR0aCgpOyBib3guaCA9IG5vZGVzW2ldLmhlaWdodCgpO1xuICAgICAgICAgICAgbGV0IGJiID0gZ2x5cGguZ2V0Qm91bmRpbmdCb3goKTtcbiAgICAgICAgICAgIGJiLnNldFgoYm94LnggLSBib3gudyAvIDIpOyBiYi5zZXRZKGJveC55IC0gYm94LmggLyAyKTtcbiAgICAgICAgICAgIGJiLndpZHRoID0gYm94Lnc7IGJiLmhlaWdodCA9IGJveC5oO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHNwZWNpZXNcbiAgICAgICAgbGV0IGluZm9JZCA9IDE7XG4gICAgICAgIGxldCBkZWZhdWx0TmVlZGVkID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBub2RlQ2xhc3MgPSBub2Rlc1tpXS5fcHJpdmF0ZS5kYXRhLmNsYXNzO1xuICAgICAgICAgICAgbGV0IGFjdGl2ZSA9IGZhbHNlLCBoeXBvdGhldGljYWwgPSBmYWxzZSwgbXVsdGltZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmKG5vZGVDbGFzcy5pbmNsdWRlcygnYWN0aXZlJykpe1xuICAgICAgICAgICAgICAgIG5vZGVDbGFzcyA9IG5vZGVDbGFzcy5yZXBsYWNlKCdhY3RpdmUnLCAnJyk7XG4gICAgICAgICAgICAgICAgYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG5vZGVDbGFzcy5pbmNsdWRlcygnaHlwb3RoZXRpY2FsJykpe1xuICAgICAgICAgICAgICAgIG5vZGVDbGFzcyA9IG5vZGVDbGFzcy5yZXBsYWNlKCdoeXBvdGhldGljYWwnLCAnJyk7XG4gICAgICAgICAgICAgICAgaHlwb3RoZXRpY2FsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG5vZGVDbGFzcy5pbmNsdWRlcygnbXVsdGltZXInKSl7XG4gICAgICAgICAgICAgICAgbm9kZUNsYXNzID0gbm9kZUNsYXNzLnJlcGxhY2UoJ211bHRpbWVyJywgJycpO1xuICAgICAgICAgICAgICAgIG11bHRpbWVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGVDbGFzcyA9IG5vZGVDbGFzcy50cmltKCk7XG5cbiAgICAgICAgICAgIGlmKCFqc29uVG9TYm1sLmlzU3BlY2llcyhub2RlQ2xhc3MpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB2YXIgbmV3U3BlY2llcyA9IG1vZGVsLmNyZWF0ZVNwZWNpZXMoKTtcbiAgICAgICAgICAgIGlmKG5vZGVzVG9TYm9bbm9kZUNsYXNzXSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuZXdTcGVjaWVzLnNldFNCT1Rlcm0obm9kZXNUb1Nib1tub2RlQ2xhc3NdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gbm9kZXNbaV0ucGFyZW50KCk7XG4gICAgICAgICAgICB3aGlsZShwYXJlbnQubGVuZ3RoID4gMCAmJiBwYXJlbnQuZGF0YSgnY2xhc3MnKSAhPT0gJ2NvbXBhcnRtZW50Jyl7XG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihwYXJlbnQubGVuZ3RoID4gMCAmJiBwYXJlbnQuZGF0YSgnY2xhc3MnKSA9PT0gJ2NvbXBhcnRtZW50Jyl7XG4gICAgICAgICAgICAgICAgbmV3U3BlY2llcy5zZXRDb21wYXJ0bWVudChwYXJlbnQuaWQoKS5yZXBsYWNlKC8tL2csIFwiX1wiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGRlZmF1bHROZWVkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG5ld1NwZWNpZXMuc2V0Q29tcGFydG1lbnQoJ2RlZmF1bHQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHNpbXVsYXRpb25EYXRhID0gbm9kZXNbaV0uZGF0YShcInNpbXVsYXRpb25cIik7XG4gICAgICAgICAgICBpZihzaW11bGF0aW9uRGF0YSl7XG4gICAgICAgICAgICAgICAgaWYoc2ltdWxhdGlvbkRhdGFbXCJoYXNPbmx5U3Vic3RhbmNlVW5pdHNcIl0gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIG5ld1NwZWNpZXMuc2V0SGFzT25seVN1YnN0YW5jZVVuaXRzKHNpbXVsYXRpb25EYXRhW1wiaGFzT25seVN1YnN0YW5jZVVuaXRzXCJdKTtcbiAgICAgICAgICAgICAgICBpZihzaW11bGF0aW9uRGF0YVtcImluaXRpYWxBbW91bnRcIl0gIT09IG51bGwgJiYgc2ltdWxhdGlvbkRhdGFbXCJoYXNPbmx5U3Vic3RhbmNlVW5pdHNcIl0pXG4gICAgICAgICAgICAgICAgICAgIG5ld1NwZWNpZXMuc2V0SW5pdGlhbEFtb3VudChzaW11bGF0aW9uRGF0YVtcImluaXRpYWxBbW91bnRcIl0pO1xuICAgICAgICAgICAgICAgIGlmKHNpbXVsYXRpb25EYXRhW1wiaW5pdGlhbENvbmNlbnRyYXRpb25cIl0gIT09IG51bGwgJiYgIXNpbXVsYXRpb25EYXRhW1wiaGFzT25seVN1YnN0YW5jZVVuaXRzXCJdKVxuICAgICAgICAgICAgICAgICAgICBuZXdTcGVjaWVzLnNldEluaXRpYWxDb25jZW50cmF0aW9uKHNpbXVsYXRpb25EYXRhW1wiaW5pdGlhbENvbmNlbnRyYXRpb25cIl0pO1xuICAgICAgICAgICAgICAgIGlmKHNpbXVsYXRpb25EYXRhW1wiYm91bmRhcnlDb25kaXRpb25cIl0gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIG5ld1NwZWNpZXMuc2V0Qm91bmRhcnlDb25kaXRpb24oc2ltdWxhdGlvbkRhdGFbXCJib3VuZGFyeUNvbmRpdGlvblwiXSk7XG4gICAgICAgICAgICAgICAgaWYoc2ltdWxhdGlvbkRhdGFbXCJjb25zdGFudFwiXSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgbmV3U3BlY2llcy5zZXRDb25zdGFudChzaW11bGF0aW9uRGF0YVtcImNvbnN0YW50XCJdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbmV3X2lkID0gbm9kZXNbaV0uaWQoKTtcbiAgICAgICAgICAgIHZhciBuZXdTdHIgPSBuZXdfaWQucmVwbGFjZSgvLS9nLCBcIl9cIik7IC8vUmVwbGFjaW5nIC0gd2l0aCBfIGJlY2F1c2UgbGlic21sIGRvZXNuJ3QgYWxsb3cgLSBpbiBpZFxuICAgICAgICAgICAgbmV3U3BlY2llcy5zZXRJZChuZXdTdHIpO1xuICAgICAgICAgICAgaWYobm9kZXNbaV0uX3ByaXZhdGUuZGF0YS5sYWJlbClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuZXdTcGVjaWVzLnNldE5hbWUobm9kZXNbaV0uX3ByaXZhdGUuZGF0YS5sYWJlbClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWRkIExheW91dCBJbmZvIGZvciBTcGVjaWVzXG4gICAgICAgICAgICBjb25zdCBnbHlwaCA9IGxheW91dC5jcmVhdGVTcGVjaWVzR2x5cGgoKTtcbiAgICAgICAgICAgIGdseXBoLnNldElkKG5ld1N0ciArICdfZ2x5cGgnKTtcbiAgICAgICAgICAgIGdseXBoLnNldFNwZWNpZXNJZChuZXdTdHIpO1xuICAgICAgICAgICAgbGV0IGJveCA9IHt4OiAwLCB5OiAwLCB3OiAwLCBoOiAwfTtcbiAgICAgICAgICAgIGxldCBiYiA9IGdseXBoLmdldEJvdW5kaW5nQm94KCk7XG4gICAgICAgICAgICBib3gueCA9IG5vZGVzW2ldLnBvc2l0aW9uKCkueDsgYm94LnkgPSBub2Rlc1tpXS5wb3NpdGlvbigpLnk7XG4gICAgICAgICAgICBib3gudyA9IG5vZGVzW2ldLndpZHRoKCk7IGJveC5oID0gbm9kZXNbaV0uaGVpZ2h0KCk7XG4gICAgICAgICAgICBiYi5zZXRYKGJveC54IC0gYm94LncgLyAyKTsgYmIuc2V0WShib3gueSAtIGJveC5oIC8gMik7XG4gICAgICAgICAgICBiYi53aWR0aCA9IGJveC53OyBiYi5oZWlnaHQgPSBib3guaDtcblxuICAgICAgICAgICAgLy8gQWRkIFN0YXRlIEluZm8gZm9yIFNwZWNpZXMgYXMgQW5ub3RhdGlvblxuICAgICAgICAgICAgaWYoIWFjdGl2ZSAmJiAhaHlwb3RoZXRpY2FsICYmICFtdWx0aW1lciAmJiBub2Rlc1tpXS5kYXRhKCdzdGF0ZXNhbmRpbmZvcycpLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgYW5ub3RhdGlvblN0cmluZyA9ICc8bnd0OmV4dGVuc2lvbiB4bWxuczpud3Q9XCJodHRwczovL25ld3RlZGl0b3Iub3JnL1wiPic7XG4gICAgICAgICAgICBhbm5vdGF0aW9uU3RyaW5nICs9ICc8bnd0OmluZm8gbnd0Om11bHRpbWVyPVwiJyArIG11bHRpbWVyICsgJ1wiIG53dDphY3RpdmU9XCInICsgYWN0aXZlICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCIgbnd0Omh5cG90aGV0aWNhbD1cIicgKyBoeXBvdGhldGljYWwgKyAnXCIgbnd0OmluZm9pZD1cImluZm9fJyArIGluZm9JZCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCIgbnd0OmlkPVwiJyArIG5ld1NwZWNpZXMuZ2V0SWQoKSArICdcIj4nO1xuICAgICAgICAgICAgZm9yKGxldCBpdGVtIG9mIG5vZGVzW2ldLmRhdGEoJ3N0YXRlc2FuZGluZm9zJykpe1xuICAgICAgICAgICAgICAgIGxldCBib3VuZGluZ0JveCA9IGl0ZW0uYmJveDtcbiAgICAgICAgICAgICAgICBsZXQgYWJzb2x1dGVDb29yZHMgPSBjbGFzc2VzLkF1eGlsaWFyeVVuaXQuZ2V0QWJzb2x1dGVDb29yZChpdGVtLCBjeSk7XG4gICAgICAgICAgICAgICAgbGV0IGJvdW5kaW5nQm94U3RyID0gICdud3Q6eD1cIicgKyAoYWJzb2x1dGVDb29yZHMueCAtIGJvdW5kaW5nQm94LncgLyAyKSArICdcIiBud3Q6eT1cIicgKyAoYWJzb2x1dGVDb29yZHMueSAtIGJvdW5kaW5nQm94LmggLyAyKSArIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiIG53dDp3PVwiJyArIGJvdW5kaW5nQm94LncgKyAnXCIgbnd0Omg9XCInICsgYm91bmRpbmdCb3guaCArICdcIic7XG4gICAgICAgICAgICAgICAgaWYoaXRlbS5jbGF6eiA9PSBcInJlc2lkdWUgdmFyaWFibGVcIil7XG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25TdHJpbmcgKz0gJzxud3Q6cmVzaWR1ZXZhcmlhYmxlICcgKyBib3VuZGluZ0JveFN0ciArICc+JyArIGl0ZW0ucmVzaWR1ZS52YXJpYWJsZSArICc8L253dDpyZXNpZHVldmFyaWFibGU+JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihpdGVtLmNsYXp6ID09IFwiYmluZGluZyByZWdpb25cIil7XG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25TdHJpbmcgKz0gJzxud3Q6YmluZGluZ3JlZ2lvbiAnICsgYm91bmRpbmdCb3hTdHIgKyAnPicgKyBpdGVtLnJlZ2lvbi52YXJpYWJsZSArICc8L253dDpiaW5kaW5ncmVnaW9uPic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoaXRlbS5jbGF6eiA9PSBcInVuaXQgb2YgaW5mb3JtYXRpb25cIil7XG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25TdHJpbmcgKz0gJzxud3Q6dW5pdGluZm8gJyArIGJvdW5kaW5nQm94U3RyICsgJz4nICsgaXRlbS5sYWJlbC50ZXh0ICsgJzwvbnd0OnVuaXRpbmZvPic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5ub3RhdGlvblN0cmluZyArPSAnPC9ud3Q6aW5mbz4nXG4gICAgICAgICAgICBhbm5vdGF0aW9uU3RyaW5nICs9ICc8L253dDpleHRlbnNpb24+J1xuICAgICAgICAgICAgaW5mb0lkICs9IDE7XG4gICAgICAgICAgICBuZXdTcGVjaWVzLnNldEFubm90YXRpb24oYW5ub3RhdGlvblN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmlnaHQgaGFuZCBzaWRlIG9mIC0+IGRlbm90ZXMgdGhlIHR5cGUgaW4gdGhlIHN5bnRheCBiZWxvdy5cbiAgICAgICAgLy8gQnVpbGRpbmcgcHJvY2VzcyBhcnJheToge3Byb2Nlc3M6IHByb2Nlc3NOb2RlIC0+IGN5IG5vZGUsIHNvdXJjZXM6IFtzb3VyY2VFZGdlc10gLT4gbGlzdFtjeSBlZGdlXSwgXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IFt0YXJnZXRFZGdlc106IGxpc3RbY3kgZWRnZV0sIG1vZGlmaWVyczogW21vZGlmaWVyRWRnZXNdIC0+IGxpc3RbY3kgZWRnZV19XG4gICAgICAgIGxldCBwcm9jZXNzZXMgPSBbXTtcbiAgICAgICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoZWxlLCBpKSB7XG4gICAgICAgICAgICB2YXIgZWxlQ2xhc3MgPSBlbGUuZGF0YSgnY2xhc3MnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdhY3RpdmUnLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnaHlwb3RoZXRpY2FsJywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ211bHRpbWVyJywgJycpXG4gICAgICAgICAgICAgICAgLnRyaW0oKTtcblxuICAgICAgICAgICAgaWYoIWpzb25Ub1NibWwuaXNQcm9jZXNzTm9kZShlbGVDbGFzcykpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICB2YXIgY29ubmVjdGVkRWRnZXMgPSBlbGUuY29ubmVjdGVkRWRnZXMoKTtcbiAgICAgICAgICAgIGxldCBzb3VyY2VzID0gW10sIHRhcmdldHMgPSBbXSwgbW9kaWZpZXJzID0gW107XG4gICAgICAgICAgICBsZXQgZWxlSWQgPSBlbGUuaWQoKTtcbiAgICAgICAgICAgIGNvbm5lY3RlZEVkZ2VzLmZvckVhY2goZnVuY3Rpb24gKGVkZ2UpIHtcbiAgICAgICAgICAgICAgICBpZihlZGdlLnNvdXJjZSgpLmlkKCkgPT0gZWxlSWQpe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRzLnB1c2goZWRnZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoanNvblRvU2JtbC5pc01vZGlmaWVyKGVkZ2UuZGF0YSgnY2xhc3MnKSkpe1xuICAgICAgICAgICAgICAgICAgICBpZighanNvblRvU2JtbC5pc0xvZ2ljYWxPcGVyYXRvck5vZGUoZWRnZS5zb3VyY2UoKS5kYXRhKCdjbGFzcycpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVycy5wdXNoKGVkZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaChlZGdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJvY2Vzc2VzLnB1c2goe1wicHJvY2Vzc1wiOiBlbGUsIFwic291cmNlc1wiOiBzb3VyY2VzLCBcInRhcmdldHNcIjogdGFyZ2V0cywgXCJtb2RpZmllcnNcIjogbW9kaWZpZXJzfSk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgZm9yKGxldCBbaSwgcHJvY2Vzc0FycmF5XSBvZiBwcm9jZXNzZXMuZW50cmllcygpKXtcbiAgICAgICAgICAgIGxldCBwcm9jZXNzID0gcHJvY2Vzc0FycmF5LnByb2Nlc3M7XG4gICAgICAgICAgICBsZXQgcHJvY2Vzc0NsYXNzID0gcHJvY2Vzcy5kYXRhKCdjbGFzcycpO1xuICAgICAgICAgICAgbGV0IHByb2Nlc3NJZCA9IHByb2Nlc3MuaWQoKS5yZXBsYWNlKC8tL2csICdfJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciByeG4gPSBtb2RlbC5jcmVhdGVSZWFjdGlvbigpO1xuICAgICAgICAgICAgcnhuLnNldElkKCdwcm9jZXNzXycrIHByb2Nlc3NJZCk7XG4gICAgICAgICAgICByeG4uc2V0UmV2ZXJzaWJsZShmYWxzZSk7XG5cbiAgICAgICAgICAgIC8vIFBhcmVudCBJbmZvXG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gcHJvY2Vzcy5wYXJlbnQoKTtcbiAgICAgICAgICAgIHdoaWxlKHBhcmVudC5sZW5ndGggPiAwICYmIHBhcmVudC5kYXRhKCdjbGFzcycpICE9PSAnY29tcGFydG1lbnQnKXtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHBhcmVudC5sZW5ndGggPiAwICYmIHBhcmVudC5kYXRhKCdjbGFzcycpID09PSAnY29tcGFydG1lbnQnKXtcbiAgICAgICAgICAgICAgICByeG4uc2V0Q29tcGFydG1lbnQocGFyZW50LmlkKCkucmVwbGFjZSgvLS9nLCBcIl9cIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBkZWZhdWx0TmVlZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByeG4uc2V0Q29tcGFydG1lbnQoJ2RlZmF1bHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yKGxldCBzb3VyY2VFZGdlIG9mIHByb2Nlc3NBcnJheS5zb3VyY2VzKXtcbiAgICAgICAgICAgICAgICBsZXQgc291cmNlSWQgPSBzb3VyY2VFZGdlLnNvdXJjZSgpLmlkKCkucmVwbGFjZSgvLS9nLCAnXycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwcjEgPSByeG4uY3JlYXRlUmVhY3RhbnQoKTtcbiAgICAgICAgICAgICAgICBzcHIxLnNldFNwZWNpZXMoc291cmNlSWQpO1xuICAgICAgICAgICAgICAgIHNwcjEuc2V0U3RvaWNoaW9tZXRyeSggKHNvdXJjZUVkZ2UuZGF0YShcInNpbXVsYXRpb25cIilbXCJzdG9pY2hpb21ldHJ5XCJdIHx8IFwiXCIpICk7XG4gICAgICAgICAgICAgICAgc3ByMS5zZXRDb25zdGFudCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yKGxldCB0YXJnZXRFZGdlIG9mIHByb2Nlc3NBcnJheS50YXJnZXRzKXtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0SWQgPSB0YXJnZXRFZGdlLnRhcmdldCgpLmlkKCkucmVwbGFjZSgvLS9nLCAnXycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwcjIgPSByeG4uY3JlYXRlUHJvZHVjdCgpO1xuICAgICAgICAgICAgICAgIHNwcjIuc2V0U3BlY2llcyh0YXJnZXRJZCk7XG4gICAgICAgICAgICAgICAgc3ByMi5zZXRTdG9pY2hpb21ldHJ5KCAodGFyZ2V0RWRnZS5kYXRhKFwic2ltdWxhdGlvblwiKVtcInN0b2ljaGlvbWV0cnlcIl0gfHwgXCJcIikgKTtcbiAgICAgICAgICAgICAgICBzcHIyLnNldENvbnN0YW50KHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IobGV0IG1vZGlmaWVyRWRnZSBvZiBwcm9jZXNzQXJyYXkubW9kaWZpZXJzKXtcbiAgICAgICAgICAgICAgICBsZXQgbW9kaWZpZXJJZCA9IG1vZGlmaWVyRWRnZS5zb3VyY2UoKS5pZCgpLnJlcGxhY2UoLy0vZywgJ18nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RpZmllciA9IHJ4bi5jcmVhdGVNb2RpZmllcigpO1xuICAgICAgICAgICAgICAgIG1vZGlmaWVyLnNldFNwZWNpZXMobW9kaWZpZXJJZCk7XG4gICAgICAgICAgICAgICAgbW9kaWZpZXIuc2V0U0JPVGVybShtb2RpZmllck5vdGF0aW9uRWRnZVttb2RpZmllckVkZ2UuZGF0YSgnY2xhc3MnKV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL1NldCBzYm8gdGVybSBmb3IgcmVhY3Rpb25cbiAgICAgICAgICAgIGxldCBzb3VyY2VFZGdlQ2xhc3MgPSAndW5kZWZpbmVkJywgdGFyZ2V0RWRnZUNsYXNzID0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICBpZihwcm9jZXNzQXJyYXkuc291cmNlc1swXSlcbiAgICAgICAgICAgICAgICBzb3VyY2VFZGdlQ2xhc3MgPSBwcm9jZXNzQXJyYXkuc291cmNlc1swXS5kYXRhKCdjbGFzcycpO1xuICAgICAgICAgICAgaWYocHJvY2Vzc0FycmF5LnRhcmdldHNbMF0pXG4gICAgICAgICAgICAgICAgdGFyZ2V0RWRnZUNsYXNzID0gcHJvY2Vzc0FycmF5LnRhcmdldHNbMF0uZGF0YSgnY2xhc3MnKTtcblxuICAgICAgICAgICAgaWYoKHNvdXJjZUVkZ2VDbGFzcyA9PSBcImNvbnN1bXB0aW9uXCIgfHzCoHNvdXJjZUVkZ2VDbGFzcyA9PSBcInVuZGVmaW5lZFwiKSBcbiAgICAgICAgICAgICAgICAmJiAodGFyZ2V0RWRnZUNsYXNzID09IFwicHJvZHVjdGlvblwiIHx8IHRhcmdldEVkZ2VDbGFzcyA9PSBcInVuZGVmaW5lZFwiKSBcbiAgICAgICAgICAgICAgICAmJiBwcm9jZXNzQ2xhc3MgPT0gXCJwcm9jZXNzXCIpXG4gICAgICAgICAgICAgICAgcnhuLnNldFNCT1Rlcm0oMTc2KTtcbiAgICAgICAgICAgIGVsc2UgaWYoKHNvdXJjZUVkZ2VDbGFzcyA9PSBcImNvbnN1bXB0aW9uXCIgfHzCoHNvdXJjZUVkZ2VDbGFzcyA9PSBcInVuZGVmaW5lZFwiKSBcbiAgICAgICAgICAgICAgICAmJiAodGFyZ2V0RWRnZUNsYXNzID09IFwicHJvZHVjdGlvblwiIHx8IHRhcmdldEVkZ2VDbGFzcyA9PSBcInVuZGVmaW5lZFwiKSBcbiAgICAgICAgICAgICAgICAmJiBwcm9jZXNzQ2xhc3MgPT0gXCJvbWl0dGVkIHByb2Nlc3NcIilcbiAgICAgICAgICAgICAgICByeG4uc2V0U0JPVGVybSgzOTcpO1xuICAgICAgICAgICAgZWxzZSBpZigoc291cmNlRWRnZUNsYXNzID09IFwiY29uc3VtcHRpb25cIiB8fMKgc291cmNlRWRnZUNsYXNzID09IFwidW5kZWZpbmVkXCIpIFxuICAgICAgICAgICAgICAgICYmICh0YXJnZXRFZGdlQ2xhc3MgPT0gXCJwcm9kdWN0aW9uXCIgfHwgdGFyZ2V0RWRnZUNsYXNzID09IFwidW5kZWZpbmVkXCIpIFxuICAgICAgICAgICAgICAgICYmIHByb2Nlc3NDbGFzcyA9PSBcInVuY2VydGFpbiBwcm9jZXNzXCIpXG4gICAgICAgICAgICAgICAgcnhuLnNldFNCT1Rlcm0oMzk2KTtcbiAgICAgICAgICAgIGVsc2UgaWYocHJvY2Vzc0NsYXNzID09IFwidHJ1bmNhdGVkIHByb2Nlc3NcIilcbiAgICAgICAgICAgICAgICByeG4uc2V0U0JPVGVybSgxNzgpO1xuICAgICAgICAgICAgZWxzZSBpZihwcm9jZXNzQ2xhc3MgPT0gXCJhc3NvY2lhdGlvblwiKSAgXG4gICAgICAgICAgICAgICAgcnhuLnNldFNCT1Rlcm0oMTc3KVxuICAgICAgICAgICAgZWxzZSBpZihwcm9jZXNzQ2xhc3MgPT0gXCJkaXNzb2NpYXRpb25cIikgIFxuICAgICAgICAgICAgICAgIHJ4bi5zZXRTQk9UZXJtKDE4MClcbiAgICAgICAgICAgIGVsc2UgaWYoc291cmNlRWRnZUNsYXNzID09IFwidHJhbnNjcmlwdGlvbiBjb25zdW1wdGlvblwiIHx8IHRhcmdldEVkZ2VDbGFzcyA9PSBcInRyYW5zY3JpcHRpb24gcHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgICAgIHJ4bi5zZXRTQk9UZXJtKDE4Myk7XG4gICAgICAgICAgICBlbHNlIGlmKHNvdXJjZUVkZ2VDbGFzcyA9PSBcInRyYW5zbGF0aW9uIGNvbnN1bXB0aW9uXCIgfHwgdGFyZ2V0RWRnZUNsYXNzID09IFwidHJhbnNsYXRpb24gcHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgICAgIHJ4bi5zZXRTQk9UZXJtKDE4NCk7XG4gICAgICAgICAgICBlbHNlIGlmKHRhcmdldEVkZ2VDbGFzcyA9PSBcInRyYW5zcG9ydFwiKVxuICAgICAgICAgICAgICAgIHJ4bi5zZXRTQk9UZXJtKDE4NSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcnhuLnNldFNCT1Rlcm0oMTc2KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgazEgPSByeG4uY3JlYXRlS2luZXRpY0xhdygpO1xuICAgICAgICAgICAgZm9yKHZhciBscCBpbiBwcm9jZXNzLmRhdGEoXCJzaW11bGF0aW9uXCIpW1wibG9jYWxQYXJhbWV0ZXJzXCJdKXtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYWxwID0gazEuY3JlYXRlTG9jYWxQYXJhbWV0ZXIoKTtcbiAgICAgICAgICAgICAgICBsb2NhbHAuc2V0VmFsdWUobHAucXVhbnRpdHkpO1xuICAgICAgICAgICAgICAgIGxvY2FscC5zZXROYW1lKGxwLm5hbWUucmVwbGFjZSgvLS9nLCAnXycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBsaWJzYm1sSW5zdGFuY2UuU0JNTEZvcm11bGFQYXJzZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGttYXRoID0gcGFyc2VyLnBhcnNlTDNGb3JtdWxhKCAocHJvY2Vzcy5kYXRhKFwic2ltdWxhdGlvblwiKVtcImtpbmV0aWNMYXdcIl0gfHwgXCJcIikgKTtcbiAgICAgICAgICAgIGsxLnNldE1hdGgoa21hdGgpO1xuICAgICAgICAgICAgLy8gQWRkIExheW91dCBJbmZvIGZvciBQcm9jZXNzZXNcbiAgICAgICAgICAgIGNvbnN0IGdseXBoID0gbGF5b3V0LmNyZWF0ZVJlYWN0aW9uR2x5cGgoKTtcbiAgICAgICAgICAgIGdseXBoLnNldElkKFwicHJvY2Vzc19cIiArIChpKzEpKTtcbiAgICAgICAgICAgIGdseXBoLnNldFJlYWN0aW9uSWQocnhuLmdldElkKCkpO1xuICAgICAgICAgICAgdmFyIGxpbmVTZWdtZW50ID0gZ2x5cGguY3JlYXRlTGluZVNlZ21lbnQoKTtcbiAgICAgICAgICAgIHZhciBiYm94ID0gcHJvY2Vzcy5kYXRhKCdiYm94Jyk7XG4gICAgICAgICAgICBiYm94LnggPSBwcm9jZXNzLnBvc2l0aW9uKCkueDsgYmJveC55ID0gcHJvY2Vzcy5wb3NpdGlvbigpLnk7XG5cbiAgICAgICAgICAgIHZhciBwb3J0czEgPSBwcm9jZXNzLmRhdGEoJ3BvcnRzJylbMF0sIHBvcnRzMiA9IHByb2Nlc3MuZGF0YSgncG9ydHMnKVsxXTtcbiAgICAgICAgICAgIGxldCBkaXJlY3Rpb24gPSBcIkwtdG8tUlwiO1xuICAgICAgICAgICAgbGV0IHBvcnRaZXJvSXNJbnB1dCA9IGZhbHNlLCBwb3J0T25lSXNJbnB1dCA9IGZhbHNlO1xuICAgICAgICAgICAgcHJvY2Vzcy5jb25uZWN0ZWRFZGdlcygpLmZvckVhY2goZnVuY3Rpb24oZWxlKSB7XG4gICAgICAgICAgICAgICAgaWYocG9ydFplcm9Jc0lucHV0IHx8IHBvcnRPbmVJc0lucHV0IHx8ICFlbGUuZGF0YSgncG9ydHRhcmdldCcpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgcG9ydFplcm9Jc0lucHV0ID0gZWxlLmRhdGEoJ3BvcnR0YXJnZXQnKS5lbmRzV2l0aCgnLjEnKTtcbiAgICAgICAgICAgICAgICBwb3J0T25lSXNJbnB1dCA9IGVsZS5kYXRhKCdwb3J0dGFyZ2V0JykuZW5kc1dpdGgoJy4yJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYoKHBvcnRaZXJvSXNJbnB1dCAmJiBwb3J0czEueCA8IDApIHx8IChwb3J0T25lSXNJbnB1dCAmJiBwb3J0czEueCA+IDApKVxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwiTC10by1SXCI7XG4gICAgICAgICAgICBlbHNlIGlmKChwb3J0WmVyb0lzSW5wdXQgJiYgcG9ydHMxLnggPiAwKSB8fCAocG9ydE9uZUlzSW5wdXQgJiYgcG9ydHMxLnggPCAwKSlcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBcIlItdG8tTFwiO1xuICAgICAgICAgICAgZWxzZSBpZigocG9ydFplcm9Jc0lucHV0ICYmIHBvcnRzMS55IDwgMCkgfHwgKHBvcnRPbmVJc0lucHV0ICYmIHBvcnRzMS55ID4gMCkpXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gXCJULXRvLUJcIjtcbiAgICAgICAgICAgIGVsc2UgaWYoKHBvcnRaZXJvSXNJbnB1dCAmJiBwb3J0czEueSA+IDApIHx8IChwb3J0T25lSXNJbnB1dCAmJiBwb3J0czEueSA8IDApKVxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwiQi10by1UXCI7XG5cbiAgICAgICAgICAgIGxldCBzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWTtcbiAgICAgICAgICAgIGlmKGRpcmVjdGlvbiA9PSBcIkwtdG8tUlwiKXtcbiAgICAgICAgICAgICAgICBzdGFydFggPSBiYm94LnggLSBiYm94LncgLyAyOyBzdGFydFkgPSBiYm94Lnk7XG4gICAgICAgICAgICAgICAgZW5kWCA9IGJib3gueCArIGJib3gudyAvIDI7IGVuZFkgPSBiYm94Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGRpcmVjdGlvbiA9PSBcIlItdG8tTFwiKXtcbiAgICAgICAgICAgICAgICBzdGFydFggPSBiYm94LnggKyBiYm94LncgLyAyOyBzdGFydFkgPSBiYm94Lnk7XG4gICAgICAgICAgICAgICAgZW5kWCA9IGJib3gueCAtIGJib3gudyAvIDI7IGVuZFkgPSBiYm94Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGRpcmVjdGlvbiA9PSBcIkItdG8tVFwiKXtcbiAgICAgICAgICAgICAgICBzdGFydFggPSBiYm94Lng7IHN0YXJ0WSA9IGJib3gueSArIGJib3guaCAvIDI7XG4gICAgICAgICAgICAgICAgZW5kWCA9IGJib3gueDsgZW5kWSA9IGJib3gueSAtIGJib3guaCAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHN0YXJ0WCA9IGJib3gueDsgc3RhcnRZID0gYmJveC55IC0gYmJveC5oIC8gMjtcbiAgICAgICAgICAgICAgICBlbmRYID0gYmJveC54OyBlbmRZID0gYmJveC55ICsgYmJveC5oIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdGFydCA9IGxpbmVTZWdtZW50LmdldFN0YXJ0KCk7IHN0YXJ0LnNldFgoc3RhcnRYKTsgc3RhcnQuc2V0WShzdGFydFkpO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGxpbmVTZWdtZW50LmdldEVuZCgpOyBlbmQuc2V0WChlbmRYKTsgZW5kLnNldFkoZW5kWSk7XG5cbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBwcm9jZXNzQXJyYXkuc291cmNlcy5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgbGV0IHN1YnN0cmF0ZSA9IHByb2Nlc3NBcnJheS5zb3VyY2VzW2pdO1xuICAgICAgICAgICAgICAgIGxldCBzdWJzdHJhdGVJZCA9IHN1YnN0cmF0ZS5zb3VyY2UoKS5pZCgpLnJlcGxhY2UoLy0vZywgJ18nKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWZlcmVuY2VHbHlwaCA9IGdseXBoLmNyZWF0ZVNwZWNpZXNSZWZlcmVuY2VHbHlwaCgpO1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdseXBoLnNldFNwZWNpZXNHbHlwaElkKHN1YnN0cmF0ZUlkICsgJ19nbHlwaCcpO1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdseXBoLnNldFJvbGUoMSk7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlR2x5cGguc2V0SWQoXCJzdWJzdHJhdGVfXCIgKyAoaSsxKSArIFwiX1wiICsgKGorMSkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGxpbmVTZWdtZW50ID0gcmVmZXJlbmNlR2x5cGguY3JlYXRlTGluZVNlZ21lbnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgbGluZVN0YXJ0ID0gc3Vic3RyYXRlLnNvdXJjZUVuZHBvaW50KCk7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmVFbmQgPSBzdWJzdHJhdGUudGFyZ2V0RW5kcG9pbnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBsaW5lU2VnbWVudC5nZXRTdGFydCgpOyBzdGFydC5zZXRYKGxpbmVTdGFydC54KTsgc3RhcnQuc2V0WShsaW5lU3RhcnQueSk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IGxpbmVTZWdtZW50LmdldEVuZCgpOyBlbmQuc2V0WChsaW5lRW5kLngpOyBlbmQuc2V0WShsaW5lRW5kLnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgcHJvY2Vzc0FycmF5LnRhcmdldHMubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgIGxldCBwcm9kdWN0ID0gcHJvY2Vzc0FycmF5LnRhcmdldHNbal07XG4gICAgICAgICAgICAgICAgbGV0IHByb2R1Y3RJZCA9IHByb2R1Y3QudGFyZ2V0KCkuaWQoKS5yZXBsYWNlKC8tL2csICdfJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlR2x5cGggPSBnbHlwaC5jcmVhdGVTcGVjaWVzUmVmZXJlbmNlR2x5cGgoKTtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VHbHlwaC5zZXRTcGVjaWVzR2x5cGhJZChwcm9kdWN0SWQgKyAnX2dseXBoJyk7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlR2x5cGguc2V0Um9sZSgyKTtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VHbHlwaC5zZXRJZChcInByb2R1Y3RfXCIgKyAoaSsxKSArIFwiX1wiICsgKGorMSkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGxpbmVTZWdtZW50ID0gcmVmZXJlbmNlR2x5cGguY3JlYXRlTGluZVNlZ21lbnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgbGluZVN0YXJ0ID0gcHJvZHVjdC5zb3VyY2VFbmRwb2ludCgpO1xuICAgICAgICAgICAgICAgIHZhciBsaW5lRW5kID0gcHJvZHVjdC50YXJnZXRFbmRwb2ludCgpO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGxpbmVTZWdtZW50LmdldFN0YXJ0KCk7IHN0YXJ0LnNldFgobGluZVN0YXJ0LngpOyBzdGFydC5zZXRZKGxpbmVTdGFydC55KTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gbGluZVNlZ21lbnQuZ2V0RW5kKCk7IGVuZC5zZXRYKGxpbmVFbmQueCk7IGVuZC5zZXRZKGxpbmVFbmQueSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBwcm9jZXNzQXJyYXkubW9kaWZpZXJzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICBsZXQgbW9kaWZpZXIgPSBwcm9jZXNzQXJyYXkubW9kaWZpZXJzW2pdO1xuICAgICAgICAgICAgICAgIGxldCBtb2RpZmllcklkID0gbW9kaWZpZXIuc291cmNlKCkuaWQoKS5yZXBsYWNlKC8tL2csICdfJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlR2x5cGggPSBnbHlwaC5jcmVhdGVTcGVjaWVzUmVmZXJlbmNlR2x5cGgoKTtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VHbHlwaC5zZXRTcGVjaWVzR2x5cGhJZChtb2RpZmllcklkICsgJ19nbHlwaCcpO1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdseXBoLnNldFJvbGUoNSk7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlR2x5cGguc2V0SWQoXCJtb2RpZmllcl9cIiArIChpKzEpICsgXCJfXCIgKyAoaisxKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbGluZVNlZ21lbnQgPSByZWZlcmVuY2VHbHlwaC5jcmVhdGVMaW5lU2VnbWVudCgpO1xuICAgICAgICAgICAgICAgIHZhciBsaW5lU3RhcnQgPSBtb2RpZmllci5zb3VyY2VFbmRwb2ludCgpO1xuICAgICAgICAgICAgICAgIHZhciBsaW5lRW5kID0gbW9kaWZpZXIudGFyZ2V0RW5kcG9pbnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBsaW5lU2VnbWVudC5nZXRTdGFydCgpOyBzdGFydC5zZXRYKGxpbmVTdGFydC54KTsgc3RhcnQuc2V0WShsaW5lU3RhcnQueSk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IGxpbmVTZWdtZW50LmdldEVuZCgpOyBlbmQuc2V0WChsaW5lRW5kLngpOyBlbmQuc2V0WShsaW5lRW5kLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGRlZmF1bHQgY29tcGFydG1lbnRcbiAgICAgICAgaWYoZGVmYXVsdE5lZWRlZCl7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0Q29tcGFydG1lbnQgPSBtb2RlbC5jcmVhdGVDb21wYXJ0bWVudCgpO1xuICAgICAgICAgICAgZGVmYXVsdENvbXBhcnRtZW50LnNldElkKCdkZWZhdWx0Jyk7XG4gICAgICAgICAgICBkZWZhdWx0Q29tcGFydG1lbnQuc2V0U2l6ZSgxKTtcbiAgICAgICAgICAgIGRlZmF1bHRDb21wYXJ0bWVudC5zZXRDb25zdGFudCh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJ1aWxkaW5nIHJlZHVjZWQgcHJvY2VzcyBhcnJheToge2VkZ2U6IGVkZ2UgYXJjIC0+IGN5IGVkZ2UsIHNvdXJjZTogc291cmNlIG5vZGUgLT4gY3kgbm9kZSwgXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0IG5vZGU6IGN5IG5vZGV9XG4gICAgICAgIGxldCByZWR1Y2VkUHJvY2Vzc2VzID0gW107XG4gICAgICAgIGVkZ2VzLmZvckVhY2goZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgICAgaWYoIWpzb25Ub1NibWwuaXNSZWR1Y2VkQXJjKGVsZS5kYXRhKCdjbGFzcycpKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoanNvblRvU2JtbC5pc0xvZ2ljYWxPcGVyYXRvck5vZGUoZWxlLnNvdXJjZSgpLmRhdGEoJ2NsYXNzJykpKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWR1Y2VkUHJvY2Vzc2VzLnB1c2goe2VkZ2U6IGVsZSwgc291cmNlOiBlbGUuc291cmNlKCksIHRhcmdldDogZWxlLnRhcmdldCgpfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvcihsZXQgW2ksIHJlZHVjZWRQcm9jZXNzQXJyYXldIG9mIHJlZHVjZWRQcm9jZXNzZXMuZW50cmllcygpKXtcbiAgICAgICAgICAgIHZhciBlZGdlSWQgPSByZWR1Y2VkUHJvY2Vzc0FycmF5LmVkZ2UuaWQoKS5yZXBsYWNlKC8tL2csICdfJyk7XG4gICAgICAgICAgICB2YXIgc291cmNlSWQgPSByZWR1Y2VkUHJvY2Vzc0FycmF5LnNvdXJjZS5pZCgpLnJlcGxhY2UoLy0vZywgJ18nKTtcbiAgICAgICAgICAgIHZhciB0YXJnZXRJZCA9IHJlZHVjZWRQcm9jZXNzQXJyYXkudGFyZ2V0LmlkKCkucmVwbGFjZSgvLS9nLCAnXycpO1xuICAgICAgICAgICAgY29uc3QgcnhuID0gbW9kZWwuY3JlYXRlUmVhY3Rpb24oKVxuICAgICAgICAgICAgcnhuLnNldElkKCdyZWR1Y2VkXycrIGVkZ2VJZCk7XG4gICAgICAgICAgICByeG4uc2V0U0JPVGVybShyZWR1Y2VkTm90YXRpb25FZGdlW3JlZHVjZWRQcm9jZXNzQXJyYXkuZWRnZS5kYXRhKCdjbGFzcycpXSlcbiAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzcHIxID0gcnhuLmNyZWF0ZVJlYWN0YW50KClcbiAgICAgICAgICAgIHNwcjEuc2V0U3BlY2llcyhzb3VyY2VJZCk7XG4gICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc3ByMiA9IHJ4bi5jcmVhdGVQcm9kdWN0KClcbiAgICAgICAgICAgIHNwcjIuc2V0U3BlY2llcyh0YXJnZXRJZCk7XG5cbiAgICAgICAgICAgIC8vIExheW91dCBJbmZvIGZvciBSZWR1Y2VkIFByb2Nlc3NcbiAgICAgICAgICAgIGNvbnN0IGdseXBoID0gbGF5b3V0LmNyZWF0ZVJlYWN0aW9uR2x5cGgoKTtcbiAgICAgICAgICAgIGdseXBoLnNldElkKFwicmVkdWNlZF9cIiArIChpKzEpKTtcbiAgICAgICAgICAgIGdseXBoLnNldFJlYWN0aW9uSWQocnhuLmdldElkKCkpO1xuXG4gICAgICAgICAgICAvLyBNb2RpZmllclxuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlR2x5cGggPSBnbHlwaC5jcmVhdGVTcGVjaWVzUmVmZXJlbmNlR2x5cGgoKTtcbiAgICAgICAgICAgIHJlZmVyZW5jZUdseXBoLnNldFNwZWNpZXNHbHlwaElkKHNvdXJjZUlkICsgJ19nbHlwaCcpO1xuICAgICAgICAgICAgcmVmZXJlbmNlR2x5cGguc2V0Um9sZSg1KTtcbiAgICAgICAgICAgIHJlZmVyZW5jZUdseXBoLnNldElkKFwicmVkdWNlZF9tb2R1bGF0b3JfXCIgKyAoaSsxKSk7XG5cbiAgICAgICAgICAgIHZhciBsaW5lU2VnbWVudCA9IHJlZmVyZW5jZUdseXBoLmNyZWF0ZUxpbmVTZWdtZW50KCk7XG4gICAgICAgICAgICB2YXIgbGluZVN0YXJ0ID0gcmVkdWNlZFByb2Nlc3NBcnJheS5lZGdlLnNvdXJjZUVuZHBvaW50KCk7XG4gICAgICAgICAgICB2YXIgbGluZUVuZCA9IHJlZHVjZWRQcm9jZXNzQXJyYXkuZWRnZS50YXJnZXRFbmRwb2ludCgpO1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbGluZVNlZ21lbnQuZ2V0U3RhcnQoKTsgc3RhcnQuc2V0WChsaW5lU3RhcnQueCk7IHN0YXJ0LnNldFkobGluZVN0YXJ0LnkpO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGxpbmVTZWdtZW50LmdldEVuZCgpOyBlbmQuc2V0WChsaW5lRW5kLngpOyBlbmQuc2V0WShsaW5lRW5kLnkpO1xuXG4gICAgICAgICAgICAvLyBQcm9kdWN0XG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VHbHlwaDIgPSBnbHlwaC5jcmVhdGVTcGVjaWVzUmVmZXJlbmNlR2x5cGgoKTtcbiAgICAgICAgICAgIHJlZmVyZW5jZUdseXBoMi5zZXRTcGVjaWVzR2x5cGhJZCggICsgJ19nbHlwaCcpO1xuICAgICAgICAgICAgcmVmZXJlbmNlR2x5cGgyLnNldFJvbGUoNSk7XG4gICAgICAgICAgICByZWZlcmVuY2VHbHlwaDIuc2V0SWQoXCJyZWR1Y2VkX3Byb2R1Y3RfXCIgKyAoaSsxKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB3cml0ZXIgPSBuZXcgbGlic2JtbEluc3RhbmNlLlNCTUxXcml0ZXIoKVxuICAgICAgICBjb25zdCBzZXJpYWxpemVkU0JNTCA9IHdyaXRlci53cml0ZVNCTUxUb1N0cmluZyhzYm1sRG9jKVxuXG4gICAgICAgIGxpYnNibWxJbnN0YW5jZS5kZXN0cm95KHNibWxEb2MpXG4gICAgICAgIGxpYnNibWxJbnN0YW5jZS5kZXN0cm95KHdyaXRlcilcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZWRTQk1MO1xuICAgIH1cbiAgICBcbiAgICBqc29uVG9TYm1sLmJ1aWxkUmVhY3Rpb25zID0gZnVuY3Rpb24obW9kZWwpIHt9XG4gICAganNvblRvU2JtbC5pc1Byb2Nlc3NOb2RlID0gZnVuY3Rpb24obm9kZUNsYXNzKSB7XG4gICAgICAgIHJldHVybiBub2RlQ2xhc3MuZW5kc1dpdGgoXCJwcm9jZXNzXCIpIHx8IG5vZGVDbGFzcyA9PSBcImFzc29jaWF0aW9uXCIgfHwgbm9kZUNsYXNzID09IFwiZGlzc29jaWF0aW9uXCI7XG4gICAgfVxuICAgIGpzb25Ub1NibWwuaXNMb2dpY2FsT3BlcmF0b3JOb2RlID0gZnVuY3Rpb24obm9kZUNsYXNzKSB7XG4gICAgICAgIHJldHVybiBub2RlQ2xhc3MgPT0gXCJhbmRcIiB8fCBub2RlQ2xhc3MgPT0gXCJub3RcIiB8fCBub2RlQ2xhc3MgPT0gXCJvclwiIHx8IG5vZGVDbGFzcyA9PSBcInVua25vd24gbG9naWNhbCBvcGVyYXRvclwiXG4gICAgfVxuICAgIGpzb25Ub1NibWwuaXNTcGVjaWVzID0gZnVuY3Rpb24obm9kZUNsYXNzKSB7XG4gICAgICAgIHJldHVybiAhanNvblRvU2JtbC5pc0xvZ2ljYWxPcGVyYXRvck5vZGUobm9kZUNsYXNzKSAmJiAhanNvblRvU2JtbC5pc1Byb2Nlc3NOb2RlKG5vZGVDbGFzcylcbiAgICAgICAgJiYgIG5vZGVDbGFzcyAhPSBcImNvbXBhcnRtZW50XCI7XG4gICAgfVxuICAgIGpzb25Ub1NibWwuaXNNb2RpZmllciA9IGZ1bmN0aW9uKGVkZ2VDbGFzcykge1xuICAgICAgICBpZihtb2RpZmllck5vdGF0aW9uRWRnZVtlZGdlQ2xhc3NdKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAganNvblRvU2JtbC5pc1JlZHVjZWRBcmMgPSBmdW5jdGlvbihlZGdlQ2xhc3MpIHtcbiAgICAgICAgaWYocmVkdWNlZE5vdGF0aW9uRWRnZVtlZGdlQ2xhc3NdKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAganNvblRvU2JtbC5idWlsZFN0cmluZyA9IGZ1bmN0aW9uKG9iaikge31cbiAgICBqc29uVG9TYm1sLmdldFJlbmRlckV4dGVuc2lvblNiZ25tbCA9IGZ1bmN0aW9uKHJlbmRlckluZm8pIHt9XG4gICAganNvblRvU2JtbC5nZXRBbm5vdGF0aW9uRXh0ZW5zaW9uID0gZnVuY3Rpb24oY3lFbGVtZW50KSB7fVxuICAgIGpzb25Ub1NibWwuZ2V0R2x5cGhTYmdubWwgPSBmdW5jdGlvbihub2RlLCB2ZXJzaW9uLCB2aXNpYmxlID0gdHJ1ZSl7fVxuICAgIGpzb25Ub1NibWwuZ2V0T3JDcmVhdGVFeHRlbnNpb24gPSBmdW5jdGlvbihlbGVtZW50KSB7fVxuICAgIGpzb25Ub1NibWwuZ2V0QXJjU2Jnbm1sID0gZnVuY3Rpb24oZWRnZSwgdmVyc2lvbiwgaGlkZGVuID0gZmFsc2Upe31cbiAgICBqc29uVG9TYm1sLmFkZEdseXBoQmJveCA9IGZ1bmN0aW9uKG5vZGUpe31cbiAgICBqc29uVG9TYm1sLmFkZFN0YXRlQW5kSW5mb0Jib3ggPSBmdW5jdGlvbihub2RlLCBib3hHbHlwaCl7fVxuICAgIGpzb25Ub1NibWwuYWRkU3RhdGVCb3hHbHlwaCA9IGZ1bmN0aW9uKG5vZGUsIGlkLCBtYWluR2x5cGgpe31cbiAgICBqc29uVG9TYm1sLmFkZEJpbmRpbmdCb3hHbHlwaCA9IGZ1bmN0aW9uKG5vZGUsIGlkLCBtYWluR2x5cGgpe31cbiAgICBqc29uVG9TYm1sLmFkZFJlc2lkdWVCb3hHbHlwaCA9IGZ1bmN0aW9uKG5vZGUsIGlkLCBtYWluR2x5cGgpe31cbiAgICBqc29uVG9TYm1sLmFkZEluZm9Cb3hHbHlwaCA9IGZ1bmN0aW9uIChub2RlLCBpZCwgbWFpbkdseXBoKSB7fVxuICAgIGpzb25Ub1NibWwuY2hpbGRPZk5vbmUgPSBmdW5jdGlvbihlbGUsIG5vZGVzKSB7fVxuICAgIHJldHVybiBqc29uVG9TYm1sO1xufVxuIl0sIm5hbWVzIjpbImxpYnNibWwiLCJyZXF1aXJlIiwibGlic2JtbEluc3RhbmNlIiwicGtnVmVyc2lvbiIsInZlcnNpb24iLCJwa2dOYW1lIiwibmFtZSIsInByZXR0eXByaW50IiwicGQiLCJ4bWwyanMiLCJtYXBQcm9wZXJ0aWVzQnVpbGRlciIsIkJ1aWxkZXIiLCJyb290TmFtZSIsImNvbXBvdW5kRXh0ZW5zaW9uQnVpbGRlciIsInRleHRVdGlsaXRpZXMiLCJjbGFzc2VzIiwibW9kdWxlIiwiZXhwb3J0cyIsImVsZW1lbnRVdGlsaXRpZXMiLCJncmFwaFV0aWxpdGllcyIsImV4cGVyaW1lbnRhbERhdGFPdmVybGF5Iiwic2JtbFNpbXVsYXRpb25VdGlsaXRpZXMiLCJjeSIsIm5vZGVzVG9TYm8iLCJyZWR1Y2VkTm90YXRpb25FZGdlIiwibW9kaWZpZXJOb3RhdGlvbkVkZ2UiLCJ0d29PclRocmVlRWRnZSIsImpzb25Ub1NibWwiLCJwYXJhbSIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJjcmVhdGVTYm1sIiwiZmlsZW5hbWUiLCJqc09iaiIsImJ1aWxkSnNPYmoiLCJlZGdlcyIsIm5vZGVzIiwic2JtbERvYyIsIlNCTUxEb2N1bWVudCIsIm1vZGVsIiwiY3JlYXRlTW9kZWwiLCJzZXRJZCIsImVuYWJsZVBhY2thZ2UiLCJMYXlvdXRFeHRlbnNpb24iLCJwcm90b3R5cGUiLCJnZXRYbWxuc0wzVjFWMSIsInNldFBhY2thZ2VSZXF1aXJlZCIsImxheW91dFBsdWdpbiIsImNhc3RPYmplY3QiLCJmaW5kUGx1Z2luIiwiTGF5b3V0TW9kZWxQbHVnaW4iLCJsYXlvdXQiLCJjcmVhdGVMYXlvdXQiLCJkaW0iLCJnZXREaW1lbnNpb25zIiwiYm94IiwiZWxlbWVudHMiLCJib3VuZGluZ0JveCIsInNldFdpZHRoIiwidyIsInNldEhlaWdodCIsImgiLCJwYXJhbWV0ZXJzIiwiZ2V0UGFyYW1ldGVycyIsIl9pdGVyYXRvciIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiX3N0ZXAiLCJzIiwibiIsImRvbmUiLCJwIiwidmFsdWUiLCJjcmVhdGVQYXJhbWV0ZXIiLCJpZCIsInNldE5hbWUiLCJzZXRWYWx1ZSIsInNldENvbnN0YW50IiwiY29uc3RhbnQiLCJlcnIiLCJlIiwiZiIsImkiLCJsZW5ndGgiLCJub2RlQ2xhc3MiLCJfcHJpdmF0ZSIsImRhdGEiLCJjb21wIiwiY3JlYXRlQ29tcGFydG1lbnQiLCJjb21wSWQiLCJyZXBsYWNlIiwic2ltdWxhdGlvbkRhdGEiLCJzZXRTaXplIiwic2V0U3BhdGlhbERpbWVuc2lvbnMiLCJsYWJlbCIsImdseXBoIiwiY3JlYXRlQ29tcGFydG1lbnRHbHlwaCIsInNldENvbXBhcnRtZW50SWQiLCJ4IiwieSIsInBvc2l0aW9uIiwid2lkdGgiLCJoZWlnaHQiLCJiYiIsImdldEJvdW5kaW5nQm94Iiwic2V0WCIsInNldFkiLCJpbmZvSWQiLCJkZWZhdWx0TmVlZGVkIiwiYWN0aXZlIiwiaHlwb3RoZXRpY2FsIiwibXVsdGltZXIiLCJpbmNsdWRlcyIsInRyaW0iLCJpc1NwZWNpZXMiLCJuZXdTcGVjaWVzIiwiY3JlYXRlU3BlY2llcyIsInNldFNCT1Rlcm0iLCJwYXJlbnQiLCJzZXRDb21wYXJ0bWVudCIsInNldEhhc09ubHlTdWJzdGFuY2VVbml0cyIsInNldEluaXRpYWxBbW91bnQiLCJzZXRJbml0aWFsQ29uY2VudHJhdGlvbiIsInNldEJvdW5kYXJ5Q29uZGl0aW9uIiwibmV3X2lkIiwibmV3U3RyIiwiY3JlYXRlU3BlY2llc0dseXBoIiwic2V0U3BlY2llc0lkIiwiYW5ub3RhdGlvblN0cmluZyIsImdldElkIiwiX2l0ZXJhdG9yMiIsIl9zdGVwMiIsIml0ZW0iLCJiYm94IiwiYWJzb2x1dGVDb29yZHMiLCJBdXhpbGlhcnlVbml0IiwiZ2V0QWJzb2x1dGVDb29yZCIsImJvdW5kaW5nQm94U3RyIiwiY2xhenoiLCJyZXNpZHVlIiwidmFyaWFibGUiLCJyZWdpb24iLCJ0ZXh0Iiwic2V0QW5ub3RhdGlvbiIsInByb2Nlc3NlcyIsImZvckVhY2giLCJlbGUiLCJlbGVDbGFzcyIsImlzUHJvY2Vzc05vZGUiLCJjb25uZWN0ZWRFZGdlcyIsInNvdXJjZXMiLCJ0YXJnZXRzIiwibW9kaWZpZXJzIiwiZWxlSWQiLCJlZGdlIiwic291cmNlIiwicHVzaCIsImlzTW9kaWZpZXIiLCJpc0xvZ2ljYWxPcGVyYXRvck5vZGUiLCJfaXRlcmF0b3IzIiwiZW50cmllcyIsIl9zdGVwMyIsIl9sb29wIiwiX3N0ZXAzJHZhbHVlIiwiX3NsaWNlZFRvQXJyYXkiLCJwcm9jZXNzQXJyYXkiLCJwcm9jZXNzIiwicHJvY2Vzc0NsYXNzIiwicHJvY2Vzc0lkIiwicnhuIiwiY3JlYXRlUmVhY3Rpb24iLCJzZXRSZXZlcnNpYmxlIiwiX2l0ZXJhdG9yNSIsIl9zdGVwNSIsInNvdXJjZUVkZ2UiLCJzb3VyY2VJZCIsInNwcjEiLCJjcmVhdGVSZWFjdGFudCIsInNldFNwZWNpZXMiLCJzZXRTdG9pY2hpb21ldHJ5IiwiX2l0ZXJhdG9yNiIsIl9zdGVwNiIsInRhcmdldEVkZ2UiLCJ0YXJnZXRJZCIsInRhcmdldCIsInNwcjIiLCJjcmVhdGVQcm9kdWN0IiwiX2l0ZXJhdG9yNyIsIl9zdGVwNyIsIm1vZGlmaWVyRWRnZSIsIm1vZGlmaWVySWQiLCJtb2RpZmllciIsImNyZWF0ZU1vZGlmaWVyIiwic291cmNlRWRnZUNsYXNzIiwidGFyZ2V0RWRnZUNsYXNzIiwiazEiLCJjcmVhdGVLaW5ldGljTGF3IiwibHAiLCJsb2NhbHAiLCJjcmVhdGVMb2NhbFBhcmFtZXRlciIsInF1YW50aXR5IiwicGFyc2VyIiwiU0JNTEZvcm11bGFQYXJzZXIiLCJrbWF0aCIsInBhcnNlTDNGb3JtdWxhIiwic2V0TWF0aCIsImNyZWF0ZVJlYWN0aW9uR2x5cGgiLCJzZXRSZWFjdGlvbklkIiwibGluZVNlZ21lbnQiLCJjcmVhdGVMaW5lU2VnbWVudCIsInBvcnRzMSIsInBvcnRzMiIsImRpcmVjdGlvbiIsInBvcnRaZXJvSXNJbnB1dCIsInBvcnRPbmVJc0lucHV0IiwiZW5kc1dpdGgiLCJzdGFydFgiLCJzdGFydFkiLCJlbmRYIiwiZW5kWSIsInN0YXJ0IiwiZ2V0U3RhcnQiLCJlbmQiLCJnZXRFbmQiLCJqIiwic3Vic3RyYXRlIiwic3Vic3RyYXRlSWQiLCJyZWZlcmVuY2VHbHlwaCIsImNyZWF0ZVNwZWNpZXNSZWZlcmVuY2VHbHlwaCIsInNldFNwZWNpZXNHbHlwaElkIiwic2V0Um9sZSIsImxpbmVTdGFydCIsInNvdXJjZUVuZHBvaW50IiwibGluZUVuZCIsInRhcmdldEVuZHBvaW50IiwicHJvZHVjdCIsInByb2R1Y3RJZCIsImRlZmF1bHRDb21wYXJ0bWVudCIsInJlZHVjZWRQcm9jZXNzZXMiLCJpc1JlZHVjZWRBcmMiLCJfaXRlcmF0b3I0IiwiX3N0ZXA0IiwiX3N0ZXA0JHZhbHVlIiwicmVkdWNlZFByb2Nlc3NBcnJheSIsImVkZ2VJZCIsInJlZmVyZW5jZUdseXBoMiIsIndyaXRlciIsIlNCTUxXcml0ZXIiLCJzZXJpYWxpemVkU0JNTCIsIndyaXRlU0JNTFRvU3RyaW5nIiwiZGVzdHJveSIsImJ1aWxkUmVhY3Rpb25zIiwiZWRnZUNsYXNzIiwiYnVpbGRTdHJpbmciLCJvYmoiLCJnZXRSZW5kZXJFeHRlbnNpb25TYmdubWwiLCJyZW5kZXJJbmZvIiwiZ2V0QW5ub3RhdGlvbkV4dGVuc2lvbiIsImN5RWxlbWVudCIsImdldEdseXBoU2Jnbm1sIiwibm9kZSIsInZpc2libGUiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJnZXRPckNyZWF0ZUV4dGVuc2lvbiIsImVsZW1lbnQiLCJnZXRBcmNTYmdubWwiLCJoaWRkZW4iLCJhZGRHbHlwaEJib3giLCJhZGRTdGF0ZUFuZEluZm9CYm94IiwiYm94R2x5cGgiLCJhZGRTdGF0ZUJveEdseXBoIiwibWFpbkdseXBoIiwiYWRkQmluZGluZ0JveEdseXBoIiwiYWRkUmVzaWR1ZUJveEdseXBoIiwiYWRkSW5mb0JveEdseXBoIiwiY2hpbGRPZk5vbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sbml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sif-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-sif-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var elementUtilities, cy;\n  function jsonToSif(param) {\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  function isValidEnd(node) {\n    return elementUtilities.isSIFNode(node) || node.data('class') == 'topology group';\n  }\n  jsonToSif.convert = function () {\n    var lines = [];\n    var edges = cy.edges().filter(function (edge) {\n      return elementUtilities.isSIFEdge(edge) && isValidEnd(edge.source()) && isValidEnd(edge.target());\n    });\n    var nodes = cy.nodes().filter(function (node) {\n      return elementUtilities.isSIFNode(node);\n    });\n    nodes = nodes.not(edges.connectedNodes());\n    var setToStr = function setToStr(set) {\n      if (!set) {\n        return '';\n      }\n      return Object.keys(set).join(';');\n    };\n    var getLabel = function getLabel(node) {\n      return node.data('label');\n    };\n    var isValidLabel = function isValidLabel(label) {\n      return !!label;\n    };\n    edges.forEach(function (edge) {\n      var srcNames, tgtNames;\n      var getNames = function getNames(node) {\n        var names;\n        if (node.isParent()) {\n          names = node.children().map(getLabel);\n        } else {\n          names = [getLabel(node)];\n        }\n        return names && names.filter(isValidLabel);\n      };\n      var srcNames = getNames(edge.source());\n      var tgtNames = getNames(edge.target());\n      if (!srcNames || !tgtNames || srcNames.length == 0 || tgtNames.length == 0) {\n        return;\n      }\n      var type = edge.data('class');\n      var pcIDSet = edge.data('pcIDSet');\n      var siteLocSet = edge.data('siteLocSet');\n      var pcIDs = setToStr(pcIDSet);\n      var siteLocations = setToStr(siteLocSet);\n      srcNames.forEach(function (srcName) {\n        tgtNames.forEach(function (tgtName) {\n          var line = [srcName, type, tgtName, pcIDs, siteLocations].join('\\t');\n          lines.push(line);\n        });\n      });\n    });\n    nodes.forEach(function (node) {\n      var label = getLabel(node);\n      if (label) {\n        lines.push(label);\n      }\n    });\n    var text = lines.join('\\n');\n    return text;\n  };\n  return jsonToSif;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2pzb24tdG8tc2lmLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsImpzb25Ub1NpZiIsInBhcmFtIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImlzVmFsaWRFbmQiLCJub2RlIiwiaXNTSUZOb2RlIiwiZGF0YSIsImNvbnZlcnQiLCJsaW5lcyIsImVkZ2VzIiwiZmlsdGVyIiwiZWRnZSIsImlzU0lGRWRnZSIsInNvdXJjZSIsInRhcmdldCIsIm5vZGVzIiwibm90IiwiY29ubmVjdGVkTm9kZXMiLCJzZXRUb1N0ciIsInNldCIsIk9iamVjdCIsImtleXMiLCJqb2luIiwiZ2V0TGFiZWwiLCJpc1ZhbGlkTGFiZWwiLCJsYWJlbCIsImZvckVhY2giLCJzcmNOYW1lcyIsInRndE5hbWVzIiwiZ2V0TmFtZXMiLCJuYW1lcyIsImlzUGFyZW50IiwiY2hpbGRyZW4iLCJtYXAiLCJsZW5ndGgiLCJ0eXBlIiwicGNJRFNldCIsInNpdGVMb2NTZXQiLCJwY0lEcyIsInNpdGVMb2NhdGlvbnMiLCJzcmNOYW1lIiwidGd0TmFtZSIsImxpbmUiLCJwdXNoIiwidGV4dCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvanNvbi10by1zaWYtY29udmVydGVyLWZhY3RvcnkuanM/NzQ2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXG4gIHZhciBlbGVtZW50VXRpbGl0aWVzLCBjeTtcblxuICBmdW5jdGlvbiBqc29uVG9TaWYocGFyYW0pIHtcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1ZhbGlkRW5kKG5vZGUpIHtcbiAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5pc1NJRk5vZGUoIG5vZGUgKSB8fCBub2RlLmRhdGEoJ2NsYXNzJykgPT0gJ3RvcG9sb2d5IGdyb3VwJztcbiAgfVxuXG4gIGpzb25Ub1NpZi5jb252ZXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxpbmVzID0gW107XG5cbiAgICB2YXIgZWRnZXMgPSBjeS5lZGdlcygpLmZpbHRlciggZnVuY3Rpb24oIGVkZ2UgKSB7XG4gICAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5pc1NJRkVkZ2UoIGVkZ2UgKVxuICAgICAgICAmJiBpc1ZhbGlkRW5kKCBlZGdlLnNvdXJjZSgpIClcbiAgICAgICAgJiYgaXNWYWxpZEVuZCggZWRnZS50YXJnZXQoKSApO1xuICAgIH0gKTtcblxuICAgIHZhciBub2RlcyA9IGN5Lm5vZGVzKCkuZmlsdGVyKCBmdW5jdGlvbiggbm9kZSApIHtcbiAgICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmlzU0lGTm9kZSggbm9kZSApO1xuICAgIH0gKTtcblxuICAgIG5vZGVzID0gbm9kZXMubm90KCBlZGdlcy5jb25uZWN0ZWROb2RlcygpICk7XG5cbiAgICB2YXIgc2V0VG9TdHIgPSBmdW5jdGlvbihzZXQpIHtcbiAgICAgIGlmICghc2V0KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHNldCkuam9pbignOycpO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0TGFiZWwgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZS5kYXRhKCdsYWJlbCcpO1xuICAgIH07XG5cbiAgICB2YXIgaXNWYWxpZExhYmVsID0gZnVuY3Rpb24obGFiZWwpe1xuICAgICAgcmV0dXJuICEhbGFiZWw7XG4gICAgfVxuXG4gICAgZWRnZXMuZm9yRWFjaCggZnVuY3Rpb24oIGVkZ2UgKSB7XG4gICAgICB2YXIgc3JjTmFtZXMsIHRndE5hbWVzO1xuXG4gICAgICB2YXIgZ2V0TmFtZXMgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciBuYW1lcztcblxuICAgICAgICBpZiAobm9kZS5pc1BhcmVudCgpKSB7XG4gICAgICAgICAgbmFtZXMgPSAgbm9kZS5jaGlsZHJlbigpLm1hcCggZ2V0TGFiZWwgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5hbWVzID0gWyBnZXRMYWJlbChub2RlKSBdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5hbWVzICYmIG5hbWVzLmZpbHRlciggaXNWYWxpZExhYmVsICk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgc3JjTmFtZXMgPSBnZXROYW1lcyhlZGdlLnNvdXJjZSgpKTtcbiAgICAgIHZhciB0Z3ROYW1lcyA9IGdldE5hbWVzKGVkZ2UudGFyZ2V0KCkpO1xuXG4gICAgICBpZiAoICFzcmNOYW1lcyB8fCAhdGd0TmFtZXMgfHwgc3JjTmFtZXMubGVuZ3RoID09IDAgfHwgdGd0TmFtZXMubGVuZ3RoID09IDAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHR5cGUgPSBlZGdlLmRhdGEoJ2NsYXNzJyk7XG4gICAgICB2YXIgcGNJRFNldCA9IGVkZ2UuZGF0YSgncGNJRFNldCcpO1xuICAgICAgdmFyIHNpdGVMb2NTZXQgPSBlZGdlLmRhdGEoJ3NpdGVMb2NTZXQnKTtcbiAgICAgIHZhciBwY0lEcyA9IHNldFRvU3RyKCBwY0lEU2V0ICk7XG4gICAgICB2YXIgc2l0ZUxvY2F0aW9ucyA9IHNldFRvU3RyKCBzaXRlTG9jU2V0ICk7XG5cbiAgICAgIHNyY05hbWVzLmZvckVhY2goIHNyY05hbWUgPT4ge1xuICAgICAgICB0Z3ROYW1lcy5mb3JFYWNoKCB0Z3ROYW1lID0+IHtcbiAgICAgICAgICB2YXIgbGluZSA9IFsgc3JjTmFtZSwgdHlwZSwgdGd0TmFtZSwgcGNJRHMsIHNpdGVMb2NhdGlvbnMgXS5qb2luKCAnXFx0JyApO1xuICAgICAgICAgIGxpbmVzLnB1c2goIGxpbmUgKTtcbiAgICAgICAgfSApO1xuICAgICAgfSApO1xuICAgIH0gKTtcblxuICAgIG5vZGVzLmZvckVhY2goIGZ1bmN0aW9uKCBub2RlICkge1xuICAgICAgdmFyIGxhYmVsID0gZ2V0TGFiZWwoIG5vZGUgKTtcblxuICAgICAgaWYgKCBsYWJlbCApIHtcbiAgICAgICAgbGluZXMucHVzaCggbGFiZWwgKTtcbiAgICAgIH1cbiAgICB9ICk7XG5cbiAgICB2YXIgdGV4dCA9IGxpbmVzLmpvaW4oICdcXG4nICk7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGpzb25Ub1NpZjtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFXO0VBRTFCLElBQUlDLGdCQUFnQixFQUFFQyxFQUFFO0VBRXhCLFNBQVNDLFNBQVNBLENBQUNDLEtBQUssRUFBRTtJQUN4QkgsZ0JBQWdCLEdBQUdHLEtBQUssQ0FBQ0gsZ0JBQWdCO0lBQ3pDQyxFQUFFLEdBQUdFLEtBQUssQ0FBQ0MsY0FBYyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNuQztFQUVBLFNBQVNDLFVBQVVBLENBQUNDLElBQUksRUFBRTtJQUN4QixPQUFPUCxnQkFBZ0IsQ0FBQ1EsU0FBUyxDQUFFRCxJQUFLLENBQUMsSUFBSUEsSUFBSSxDQUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksZ0JBQWdCO0VBQ3JGO0VBRUFQLFNBQVMsQ0FBQ1EsT0FBTyxHQUFHLFlBQVc7SUFDN0IsSUFBSUMsS0FBSyxHQUFHLEVBQUU7SUFFZCxJQUFJQyxLQUFLLEdBQUdYLEVBQUUsQ0FBQ1csS0FBSyxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFFLFVBQVVDLElBQUksRUFBRztNQUM5QyxPQUFPZCxnQkFBZ0IsQ0FBQ2UsU0FBUyxDQUFFRCxJQUFLLENBQUMsSUFDcENSLFVBQVUsQ0FBRVEsSUFBSSxDQUFDRSxNQUFNLENBQUMsQ0FBRSxDQUFDLElBQzNCVixVQUFVLENBQUVRLElBQUksQ0FBQ0csTUFBTSxDQUFDLENBQUUsQ0FBQztJQUNsQyxDQUFFLENBQUM7SUFFSCxJQUFJQyxLQUFLLEdBQUdqQixFQUFFLENBQUNpQixLQUFLLENBQUMsQ0FBQyxDQUFDTCxNQUFNLENBQUUsVUFBVU4sSUFBSSxFQUFHO01BQzlDLE9BQU9QLGdCQUFnQixDQUFDUSxTQUFTLENBQUVELElBQUssQ0FBQztJQUMzQyxDQUFFLENBQUM7SUFFSFcsS0FBSyxHQUFHQSxLQUFLLENBQUNDLEdBQUcsQ0FBRVAsS0FBSyxDQUFDUSxjQUFjLENBQUMsQ0FBRSxDQUFDO0lBRTNDLElBQUlDLFFBQVEsR0FBRyxTQUFYQSxRQUFRQSxDQUFZQyxHQUFHLEVBQUU7TUFDM0IsSUFBSSxDQUFDQSxHQUFHLEVBQUU7UUFDUixPQUFPLEVBQUU7TUFDWDtNQUVBLE9BQU9DLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDRixHQUFHLENBQUMsQ0FBQ0csSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSUMsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQVluQixJQUFJLEVBQUU7TUFDNUIsT0FBT0EsSUFBSSxDQUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJa0IsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQVlDLEtBQUssRUFBQztNQUNoQyxPQUFPLENBQUMsQ0FBQ0EsS0FBSztJQUNoQixDQUFDO0lBRURoQixLQUFLLENBQUNpQixPQUFPLENBQUUsVUFBVWYsSUFBSSxFQUFHO01BQzlCLElBQUlnQixRQUFRLEVBQUVDLFFBQVE7TUFFdEIsSUFBSUMsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQVl6QixJQUFJLEVBQUU7UUFDNUIsSUFBSTBCLEtBQUs7UUFFVCxJQUFJMUIsSUFBSSxDQUFDMkIsUUFBUSxDQUFDLENBQUMsRUFBRTtVQUNuQkQsS0FBSyxHQUFJMUIsSUFBSSxDQUFDNEIsUUFBUSxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxDQUFFVixRQUFTLENBQUM7UUFDMUMsQ0FBQyxNQUNJO1VBQ0RPLEtBQUssR0FBRyxDQUFFUCxRQUFRLENBQUNuQixJQUFJLENBQUMsQ0FBRTtRQUM5QjtRQUVBLE9BQU8wQixLQUFLLElBQUlBLEtBQUssQ0FBQ3BCLE1BQU0sQ0FBRWMsWUFBYSxDQUFDO01BQzlDLENBQUM7TUFFRCxJQUFJRyxRQUFRLEdBQUdFLFFBQVEsQ0FBQ2xCLElBQUksQ0FBQ0UsTUFBTSxDQUFDLENBQUMsQ0FBQztNQUN0QyxJQUFJZSxRQUFRLEdBQUdDLFFBQVEsQ0FBQ2xCLElBQUksQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQztNQUV0QyxJQUFLLENBQUNhLFFBQVEsSUFBSSxDQUFDQyxRQUFRLElBQUlELFFBQVEsQ0FBQ08sTUFBTSxJQUFJLENBQUMsSUFBSU4sUUFBUSxDQUFDTSxNQUFNLElBQUksQ0FBQyxFQUFHO1FBQzVFO01BQ0Y7TUFFQSxJQUFJQyxJQUFJLEdBQUd4QixJQUFJLENBQUNMLElBQUksQ0FBQyxPQUFPLENBQUM7TUFDN0IsSUFBSThCLE9BQU8sR0FBR3pCLElBQUksQ0FBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQztNQUNsQyxJQUFJK0IsVUFBVSxHQUFHMUIsSUFBSSxDQUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDO01BQ3hDLElBQUlnQyxLQUFLLEdBQUdwQixRQUFRLENBQUVrQixPQUFRLENBQUM7TUFDL0IsSUFBSUcsYUFBYSxHQUFHckIsUUFBUSxDQUFFbUIsVUFBVyxDQUFDO01BRTFDVixRQUFRLENBQUNELE9BQU8sQ0FBRSxVQUFBYyxPQUFPLEVBQUk7UUFDM0JaLFFBQVEsQ0FBQ0YsT0FBTyxDQUFFLFVBQUFlLE9BQU8sRUFBSTtVQUMzQixJQUFJQyxJQUFJLEdBQUcsQ0FBRUYsT0FBTyxFQUFFTCxJQUFJLEVBQUVNLE9BQU8sRUFBRUgsS0FBSyxFQUFFQyxhQUFhLENBQUUsQ0FBQ2pCLElBQUksQ0FBRSxJQUFLLENBQUM7VUFDeEVkLEtBQUssQ0FBQ21DLElBQUksQ0FBRUQsSUFBSyxDQUFDO1FBQ3BCLENBQUUsQ0FBQztNQUNMLENBQUUsQ0FBQztJQUNMLENBQUUsQ0FBQztJQUVIM0IsS0FBSyxDQUFDVyxPQUFPLENBQUUsVUFBVXRCLElBQUksRUFBRztNQUM5QixJQUFJcUIsS0FBSyxHQUFHRixRQUFRLENBQUVuQixJQUFLLENBQUM7TUFFNUIsSUFBS3FCLEtBQUssRUFBRztRQUNYakIsS0FBSyxDQUFDbUMsSUFBSSxDQUFFbEIsS0FBTSxDQUFDO01BQ3JCO0lBQ0YsQ0FBRSxDQUFDO0lBRUgsSUFBSW1CLElBQUksR0FBR3BDLEtBQUssQ0FBQ2MsSUFBSSxDQUFFLElBQUssQ0FBQztJQUM3QixPQUFPc0IsSUFBSTtFQUNiLENBQUM7RUFFRCxPQUFPN0MsU0FBUztBQUNsQixDQUFDIiwiaWdub3JlTGlzdCI6W119\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sif-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/keyboard-input-utilities-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/keyboard-input-utilities-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Listen document for keyboard inputs and exports the utilities that it makes use of\n */\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  function keyboardInputUtilities(param) {\n    // Listen to events on network container\n    $(document).on('keydown', '.integer-input', function (e) {\n      var value = $(this).attr('value');\n      return keyboardInputUtilities.isIntegerFieldInput(value, e);\n    });\n    $(document).on('keydown', '.float-input', function (e) {\n      var value = $(this).attr('value');\n      return keyboardInputUtilities.isFloatFieldInput(value, e);\n    });\n    $(document).on('change', '.integer-input,.float-input', function (e) {\n      var min = $(this).attr('min');\n      var max = $(this).attr('max');\n      var value = parseFloat($(this).val());\n      if (min != null) {\n        min = parseFloat(min);\n      }\n      if (max != null) {\n        max = parseFloat(max);\n      }\n      if (min != null && value < min) {\n        value = min;\n      } else if (max != null && value > max) {\n        value = max;\n      }\n      if (isNaN(value)) {\n        if (min != null) {\n          value = min;\n        } else if (max != null) {\n          value = max;\n        } else {\n          value = 0;\n        }\n      }\n      $(this).val(\"\" + value);\n    });\n  }\n  keyboardInputUtilities.isNumberKey = function (e) {\n    return e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105;\n  };\n  keyboardInputUtilities.isDotKey = function (e) {\n    return e.keyCode === 190;\n  };\n  keyboardInputUtilities.isMinusSignKey = function (e) {\n    return e.keyCode === 109 || e.keyCode === 189;\n  };\n  keyboardInputUtilities.isLeftKey = function (e) {\n    return e.keyCode === 37;\n  };\n  keyboardInputUtilities.isRightKey = function (e) {\n    return e.keyCode === 39;\n  };\n  keyboardInputUtilities.isBackspaceKey = function (e) {\n    return e.keyCode === 8;\n  };\n  keyboardInputUtilities.isTabKey = function (e) {\n    return e.keyCode === 9;\n  };\n  keyboardInputUtilities.isEnterKey = function (e) {\n    return e.keyCode === 13;\n  };\n  keyboardInputUtilities.isIntegerFieldInput = function (value, e) {\n    return this.isCtrlOrCommandPressed(e) || this.isMinusSignKey(e) || this.isNumberKey(e) || this.isBackspaceKey(e) || this.isTabKey(e) || this.isLeftKey(e) || this.isRightKey(e) || this.isEnterKey(e);\n  };\n  keyboardInputUtilities.isFloatFieldInput = function (value, e) {\n    return this.isIntegerFieldInput(value, e) || this.isDotKey(e);\n  };\n  keyboardInputUtilities.isCtrlOrCommandPressed = function (e) {\n    return e.ctrlKey || e.metaKey;\n  };\n  return keyboardInputUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/keyboard-input-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/layout-loader-factory.js":
/*!************************************************!*\
  !*** ./src/utilities/layout-loader-factory.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\nmodule.exports = function () {\n  var cy, mainUtilities;\n  function layoutLoader(param) {\n    cy = param.sbgnCyInstance.getCy();\n    mainUtilities = param.mainUtilities;\n  }\n  layoutLoader.load = function (layoutText, byName) {\n    var lines = tdParser.getLinesArray(layoutText);\n    var posMap = {};\n    lines.forEach(function (line) {\n      var tabs = tdParser.getTabsArray(line);\n      var nodeId;\n      if (byName) {\n        var matchingNodes = layoutLoader.getNodesByName(tabs[0]);\n        if (matchingNodes.length === 0) {\n          return;\n        }\n\n        // ideally there is only one matching node\n        // use the first one in any case\n        nodeId = matchingNodes.id();\n      } else {\n        nodeId = tabs[0];\n      }\n      var posX = parseFloat(tabs[1]);\n      var posY = parseFloat(tabs[2]);\n      posMap[nodeId] = {\n        x: posX,\n        y: posY\n      };\n    });\n    var options = {\n      name: 'preset',\n      positions: posMap,\n      fit: false\n    };\n    mainUtilities.performLayout(options);\n  };\n  layoutLoader.getNodesByName = function (name) {\n    return cy.nodes().filter('[label=\"' + name + '\"]');\n  };\n  return layoutLoader;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xheW91dC1sb2FkZXItZmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsdUVBQXdCLENBQUM7QUFFaERDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVc7RUFDMUIsSUFBSUMsRUFBRSxFQUFFQyxhQUFhO0VBRXJCLFNBQVNDLFlBQVlBLENBQUVDLEtBQUssRUFBRztJQUM3QkgsRUFBRSxHQUFHRyxLQUFLLENBQUNDLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDakNKLGFBQWEsR0FBR0UsS0FBSyxDQUFDRixhQUFhO0VBQ3JDO0VBRUFDLFlBQVksQ0FBQ0ksSUFBSSxHQUFHLFVBQVVDLFVBQVUsRUFBRUMsTUFBTSxFQUFHO0lBQ2pELElBQUlDLEtBQUssR0FBR2IsUUFBUSxDQUFDYyxhQUFhLENBQUVILFVBQVcsQ0FBQztJQUNoRCxJQUFJSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRWZGLEtBQUssQ0FBQ0csT0FBTyxDQUFFLFVBQVVDLElBQUksRUFBRztNQUM5QixJQUFJQyxJQUFJLEdBQUdsQixRQUFRLENBQUNtQixZQUFZLENBQUVGLElBQUssQ0FBQztNQUV4QyxJQUFJRyxNQUFNO01BRVYsSUFBS1IsTUFBTSxFQUFHO1FBQ1osSUFBSVMsYUFBYSxHQUFHZixZQUFZLENBQUNnQixjQUFjLENBQUVKLElBQUksQ0FBRSxDQUFDLENBQUcsQ0FBQztRQUM1RCxJQUFLRyxhQUFhLENBQUNFLE1BQU0sS0FBSyxDQUFDLEVBQUc7VUFDaEM7UUFDRjs7UUFFQTtRQUNBO1FBQ0FILE1BQU0sR0FBR0MsYUFBYSxDQUFDRyxFQUFFLENBQUMsQ0FBQztNQUM3QixDQUFDLE1BQ0k7UUFDSEosTUFBTSxHQUFHRixJQUFJLENBQUUsQ0FBQyxDQUFFO01BQ3BCO01BRUEsSUFBSU8sSUFBSSxHQUFHQyxVQUFVLENBQUVSLElBQUksQ0FBRSxDQUFDLENBQUcsQ0FBQztNQUNsQyxJQUFJUyxJQUFJLEdBQUdELFVBQVUsQ0FBRVIsSUFBSSxDQUFFLENBQUMsQ0FBRyxDQUFDO01BRWxDSCxNQUFNLENBQUVLLE1BQU0sQ0FBRSxHQUFHO1FBQUVRLENBQUMsRUFBRUgsSUFBSTtRQUFFSSxDQUFDLEVBQUVGO01BQUssQ0FBQztJQUN6QyxDQUFFLENBQUM7SUFFSCxJQUFJRyxPQUFPLEdBQUc7TUFDWkMsSUFBSSxFQUFFLFFBQVE7TUFDZEMsU0FBUyxFQUFFakIsTUFBTTtNQUNqQmtCLEdBQUcsRUFBRTtJQUNQLENBQUM7SUFFRDVCLGFBQWEsQ0FBQzZCLGFBQWEsQ0FBRUosT0FBUSxDQUFDO0VBQ3hDLENBQUM7RUFFRHhCLFlBQVksQ0FBQ2dCLGNBQWMsR0FBRyxVQUFVUyxJQUFJLEVBQUc7SUFDN0MsT0FBTzNCLEVBQUUsQ0FBQytCLEtBQUssQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBRSxVQUFVLEdBQUdMLElBQUksR0FBRyxJQUFLLENBQUM7RUFDdEQsQ0FBQztFQUVELE9BQU96QixZQUFZO0FBQ3JCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9sYXlvdXQtbG9hZGVyLWZhY3RvcnkuanM/ZjMwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdGRQYXJzZXIgPSByZXF1aXJlKCcuL3RhYi1kZWxpbWV0ZWQtcGFyc2VyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjeSwgbWFpblV0aWxpdGllcztcblxuICBmdW5jdGlvbiBsYXlvdXRMb2FkZXIoIHBhcmFtICkge1xuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcbiAgICBtYWluVXRpbGl0aWVzID0gcGFyYW0ubWFpblV0aWxpdGllcztcbiAgfVxuXG4gIGxheW91dExvYWRlci5sb2FkID0gZnVuY3Rpb24oIGxheW91dFRleHQsIGJ5TmFtZSApIHtcbiAgICB2YXIgbGluZXMgPSB0ZFBhcnNlci5nZXRMaW5lc0FycmF5KCBsYXlvdXRUZXh0ICk7XG4gICAgdmFyIHBvc01hcCA9IHt9O1xuXG4gICAgbGluZXMuZm9yRWFjaCggZnVuY3Rpb24oIGxpbmUgKSB7XG4gICAgICB2YXIgdGFicyA9IHRkUGFyc2VyLmdldFRhYnNBcnJheSggbGluZSApO1xuXG4gICAgICB2YXIgbm9kZUlkO1xuXG4gICAgICBpZiAoIGJ5TmFtZSApIHtcbiAgICAgICAgdmFyIG1hdGNoaW5nTm9kZXMgPSBsYXlvdXRMb2FkZXIuZ2V0Tm9kZXNCeU5hbWUoIHRhYnNbIDAgXSApO1xuICAgICAgICBpZiAoIG1hdGNoaW5nTm9kZXMubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlkZWFsbHkgdGhlcmUgaXMgb25seSBvbmUgbWF0Y2hpbmcgbm9kZVxuICAgICAgICAvLyB1c2UgdGhlIGZpcnN0IG9uZSBpbiBhbnkgY2FzZVxuICAgICAgICBub2RlSWQgPSBtYXRjaGluZ05vZGVzLmlkKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbm9kZUlkID0gdGFic1sgMCBdO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9zWCA9IHBhcnNlRmxvYXQoIHRhYnNbIDEgXSApO1xuICAgICAgdmFyIHBvc1kgPSBwYXJzZUZsb2F0KCB0YWJzWyAyIF0gKTtcblxuICAgICAgcG9zTWFwWyBub2RlSWQgXSA9IHsgeDogcG9zWCwgeTogcG9zWSB9O1xuICAgIH0gKTtcblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgbmFtZTogJ3ByZXNldCcsXG4gICAgICBwb3NpdGlvbnM6IHBvc01hcCxcbiAgICAgIGZpdDogZmFsc2VcbiAgICB9O1xuXG4gICAgbWFpblV0aWxpdGllcy5wZXJmb3JtTGF5b3V0KCBvcHRpb25zICk7XG4gIH07XG5cbiAgbGF5b3V0TG9hZGVyLmdldE5vZGVzQnlOYW1lID0gZnVuY3Rpb24oIG5hbWUgKSB7XG4gICAgcmV0dXJuIGN5Lm5vZGVzKCkuZmlsdGVyKCAnW2xhYmVsPVwiJyArIG5hbWUgKyAnXCJdJyApO1xuICB9O1xuXG4gIHJldHVybiBsYXlvdXRMb2FkZXI7XG59O1xuIl0sIm5hbWVzIjpbInRkUGFyc2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjeSIsIm1haW5VdGlsaXRpZXMiLCJsYXlvdXRMb2FkZXIiLCJwYXJhbSIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJsb2FkIiwibGF5b3V0VGV4dCIsImJ5TmFtZSIsImxpbmVzIiwiZ2V0TGluZXNBcnJheSIsInBvc01hcCIsImZvckVhY2giLCJsaW5lIiwidGFicyIsImdldFRhYnNBcnJheSIsIm5vZGVJZCIsIm1hdGNoaW5nTm9kZXMiLCJnZXROb2Rlc0J5TmFtZSIsImxlbmd0aCIsImlkIiwicG9zWCIsInBhcnNlRmxvYXQiLCJwb3NZIiwieCIsInkiLCJvcHRpb25zIiwibmFtZSIsInBvc2l0aW9ucyIsImZpdCIsInBlcmZvcm1MYXlvdXQiLCJub2RlcyIsImZpbHRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/layout-loader-factory.js\n");

/***/ }),

/***/ "./src/utilities/layout-to-text-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/layout-to-text-factory.js ***!
  \*************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var cy;\n  function layoutToText(param) {\n    cy = param.sbgnCyInstance.getCy();\n  }\n  layoutToText.convert = function (byName) {\n    var nodes = cy.nodes();\n    var lines = [];\n    nodes.map(function (node) {\n      var idOrName = byName ? node.data('label') : node.id();\n      var posX = node.position('x');\n      var posY = node.position('y');\n      var line = [idOrName, posX, posY].join('\\t');\n      lines.push(line);\n    });\n    var text = lines.join('\\n');\n    return text;\n  };\n  return layoutToText;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xheW91dC10by10ZXh0LWZhY3RvcnkuanMiLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3kiLCJsYXlvdXRUb1RleHQiLCJwYXJhbSIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJjb252ZXJ0IiwiYnlOYW1lIiwibm9kZXMiLCJsaW5lcyIsIm1hcCIsIm5vZGUiLCJpZE9yTmFtZSIsImRhdGEiLCJpZCIsInBvc1giLCJwb3NpdGlvbiIsInBvc1kiLCJsaW5lIiwiam9pbiIsInB1c2giLCJ0ZXh0Il0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9sYXlvdXQtdG8tdGV4dC1mYWN0b3J5LmpzPzA0ZGIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGN5O1xuXG4gIGZ1bmN0aW9uIGxheW91dFRvVGV4dCggcGFyYW0gKSB7XG4gICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xuICB9XG5cbiAgbGF5b3V0VG9UZXh0LmNvbnZlcnQgPSBmdW5jdGlvbiggYnlOYW1lICkge1xuICAgIHZhciBub2RlcyA9IGN5Lm5vZGVzKCk7XG4gICAgdmFyIGxpbmVzID0gW107XG5cbiAgICBub2Rlcy5tYXAoIGZ1bmN0aW9uKCBub2RlICkge1xuICAgICAgdmFyIGlkT3JOYW1lID0gYnlOYW1lID8gbm9kZS5kYXRhKCdsYWJlbCcpIDogbm9kZS5pZCgpO1xuICAgICAgdmFyIHBvc1ggPSBub2RlLnBvc2l0aW9uKCd4Jyk7XG4gICAgICB2YXIgcG9zWSA9IG5vZGUucG9zaXRpb24oJ3knKTtcblxuICAgICAgdmFyIGxpbmUgPSBbIGlkT3JOYW1lLCBwb3NYLCBwb3NZIF0uam9pbiggJ1xcdCcgKTtcbiAgICAgIGxpbmVzLnB1c2goIGxpbmUgKTtcbiAgICB9ICk7XG5cbiAgICB2YXIgdGV4dCA9IGxpbmVzLmpvaW4oICdcXG4nICk7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxheW91dFRvVGV4dDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFXO0VBQzFCLElBQUlDLEVBQUU7RUFFTixTQUFTQyxZQUFZQSxDQUFFQyxLQUFLLEVBQUc7SUFDN0JGLEVBQUUsR0FBR0UsS0FBSyxDQUFDQyxjQUFjLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0VBRUFILFlBQVksQ0FBQ0ksT0FBTyxHQUFHLFVBQVVDLE1BQU0sRUFBRztJQUN4QyxJQUFJQyxLQUFLLEdBQUdQLEVBQUUsQ0FBQ08sS0FBSyxDQUFDLENBQUM7SUFDdEIsSUFBSUMsS0FBSyxHQUFHLEVBQUU7SUFFZEQsS0FBSyxDQUFDRSxHQUFHLENBQUUsVUFBVUMsSUFBSSxFQUFHO01BQzFCLElBQUlDLFFBQVEsR0FBR0wsTUFBTSxHQUFHSSxJQUFJLENBQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBR0YsSUFBSSxDQUFDRyxFQUFFLENBQUMsQ0FBQztNQUN0RCxJQUFJQyxJQUFJLEdBQUdKLElBQUksQ0FBQ0ssUUFBUSxDQUFDLEdBQUcsQ0FBQztNQUM3QixJQUFJQyxJQUFJLEdBQUdOLElBQUksQ0FBQ0ssUUFBUSxDQUFDLEdBQUcsQ0FBQztNQUU3QixJQUFJRSxJQUFJLEdBQUcsQ0FBRU4sUUFBUSxFQUFFRyxJQUFJLEVBQUVFLElBQUksQ0FBRSxDQUFDRSxJQUFJLENBQUUsSUFBSyxDQUFDO01BQ2hEVixLQUFLLENBQUNXLElBQUksQ0FBRUYsSUFBSyxDQUFDO0lBQ3BCLENBQUUsQ0FBQztJQUVILElBQUlHLElBQUksR0FBR1osS0FBSyxDQUFDVSxJQUFJLENBQUUsSUFBSyxDQUFDO0lBQzdCLE9BQU9FLElBQUk7RUFDYixDQUFDO0VBRUQsT0FBT25CLFlBQVk7QUFDckIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==\n//# sourceURL=webpack-internal:///./src/utilities/layout-to-text-factory.js\n");

/***/ }),

/***/ "./src/utilities/lib-utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/lib-utilities.js ***!
  \****************************************/
/***/ ((module) => {

eval("/* \n * Utility file to get and set the libraries to which sbgnviz is dependent from any file.\n */\n\nvar libUtilities = function libUtilities() {};\nlibUtilities.setLibs = function (libs) {\n  this.libs = libs;\n};\nlibUtilities.getLibs = function () {\n  return this.libs;\n};\nmodule.exports = libUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xpYi11dGlsaXRpZXMuanMiLCJuYW1lcyI6WyJsaWJVdGlsaXRpZXMiLCJzZXRMaWJzIiwibGlicyIsImdldExpYnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9saWItdXRpbGl0aWVzLmpzP2JhYWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogXG4gKiBVdGlsaXR5IGZpbGUgdG8gZ2V0IGFuZCBzZXQgdGhlIGxpYnJhcmllcyB0byB3aGljaCBzYmdudml6IGlzIGRlcGVuZGVudCBmcm9tIGFueSBmaWxlLlxuICovXG5cbnZhciBsaWJVdGlsaXRpZXMgPSBmdW5jdGlvbigpe1xufTtcblxubGliVXRpbGl0aWVzLnNldExpYnMgPSBmdW5jdGlvbihsaWJzKSB7XG4gIHRoaXMubGlicyA9IGxpYnM7XG59O1xuXG5saWJVdGlsaXRpZXMuZ2V0TGlicyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5saWJzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBsaWJVdGlsaXRpZXM7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBLElBQUlBLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFBLEVBQWEsQ0FDN0IsQ0FBQztBQUVEQSxZQUFZLENBQUNDLE9BQU8sR0FBRyxVQUFTQyxJQUFJLEVBQUU7RUFDcEMsSUFBSSxDQUFDQSxJQUFJLEdBQUdBLElBQUk7QUFDbEIsQ0FBQztBQUVERixZQUFZLENBQUNHLE9BQU8sR0FBRyxZQUFXO0VBQ2hDLE9BQU8sSUFBSSxDQUFDRCxJQUFJO0FBQ2xCLENBQUM7QUFFREUsTUFBTSxDQUFDQyxPQUFPLEdBQUdMLFlBQVkiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/lib-utilities.js\n");

/***/ }),

/***/ "./src/utilities/main-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/main-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/*\n * These are the main utilities to be directly utilized by the user interactions.\n * Idealy, this file is just required by index.js\n */\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var elementUtilities, jsonToSbgnml, sbgnmlToJson, sbmlToJson, tdToJson, nwtToJson, sifToJson, optionUtilities, graphUtilities, layoutLoader, jsonToNwt;\n  var cy, options;\n  function mainUtilities(param) {\n    elementUtilities = param.elementUtilities;\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    jsonToSbml = param.jsonToSbmlConverter;\n    jsonToNwt = param.jsonToNwtConverter;\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    sbmlToJson = param.sbmlToJsonConverter;\n    nwtToJson = param.nwtToJsonConverter;\n    tdToJson = param.tdToJsonConverter;\n    sifToJson = param.sifToJsonConverter;\n    optionUtilities = param.optionUtilities;\n    graphUtilities = param.graphUtilities;\n    cy = param.sbgnCyInstance.getCy();\n    layoutLoader = param.layoutLoader;\n    layoutToText = param.layoutToText;\n    options = optionUtilities.getOptions();\n  }\n  mainUtilities.beforePerformLayout = function () {\n    var parents = cy.nodes(':parent');\n    var edges = cy.edges();\n    cy.startBatch();\n\n    // graphUtilities.disablePorts();\n\n    // TODO do this by using extension API\n    // removes all bendpoints for all edges in cytoscape instance\n    for (var i = 0; i < edges.length; i++) {\n      var edge = edges[i];\n      edge.removeClass('edgebendediting-hasbendpoints');\n      edge.removeClass('edgecontrolediting-hascontrolpoints');\n      edge.removeClass('edgebendediting-hasmultiplebendpoints');\n      edge.removeClass('edgecontrolediting-hasmultiplecontrolpoints');\n      edge.data('cyedgebendeditingDistances', []);\n      edge.data('cyedgebendeditingWeights', []);\n      edge.data('cyedgecontroleditingDistances', []);\n      edge.data('cyedgecontroleditingWeights', []);\n    }\n    parents.removeData('minWidth');\n    parents.removeData('minHeight');\n    parents.removeData('minWidthBiasLeft');\n    parents.removeData('minWidthBiasRight');\n    parents.removeData('minHeightBiasTop');\n    parents.removeData('minHeightBiasBottom');\n    cy.endBatch();\n    if (parents.length > 0) cy.style().update();\n  };\n\n  // Expand given nodes. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.expandNodes = function (nodes) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodesToExpand = expandCollapse.expandableNodes(nodes);\n    if (nodesToExpand.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expand\", {\n        nodes: nodesToExpand\n      });\n    } else {\n      expandCollapse.expand(nodes);\n    }\n  };\n\n  // Collapse given nodes. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.collapseNodes = function (nodes) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    if (expandCollapse.collapsibleNodes(nodes).length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapse\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.collapse(nodes);\n    }\n  };\n\n  // Collapse all complexes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.collapseComplexes = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var complexes = cy.nodes(\"[class^='complex']\");\n    if (expandCollapse.collapsibleNodes(complexes).length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapseRecursively\", {\n        nodes: complexes\n      });\n    } else {\n      expandCollapse.collapseRecursively(complexes);\n    }\n  };\n\n  // Expand all complexes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.expandComplexes = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = expandCollapse.expandableNodes(cy.nodes().filter(\"[class^='complex']\"));\n    if (nodes.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expandRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.expandRecursively(nodes);\n    }\n  };\n\n  // Collapse all nodes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.collapseAll = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = cy.nodes(':visible');\n    if (expandCollapse.collapsibleNodes(nodes).length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapseRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.collapseRecursively(nodes);\n    }\n  };\n\n  // Expand all nodes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.expandAll = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = expandCollapse.expandableNodes(cy.nodes(':visible'));\n    if (nodes.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expandRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.expandRecursively(nodes);\n    }\n  };\n\n  // Increase border width to show nodes with hidden neighbors\n  mainUtilities.thickenBorder = function (eles) {\n    eles.forEach(function (ele) {\n      var defaultBorderWidth = Number(ele.data(\"border-width\"));\n      ele.data(\"border-width\", defaultBorderWidth + 2);\n    });\n    eles.data(\"thickBorder\", true);\n    return eles;\n  };\n  // Decrease border width when hidden neighbors of the nodes become visible\n  mainUtilities.thinBorder = function (eles) {\n    eles.forEach(function (ele) {\n      var defaultBorderWidth = Number(ele.data(\"border-width\"));\n      ele.data(\"border-width\", defaultBorderWidth - 2);\n    });\n    eles.removeData(\"thickBorder\");\n    return eles;\n  };\n  mainUtilities.hideElesSimple = function (eles) {\n    var viewUtilities = cy.viewUtilities('get');\n    if (eles.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(eles);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: eles\n      });\n      nodesWithHiddenNeighbor = eles.neighborhood(\":visible\").nodes().difference(eles).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(eles);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Extends the given nodes list in a smart way to leave the map intact and hides the resulting list.\n  // Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.hideNodesSmart = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n    if (nodesToHide.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(nodesToHide);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: nodesToHide\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(nodesToHide);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Extends the given nodes list in a smart way to leave the map intact.\n  // Then unhides the resulting list and hides others. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.showNodesSmart = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.elements();\n    var nodesToShow = elementUtilities.extendNodeList(nodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n    if (nodesToHide.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: nodesToHide\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide);\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(nodesToHide);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Unhides elements passed as arguments. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.showEles = function (eles) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var hiddenEles = eles.filter(':hidden');\n    if (hiddenEles.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesToThinBorder = hiddenEles.neighborhood(\":visible\").nodes(\"[thickBorder]\").difference(cy.edges(\":hidden\").difference(hiddenEles.edges().union(hiddenEles.nodes().connectedEdges())).connectedNodes());\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesToThinBorder\n      });\n      actions.push({\n        name: \"show\",\n        param: hiddenEles\n      });\n      var nodesToThickenBorder = hiddenEles.nodes().edgesWith(cy.nodes(\":hidden\").difference(hiddenEles.nodes())).connectedNodes().intersection(hiddenEles.nodes());\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesToThickenBorder\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.show(eles);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Unhides all elements. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.showAll = function () {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (cy.elements().length === cy.elements(':visible').length) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.nodes(\"[thickBorder]\");\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"show\",\n        param: cy.elements()\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.show(cy.elements());\n    }\n  };\n\n  // Removes the given elements in a simple way. Considers 'undoable' option.\n  mainUtilities.deleteElesSimple = function (eles) {\n    if (elementUtilities.isGraphTopologyLocked() || eles.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"deleteElesSimple\", {\n        eles: eles\n      });\n    } else {\n      eles.remove();\n    }\n  };\n\n  // Extends the given nodes list in a smart way to leave the map intact and removes the resulting list.\n  // Considers 'undoable' option.\n  mainUtilities.deleteNodesSmart = function (_nodes) {\n    var nodes = _nodes.nodes();\n    if (elementUtilities.isGraphTopologyLocked() || nodes.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"deleteNodesSmart\", {\n        firstTime: true,\n        eles: nodes\n      });\n    } else {\n      elementUtilities.deleteNodesSmart(nodes);\n    }\n  };\n  function isNeed2Highligth(eles2highligth) {\n    if (eles2highligth.length === 0) {\n      return false;\n    }\n    var viewUtilities = cy.viewUtilities('get');\n    var highlightClass = viewUtilities.getAllHighlightClasses()[0];\n    var highlightedEles = cy.elements('.' + highlightClass).filter(':visible');\n    if (highlightedEles.contains(eles2highligth)) {\n      return false;\n    }\n    return true;\n  }\n\n  // Highlights selected elements. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.highlightSelected = function (_eles) {\n    var elesToHighlight = _eles;\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Highlights neighbours of the given nodes. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.highlightNeighbours = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n    var elesToHighlight = elementUtilities.getNeighboursOfNodes(nodes);\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Finds the elements whose label includes the given label and highlights processes of those elements.\n  // Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.searchByLabel = function (label) {\n    if (label.length == 0) {\n      return;\n    }\n    var nodesToHighlight = cy.nodes(\":visible\").filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      if (ele.data(\"label\") && ele.data(\"label\").toLowerCase().indexOf(label) >= 0) {\n        return true;\n      }\n      return false;\n    });\n    if (nodesToHighlight.length == 0) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    // Use this line for smart search\n    // nodesToHighlight = elementUtilities.extendNodeList(nodesToHighlight);\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: nodesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(nodesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Highlights processes of the given nodes. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.highlightProcesses = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n    var elesToHighlight = elementUtilities.extendNodeList(nodes);\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Unhighlights any highlighted element. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.removeHighlights = function () {\n    if (elementUtilities.noneIsNotHighlighted()) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"removeHighlights\");\n    } else {\n      viewUtilities.removeHighlights();\n    }\n    cy.style().update();\n  };\n  mainUtilities.loadLayoutData = function (layoutText, byName) {\n    layoutLoader.load(layoutText, byName);\n  };\n  mainUtilities.getLayoutText = function (byName) {\n    layoutToText.convert(byName);\n  };\n\n  // Performs layout by given layoutOptions. Considers 'undoable' option. However, by setting notUndoable parameter\n  // to a truthy value you can force an undable layout operation independant of 'undoable' option.\n  mainUtilities.performLayout = function (layoutOptions, notUndoable) {\n    if (!options.undoable || notUndoable) {\n      // 'notUndoable' flag can be used to have composite actions in undo/redo stack\n      // Things to do before performing layout\n      mainUtilities.beforePerformLayout();\n      var layout = cy.elements().filter(':visible').layout(layoutOptions);\n\n      // Check this for cytoscape.js backward compatibility\n      if (layout && layout.run) {\n        layout.run();\n      }\n    } else {\n      cy.undoRedo()[\"do\"](\"layout\", {\n        options: layoutOptions,\n        eles: cy.elements().filter(':visible')\n      });\n    }\n  };\n\n  // Creates an sbgnml file content from the exising graph and returns it.\n  mainUtilities.createSbgnml = function () {\n    return jsonToSbgnml.createSbgnml();\n  };\n  mainUtilities.createNwt = function () {\n    return jsonToNwt.createSbgnml();\n  };\n\n  // Converts given sbgnml data to a json object in a special format\n  // (http://js.cytoscape.org/#notation/elements-json) and returns it.\n  mainUtilities.convertSbgnmlToJson = function (data, urlParams) {\n    return sbgnmlToJson.convert(data, urlParams);\n  };\n  mainUtilities.convertSbmlToJson = function (data, urlParams) {\n    var converted2 = sbmlToJson.convert(data, urlParams);\n    console.log(\"converted2\", converted2);\n    return converted2;\n  };\n  mainUtilities.convertNwtToJson = function (data) {\n    return nwtToJson.convert(data);\n  };\n\n  // Create the qtip contents of the given node and returns it.\n  mainUtilities.getQtipContent = function (node) {\n    return elementUtilities.getQtipContent(node);\n  };\n\n  // Change option\n  mainUtilities.setShowComplexName = function (showComplexName) {\n    options.showComplexName = showComplexName;\n    // make change active by triggering data which will trigger style update\n    cy.nodes('[class^=\"complex\"]').forEach(function (ele) {\n      ele.trigger(\"data\");\n    });\n  };\n\n  /*\n   * Sets the ordering of the given nodes.\n   * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.\n   * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is\n   * used to set the distance between the node center and the ports. The default port distance is 60.\n   * Considers undoable option.\n   */\n  mainUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);\n    } else {\n      var param = {\n        nodes: nodes,\n        ordering: ordering,\n        portDistance: portDistance\n      };\n      cy.undoRedo()[\"do\"](\"setPortsOrdering\", param);\n    }\n    cy.style().update();\n  };\n\n  /**\n   * Get map properties from SBGNML file\n   * Needs to be called after file is loaded - sbgnvizLoadFileEnd event\n   * return: map properties as object\n   */\n  mainUtilities.getMapProperties = function () {\n    if (elementUtilities.fileFormat !== undefined) {\n      if (elementUtilities.fileFormat == 'sbgnml') {\n        //this.showNodesSmart\n        return sbgnmlToJson.mapPropertiesToObj();\n      } else if (elementUtilities.fileFormat == 'nwt') return nwtToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'td') return tdToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'sif') return sifToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'sbml') return sbmlToJson.mapPropertiesToObj();else {\n        console.log(\"File format mismatched!\");\n        return;\n      }\n    } else {\n      console.log(\"File format is not defined!\");\n      return;\n    }\n  };\n  mainUtilities.doValidation = function (file) {\n    return sbgnmlToJson.doValidation(file);\n  };\n  mainUtilities.setCompoundPadding = function (newPaddingValue) {\n    options.compoundPadding = newPaddingValue;\n    optionUtilities.extendOptions(options);\n  };\n  mainUtilities.getCompoundPadding = function () {\n    return options.compoundPadding;\n  };\n  return mainUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/main-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/nwt-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/nwt-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var sbgnmlToJson, elementUtilities;\n  function nwtToJson(param) {\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    elementUtilities = param.elementUtilities;\n  }\n  function strToSet(str, splitBy) {\n    var set = {};\n    var list = str ? str.split(splitBy) : [];\n    list.forEach(function (member) {\n      set[member] = true;\n    });\n    return set;\n  }\n  function getFirstByTagName(arc, tagName) {\n    var els = arc.getElementsByTagName(tagName);\n    var val = els.length > 0 ? els[0].innerHTML : null;\n    return val;\n  }\n  var sifEdgePropHandlerMap = {\n    'pcIDSet': function pcIDSet(arc) {\n      var val = getFirstByTagName(arc, 'pcIDs');\n      return strToSet(val, /;| /);\n    },\n    'siteLocSet': function siteLocSet(arc) {\n      var val = getFirstByTagName(arc, 'siteLocations');\n      return strToSet(val, ';');\n    }\n  };\n  var sifNodePropHandlerMap = {\n    'tooltip': function tooltip(glyph) {\n      var val = getFirstByTagName(glyph, 'tooltip');\n      return val;\n    },\n    'infoboxes': function infoboxes(glyph, data) {\n      var sifInfoboxPropHandlerMap = {\n        'tooltip': function tooltip(glyph) {\n          var val = getFirstByTagName(glyph, 'tooltip');\n          return val;\n        }\n      };\n      var infoboxGlyphs = glyph.getElementsByTagName('glyph');\n      for (var i = 0; i < infoboxGlyphs.length; i++) {\n        var infoboxGlyph = infoboxGlyphs[i];\n        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {\n          var val = sifInfoboxPropHandlerMap[propName](infoboxGlyph);\n          if (val) {\n            data.statesandinfos[i][propName] = val;\n          }\n        });\n      }\n    }\n  };\n  function extendElementsData(elesData, filterFcn, getXMLEleById, propHandlerMap, xmlObject) {\n    elesData.forEach(function (obj) {\n      var data = obj.data;\n      if (filterFcn(data[\"class\"])) {\n        var xmlEle = getXMLEleById(xmlObject, data.id);\n        Object.keys(propHandlerMap).forEach(function (propName) {\n          // does not have to return a value, maybe a void function as well\n          var val = propHandlerMap[propName](xmlEle, data);\n          if (val) {\n            data[propName] = val;\n          }\n        });\n      }\n    });\n  }\n  function getElMap(graphData) {\n    var map = {\n      nodes: {},\n      edges: {},\n      infoboxes: {}\n    };\n    graphData.edges.forEach(function (edge) {\n      map.edges[edge.data.id] = edge;\n    });\n    graphData.nodes.forEach(function (node) {\n      map.nodes[node.data.id] = node;\n      var infoboxes = node.data.statesandinfos;\n      infoboxes.forEach(function (infobox) {\n        map.infoboxes[infobox.id] = infobox;\n      });\n    });\n    return map;\n  }\n  function applyExtraStylesData(graphData, xmlObject) {\n    var listOfStyles = xmlObject.querySelector('listOfStyles');\n    var styles = listOfStyles && listOfStyles.querySelectorAll('style');\n    if (!styles || styles.length === 0) {\n      return;\n    }\n    var attrToProp = {\n      'shapeName': 'shape-name'\n    };\n    var elMap = getElMap(graphData);\n    styles.forEach(function (style) {\n      var idList = style.getAttribute('idList').split(' ');\n      Object.keys(attrToProp).forEach(function (attrName) {\n        var g = style.querySelector('g');\n        var val = g.getAttribute(attrName);\n        if (val) {\n          var propName = attrToProp[attrName];\n          idList.forEach(function (id) {\n            if (elMap.nodes[id] || elMap.edges[id]) {\n              var el = elMap.nodes[id] || elMap.edges[id];\n              el.data[propName] = val;\n            } else if (elMap.infoboxes[id]) {\n              var el = elMap.infoboxes[id];\n              el.style[propName] = val;\n            }\n          });\n        }\n      });\n    });\n  }\n  nwtToJson.convert = function (xmlObject, urlParams) {\n    var graphData = sbgnmlToJson.convert(xmlObject, urlParams);\n    var mapType = elementUtilities.mapType;\n    if (mapType !== 'PD' && mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn') {\n      elementUtilities.fileFormat = 'nwt';\n      // extend edges data with sif specific features\n      extendElementsData(graphData.edges, elementUtilities.isSIFEdge, sbgnmlToJson.getArcById.bind(sbgnmlToJson), sifEdgePropHandlerMap, xmlObject);\n      extendElementsData(graphData.nodes, elementUtilities.isSIFNode, sbgnmlToJson.getGlyphById.bind(sbgnmlToJson), sifNodePropHandlerMap, xmlObject);\n\n      // apply the style data that is not applied because of restrictions of libsbgn\n      applyExtraStylesData(graphData, xmlObject);\n    }\n    return graphData;\n  };\n  nwtToJson.mapPropertiesToObj = function () {\n    return sbgnmlToJson.mapPropertiesToObj();\n  };\n  return nwtToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/nwt-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/option-utilities-factory.js":
/*!***************************************************!*\
  !*** ./src/utilities/option-utilities-factory.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/*\n *  Extend default options and get current options by using this file\n */\n\nmodule.exports = function () {\n  // default options\n  var defaults = {\n    // The path of core library images when sbgnviz is required from npm and the index html\n    // file and node_modules are under the same folder then using the default value is fine\n    imgPath: 'node_modules/sbgnviz/src/img',\n    // Whether to fit labels to nodes\n    fitLabelsToNodes: function fitLabelsToNodes() {\n      return false;\n    },\n    fitLabelsToInfoboxes: function fitLabelsToInfoboxes() {\n      return false;\n    },\n    // dynamic label size it may be 'small', 'regular', 'large'\n    dynamicLabelSize: function dynamicLabelSize() {\n      return 'regular';\n    },\n    // Whether to infer parent node on load \n    inferNestingOnLoad: function inferNestingOnLoad() {\n      return false;\n    },\n    // intial compound padding for all compound nodes \n    compoundPadding: function compoundPadding() {\n      return 0;\n    },\n    improveFlow: function improveFlow() {\n      return true;\n    },\n    // Whether to adjust node label font size automatically.\n    // If this option return false do not adjust label sizes according to node height uses node.data('font-size')\n    // instead of doing it.\n    adjustNodeLabelFontSizeAutomatically: function adjustNodeLabelFontSizeAutomatically() {\n      return true;\n    },\n    // extra padding for compound nodes except for complexes\n    extraCompartmentPadding: 14,\n    //extra padding for complex compound nodes, refer to elementUtilities.getComplexPadding function to see details\n    extraComplexPadding: 10,\n    // Wether to display the complex's labels, like compartments.\n    // Will also increase the paddings by extraCompoundPadding to make room for the name.\n    showComplexName: true,\n    // The selector of the component containing the sbgn network\n    networkContainerSelector: '#sbgn-network-container',\n    // Whether the actions are undoable, requires cytoscape-undo-redo extension\n    undoable: true\n  };\n  var optionUtilities = function optionUtilities(param) {};\n\n  // Extend the defaults options with the user options\n  optionUtilities.extendOptions = function (options) {\n    var result = {};\n    for (var prop in defaults) {\n      result[prop] = defaults[prop];\n    }\n    for (var prop in options) {\n      result[prop] = options[prop];\n    }\n    optionUtilities.options = result;\n    return options;\n  };\n  optionUtilities.getOptions = function () {\n    return optionUtilities.options;\n  };\n  return optionUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL29wdGlvbi11dGlsaXRpZXMtZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0cyIsImltZ1BhdGgiLCJmaXRMYWJlbHNUb05vZGVzIiwiZml0TGFiZWxzVG9JbmZvYm94ZXMiLCJkeW5hbWljTGFiZWxTaXplIiwiaW5mZXJOZXN0aW5nT25Mb2FkIiwiY29tcG91bmRQYWRkaW5nIiwiaW1wcm92ZUZsb3ciLCJhZGp1c3ROb2RlTGFiZWxGb250U2l6ZUF1dG9tYXRpY2FsbHkiLCJleHRyYUNvbXBhcnRtZW50UGFkZGluZyIsImV4dHJhQ29tcGxleFBhZGRpbmciLCJzaG93Q29tcGxleE5hbWUiLCJuZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IiLCJ1bmRvYWJsZSIsIm9wdGlvblV0aWxpdGllcyIsInBhcmFtIiwiZXh0ZW5kT3B0aW9ucyIsIm9wdGlvbnMiLCJyZXN1bHQiLCJwcm9wIiwiZ2V0T3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvb3B0aW9uLXV0aWxpdGllcy1mYWN0b3J5LmpzPzllNDciXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICBFeHRlbmQgZGVmYXVsdCBvcHRpb25zIGFuZCBnZXQgY3VycmVudCBvcHRpb25zIGJ5IHVzaW5nIHRoaXMgZmlsZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIC8vIFRoZSBwYXRoIG9mIGNvcmUgbGlicmFyeSBpbWFnZXMgd2hlbiBzYmdudml6IGlzIHJlcXVpcmVkIGZyb20gbnBtIGFuZCB0aGUgaW5kZXggaHRtbFxuICAgIC8vIGZpbGUgYW5kIG5vZGVfbW9kdWxlcyBhcmUgdW5kZXIgdGhlIHNhbWUgZm9sZGVyIHRoZW4gdXNpbmcgdGhlIGRlZmF1bHQgdmFsdWUgaXMgZmluZVxuICAgIGltZ1BhdGg6ICdub2RlX21vZHVsZXMvc2JnbnZpei9zcmMvaW1nJyxcbiAgICAvLyBXaGV0aGVyIHRvIGZpdCBsYWJlbHMgdG8gbm9kZXNcbiAgICBmaXRMYWJlbHNUb05vZGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBmaXRMYWJlbHNUb0luZm9ib3hlczogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgLy8gZHluYW1pYyBsYWJlbCBzaXplIGl0IG1heSBiZSAnc21hbGwnLCAncmVndWxhcicsICdsYXJnZSdcbiAgICBkeW5hbWljTGFiZWxTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJ3JlZ3VsYXInO1xuICAgIH0sXG4gICAgLy8gV2hldGhlciB0byBpbmZlciBwYXJlbnQgbm9kZSBvbiBsb2FkIFxuICAgIGluZmVyTmVzdGluZ09uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgLy8gaW50aWFsIGNvbXBvdW5kIHBhZGRpbmcgZm9yIGFsbCBjb21wb3VuZCBub2RlcyBcbiAgICBjb21wb3VuZFBhZGRpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgaW1wcm92ZUZsb3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICAvLyBXaGV0aGVyIHRvIGFkanVzdCBub2RlIGxhYmVsIGZvbnQgc2l6ZSBhdXRvbWF0aWNhbGx5LlxuICAgIC8vIElmIHRoaXMgb3B0aW9uIHJldHVybiBmYWxzZSBkbyBub3QgYWRqdXN0IGxhYmVsIHNpemVzIGFjY29yZGluZyB0byBub2RlIGhlaWdodCB1c2VzIG5vZGUuZGF0YSgnZm9udC1zaXplJylcbiAgICAvLyBpbnN0ZWFkIG9mIGRvaW5nIGl0LlxuICAgIGFkanVzdE5vZGVMYWJlbEZvbnRTaXplQXV0b21hdGljYWxseTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIC8vIGV4dHJhIHBhZGRpbmcgZm9yIGNvbXBvdW5kIG5vZGVzIGV4Y2VwdCBmb3IgY29tcGxleGVzXG4gICAgZXh0cmFDb21wYXJ0bWVudFBhZGRpbmc6IDE0LFxuXG4gICAgLy9leHRyYSBwYWRkaW5nIGZvciBjb21wbGV4IGNvbXBvdW5kIG5vZGVzLCByZWZlciB0byBlbGVtZW50VXRpbGl0aWVzLmdldENvbXBsZXhQYWRkaW5nIGZ1bmN0aW9uIHRvIHNlZSBkZXRhaWxzXG4gICAgZXh0cmFDb21wbGV4UGFkZGluZzogMTAsXG4gICAgLy8gV2V0aGVyIHRvIGRpc3BsYXkgdGhlIGNvbXBsZXgncyBsYWJlbHMsIGxpa2UgY29tcGFydG1lbnRzLlxuICAgIC8vIFdpbGwgYWxzbyBpbmNyZWFzZSB0aGUgcGFkZGluZ3MgYnkgZXh0cmFDb21wb3VuZFBhZGRpbmcgdG8gbWFrZSByb29tIGZvciB0aGUgbmFtZS5cbiAgICBzaG93Q29tcGxleE5hbWU6IHRydWUsXG4gICAgLy8gVGhlIHNlbGVjdG9yIG9mIHRoZSBjb21wb25lbnQgY29udGFpbmluZyB0aGUgc2JnbiBuZXR3b3JrXG4gICAgbmV0d29ya0NvbnRhaW5lclNlbGVjdG9yOiAnI3NiZ24tbmV0d29yay1jb250YWluZXInLFxuICAgIC8vIFdoZXRoZXIgdGhlIGFjdGlvbnMgYXJlIHVuZG9hYmxlLCByZXF1aXJlcyBjeXRvc2NhcGUtdW5kby1yZWRvIGV4dGVuc2lvblxuICAgIHVuZG9hYmxlOiB0cnVlXG4gIH07XG5cbiAgdmFyIG9wdGlvblV0aWxpdGllcyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICB9O1xuXG4gIC8vIEV4dGVuZCB0aGUgZGVmYXVsdHMgb3B0aW9ucyB3aXRoIHRoZSB1c2VyIG9wdGlvbnNcbiAgb3B0aW9uVXRpbGl0aWVzLmV4dGVuZE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gZGVmYXVsdHMpIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IGRlZmF1bHRzW3Byb3BdO1xuICAgIH1cblxuICAgIGZvciAodmFyIHByb3AgaW4gb3B0aW9ucykge1xuICAgICAgcmVzdWx0W3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICB9XG5cbiAgICBvcHRpb25VdGlsaXRpZXMub3B0aW9ucyA9IHJlc3VsdDtcblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9O1xuXG4gIG9wdGlvblV0aWxpdGllcy5nZXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBvcHRpb25VdGlsaXRpZXMub3B0aW9ucztcbiAgfTtcblxuICByZXR1cm4gb3B0aW9uVXRpbGl0aWVzO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFZO0VBQzNCO0VBQ0EsSUFBSUMsUUFBUSxHQUFHO0lBQ2I7SUFDQTtJQUNBQyxPQUFPLEVBQUUsOEJBQThCO0lBQ3ZDO0lBQ0FDLGdCQUFnQixFQUFFLFNBQUFBLGlCQUFBLEVBQVk7TUFDNUIsT0FBTyxLQUFLO0lBQ2QsQ0FBQztJQUNEQyxvQkFBb0IsRUFBRSxTQUFBQSxxQkFBQSxFQUFZO01BQ2hDLE9BQU8sS0FBSztJQUNkLENBQUM7SUFDRDtJQUNBQyxnQkFBZ0IsRUFBRSxTQUFBQSxpQkFBQSxFQUFZO01BQzVCLE9BQU8sU0FBUztJQUNsQixDQUFDO0lBQ0Q7SUFDQUMsa0JBQWtCLEVBQUUsU0FBQUEsbUJBQUEsRUFBWTtNQUM5QixPQUFPLEtBQUs7SUFDZCxDQUFDO0lBQ0Q7SUFDQUMsZUFBZSxFQUFFLFNBQUFBLGdCQUFBLEVBQVk7TUFDM0IsT0FBTyxDQUFDO0lBQ1YsQ0FBQztJQUNEQyxXQUFXLEVBQUUsU0FBQUEsWUFBQSxFQUFZO01BQ3JCLE9BQU8sSUFBSTtJQUNmLENBQUM7SUFDRDtJQUNBO0lBQ0E7SUFDQUMsb0NBQW9DLEVBQUUsU0FBQUEscUNBQUEsRUFBVztNQUMvQyxPQUFPLElBQUk7SUFDYixDQUFDO0lBQ0Q7SUFDQUMsdUJBQXVCLEVBQUUsRUFBRTtJQUUzQjtJQUNBQyxtQkFBbUIsRUFBRSxFQUFFO0lBQ3ZCO0lBQ0E7SUFDQUMsZUFBZSxFQUFFLElBQUk7SUFDckI7SUFDQUMsd0JBQXdCLEVBQUUseUJBQXlCO0lBQ25EO0lBQ0FDLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFFRCxJQUFJQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQWFDLEtBQUssRUFBRSxDQUN2QyxDQUFDOztFQUVEO0VBQ0FELGVBQWUsQ0FBQ0UsYUFBYSxHQUFHLFVBQVVDLE9BQU8sRUFBRTtJQUNqRCxJQUFJQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRWYsS0FBSyxJQUFJQyxJQUFJLElBQUluQixRQUFRLEVBQUU7TUFDekJrQixNQUFNLENBQUNDLElBQUksQ0FBQyxHQUFHbkIsUUFBUSxDQUFDbUIsSUFBSSxDQUFDO0lBQy9CO0lBRUEsS0FBSyxJQUFJQSxJQUFJLElBQUlGLE9BQU8sRUFBRTtNQUN4QkMsTUFBTSxDQUFDQyxJQUFJLENBQUMsR0FBR0YsT0FBTyxDQUFDRSxJQUFJLENBQUM7SUFDOUI7SUFFQUwsZUFBZSxDQUFDRyxPQUFPLEdBQUdDLE1BQU07SUFFaEMsT0FBT0QsT0FBTztFQUNoQixDQUFDO0VBRURILGVBQWUsQ0FBQ00sVUFBVSxHQUFHLFlBQVk7SUFDdkMsT0FBT04sZUFBZSxDQUFDRyxPQUFPO0VBQ2hDLENBQUM7RUFFRCxPQUFPSCxlQUFlO0FBQ3hCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/option-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-cd-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/sbgnml-to-cd-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbgnmlToCd(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbgnmlToCd.convert = function (xml, callback) {\n    $.ajax({\n      type: 'post',\n      url: \"http://web.newteditor.org:8080/sbgnml2cd\",\n      data: xml,\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(XMLHttpRequest) {\n        callback(null);\n      }\n    });\n  };\n  return sbgnmlToCd;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1jZC1jb252ZXJ0ZXItZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uVG9TYmdubWwiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJzYmdubWxUb0NkIiwicGFyYW0iLCJqc29uVG9TYmdubWxDb252ZXJ0ZXIiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwiY29udmVydCIsInhtbCIsImNhbGxiYWNrIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YSIsInN1Y2Nlc3MiLCJlcnJvciIsIlhNTEh0dHBSZXF1ZXN0Il0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9zYmdubWwtdG8tY2QtY29udmVydGVyLWZhY3RvcnkuanM/ODNhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGpzb25Ub1NiZ25tbCwgZWxlbWVudFV0aWxpdGllcywgY3k7XG4gIFxuICAgIGZ1bmN0aW9uIHNiZ25tbFRvQ2QocGFyYW0pIHtcbiAgICAgIGpzb25Ub1NiZ25tbCA9IHBhcmFtLmpzb25Ub1NiZ25tbENvbnZlcnRlcjtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xuICAgICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xuICAgIH1cbiAgXG4gXG4gICAgc2Jnbm1sVG9DZC5jb252ZXJ0ID0gZnVuY3Rpb24gKHhtbCwgY2FsbGJhY2spIHtcblxuICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsICAgICAgICAgICAgIFxuICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly93ZWIubmV3dGVkaXRvci5vcmc6ODA4MC9zYmdubWwyY2RcIixcbiAgICAgICAgICAgIGRhdGE6IHhtbCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7ICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKFhNTEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICBcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcmV0dXJuIHNiZ25tbFRvQ2Q7XG4gIFxuICB9XG4gIFxuXG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFXO0VBRXhCLElBQUlDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLEVBQUU7RUFFdEMsU0FBU0MsVUFBVUEsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3pCSixZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXFCO0lBQzFDSixnQkFBZ0IsR0FBR0csS0FBSyxDQUFDSCxnQkFBZ0I7SUFDekNDLEVBQUUsR0FBR0UsS0FBSyxDQUFDRSxjQUFjLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0VBR0FKLFVBQVUsQ0FBQ0ssT0FBTyxHQUFHLFVBQVVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO0lBRTNDQyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNGQyxJQUFJLEVBQUUsTUFBTTtNQUNaQyxHQUFHLEVBQUUsMENBQTBDO01BQy9DQyxJQUFJLEVBQUVOLEdBQUc7TUFDVE8sT0FBTyxFQUFFLFNBQUFBLFFBQVVELElBQUksRUFBRTtRQUNyQkwsUUFBUSxDQUFDSyxJQUFJLENBQUM7TUFDbEIsQ0FBQztNQUNERSxLQUFLLEVBQUUsU0FBQUEsTUFBVUMsY0FBYyxFQUFFO1FBQzdCUixRQUFRLENBQUMsSUFBSSxDQUFDO01BQ2xCO0lBQ0osQ0FBQyxDQUFDO0VBR04sQ0FBQztFQUVELE9BQU9QLFVBQVU7QUFFbkIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-cd-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-gpml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-gpml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbgnmlToGpml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbgnmlToGpml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-dev.lcsb.uni.lu/minerva/api/convert/SBGN-ML:GPML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"application/xml\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return sbgnmlToGpml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1ncG1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInNiZ25tbFRvR3BtbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2Jnbm1sLXRvLWdwbWwtY29udmVydGVyLWZhY3RvcnkuanM/MDY3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBqc29uVG9TYmdubWwsIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xuXG4gICAgZnVuY3Rpb24gc2Jnbm1sVG9HcG1sKHBhcmFtKSB7XG4gICAgICAgIGpzb25Ub1NiZ25tbCA9IHBhcmFtLmpzb25Ub1NiZ25tbENvbnZlcnRlcjtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XG4gICAgICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcbiAgICB9XG5cblxuICAgIHNiZ25tbFRvR3BtbC5jb252ZXJ0ID0gZnVuY3Rpb24gKHhtbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNvbnZlcnNpb25BcGlVcmwgPSBcImh0dHBzOi8vbWluZXJ2YS1kZXYubGNzYi51bmkubHUvbWluZXJ2YS9hcGkvY29udmVydC9TQkdOLU1MOkdQTUxcIjtcblxuICAgICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICAgIHVybDogY29udmVyc2lvbkFwaVVybCxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3htbFwiLFxuICAgICAgICAgICAgZGF0YTogeG1sLFxuICAgICAgICAgICAgZGF0YVR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEsIHRleHRTdGF0dXMsIHhocikge1xuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBkYXRhLCBtZXNzYWdlOiBcIkludmFsaWQgcmVzcG9uc2UgY29kZTogXCIgKyB4aHIuc3RhdHVzfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogdHJ1ZSwgbWVzc2FnZTogZGF0YSwgZXJyb3I6IFwiXCJ9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZXJyb3IsIG1lc3NhZ2U6IFwiXCJ9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWlsOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBzYmdubWxUb0dwbWw7XG5cbn1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBWTtFQUV6QixJQUFJQyxZQUFZLEVBQUVDLGdCQUFnQixFQUFFQyxFQUFFO0VBRXRDLFNBQVNDLFlBQVlBLENBQUNDLEtBQUssRUFBRTtJQUN6QkosWUFBWSxHQUFHSSxLQUFLLENBQUNDLHFCQUFxQjtJQUMxQ0osZ0JBQWdCLEdBQUdHLEtBQUssQ0FBQ0gsZ0JBQWdCO0lBQ3pDQyxFQUFFLEdBQUdFLEtBQUssQ0FBQ0UsY0FBYyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNyQztFQUdBSixZQUFZLENBQUNLLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtJQUM1QyxJQUFJQyxnQkFBZ0IsR0FBRyxrRUFBa0U7SUFFekYsT0FBT0MsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDVkMsSUFBSSxFQUFFLE1BQU07TUFDWkMsR0FBRyxFQUFFSixnQkFBZ0I7TUFDckJLLFdBQVcsRUFBRSxpQkFBaUI7TUFDOUJDLElBQUksRUFBRVIsR0FBRztNQUNUUyxRQUFRLEVBQUUsTUFBTTtNQUNoQkMsT0FBTyxFQUFFLFNBQUFBLFFBQVVGLElBQUksRUFBRUcsVUFBVSxFQUFFQyxHQUFHLEVBQUU7UUFDdEMsSUFBSUEsR0FBRyxDQUFDQyxNQUFNLEtBQUssR0FBRyxFQUFFO1VBQ3BCWixRQUFRLENBQUM7WUFBQ2EsTUFBTSxFQUFFLEtBQUs7WUFBRUMsS0FBSyxFQUFFUCxJQUFJO1lBQUVRLE9BQU8sRUFBRSx5QkFBeUIsR0FBR0osR0FBRyxDQUFDQztVQUFNLENBQUMsQ0FBQztRQUMzRixDQUFDLE1BQU07VUFDSFosUUFBUSxDQUFDO1lBQUNhLE1BQU0sRUFBRSxJQUFJO1lBQUVFLE9BQU8sRUFBRVIsSUFBSTtZQUFFTyxLQUFLLEVBQUU7VUFBRSxDQUFDLENBQUM7UUFDdEQ7TUFDSixDQUFDO01BQ0RBLEtBQUssRUFBRSxTQUFBQSxNQUFVQSxNQUFLLEVBQUU7UUFDcEJkLFFBQVEsQ0FBQztVQUFDYSxNQUFNLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUVBLE1BQUs7VUFBRUMsT0FBTyxFQUFFO1FBQUUsQ0FBQyxDQUFDO01BQ3hELENBQUM7TUFDREMsSUFBSSxFQUFFLFNBQUFBLEtBQVVGLEtBQUssRUFBRTtRQUNuQmQsUUFBUSxDQUFDO1VBQUNhLE1BQU0sRUFBRSxLQUFLO1VBQUVDLEtBQUssRUFBRUEsS0FBSztVQUFFQyxPQUFPLEVBQUU7UUFBRSxDQUFDLENBQUM7TUFDeEQ7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDO0VBRUQsT0FBT3RCLFlBQVk7QUFFdkIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-gpml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-json-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-json-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, handledElements, mainUtilities;\n  function sbgnmlToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    mainUtilities = param.mainUtilities;\n    handledElements = {};\n    elementUtilities.elementTypes.forEach(function (type) {\n      handledElements[type] = true;\n    });\n  }\n  sbgnmlToJson.insertedNodes = {};\n  sbgnmlToJson.map = undefined;\n  sbgnmlToJson.calculatedCompoundPadding = undefined;\n  sbgnmlToJson.getAllCompartments = function (glyphList) {\n    var compartments = [];\n    for (var i = 0; i < glyphList.length; i++) {\n      if (glyphList[i].class_ == 'compartment') {\n        var compartment = glyphList[i];\n        var bbox = compartment.bbox;\n        compartments.push({\n          'x': parseFloat(bbox.x),\n          'y': parseFloat(bbox.y),\n          'w': parseFloat(bbox.w),\n          'h': parseFloat(bbox.h),\n          'id': compartment.id\n        });\n      }\n    }\n    compartments.sort(function (c1, c2) {\n      if (c1.h * c1.w < c2.h * c2.w) {\n        return -1;\n      }\n      if (c1.h * c1.w > c2.h * c2.w) {\n        return 1;\n      }\n      return 0;\n    });\n    return compartments;\n  };\n  sbgnmlToJson.isInBoundingBox = function (bbox1, bbox2) {\n    if (bbox1.x > bbox2.x && bbox1.y > bbox2.y && bbox1.x + bbox1.w < bbox2.x + bbox2.w && bbox1.y + bbox1.h < bbox2.y + bbox2.h) {\n      return true;\n    }\n    return false;\n  };\n  sbgnmlToJson.bboxProp = function (ele) {\n    if (ele.bboxCalculated) {\n      return ele.bbox;\n    }\n    ele.bboxCalculated = true;\n    var childNodes = ele.glyphMembers;\n    //exclude state variables and units of information from child members\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"binding region\" && child.class_ != \"residue variable\";\n    });\n    var bbox = {};\n    bbox.x = ele.bbox.x;\n    bbox.y = ele.bbox.y;\n    bbox.w = ele.bbox.w;\n    bbox.h = ele.bbox.h;\n    //if it is simple node return bbox\n    if (childNodes.length <= 0) {\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      return bbox;\n    } else if (ele.extension && ele.extension.has('nwt:extraInfo')) {\n      // if newt file then extrainfo on the compound node exists\n\n      if (ele.extension.has('nwt:extraInfo')) {\n        var extensionString = 'nwt:extraInfo';\n      } else if (ele.extension.has('extraInfo')) {\n        var extensionString = 'extraInfo';\n      }\n      var xml = ele.extension.get(extensionString);\n      var extraInfo;\n      parseString(xml, function (err, result) {\n        extraInfo = result[extensionString];\n      });\n      ele.originalW = bbox.w;\n      ele.originalH = bbox.h;\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      bbox.w = parseFloat(extraInfo.w);\n      bbox.h = parseFloat(extraInfo.h);\n      ele.minWidth = parseFloat(extraInfo.minW);\n      ele.minHeight = parseFloat(extraInfo.minH);\n      ele.minWidthBiasLeft = parseFloat(extraInfo.WLBias);\n      ele.minWidthBiasRight = parseFloat(extraInfo.WRBias);\n      ele.minHeightBiasBottom = parseFloat(extraInfo.HBBias);\n      ele.minHeightBiasTop = parseFloat(extraInfo.HTBias);\n      return bbox;\n    } else {\n      /*  var styles;\n       if (this.map.extension && this.map.extension.has('renderInformation')) { // render extension was found\n         styles = this.map.extension.get('renderInformation').listOfStyles;\n         if(styles  !== undefined){\n           styles = styles.styles;\n         }\n       }\n      */\n      /*  var compoundPadding = parseFloat(mapProperties.compoundPadding);\n       var extraCompartmentPadding = parseFloat(mapProperties.extraCompartmentPadding); */\n\n      var padding = this.calculateElementPadding(ele);\n      if (ele.class_ == \"complex\") {\n        ele.complexCalculatedPadding = padding;\n      }\n      var minLeft, maxRight, minTop, maxBottom, childrenBboxW, childrenBboxH, minLeftBorder, maxRightBorder, minTopBorder, maxBottomBorder;\n      var fromInfoBox = false;\n      // Traverse the other children and update the extreme values\n      for (var i = 0; i < childNodes.length; i++) {\n        var childNode = childNodes[i];\n        var childNodeBbox = this.bboxProp(childNode);\n        childNode.bbox = childNodeBbox;\n        var borderWidth = elementUtilities.getDefaultProperties(childNode.class_)[\"border-width\"];\n        var childPadding = this.calculateElementPadding(childNode);\n        //var childStyle = styles.filter(style =>{ return style.idList == childNode.id});\n\n        /*  if(childStyle.length > 0 && childStyle[0].renderGroup !== undefined){\n           borderWidth = childStyle[0].renderGroup.strokeWidth;\n         } */\n\n        var left = childNodeBbox.x - childNodeBbox.w / 2 - childPadding;\n        var right = childNodeBbox.x + childNodeBbox.w / 2 + childPadding;\n        var top = childNodeBbox.y - childNodeBbox.h / 2 - childPadding;\n        var bottom = childNodeBbox.y + childNodeBbox.h / 2 + childPadding;\n        var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n          return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"binding region\" || child.class_ == \"residue variable\";\n        });\n        if (stateAndInfos.length > 0) {\n          for (var k = 0; k < stateAndInfos.length; k++) {\n            var stateBbox = stateAndInfos[k].bbox;\n            if (minLeft === undefined || stateBbox.x < minLeft) {\n              minLeft = stateBbox.x;\n              fromInfoBox = true;\n              minLeftBorder = 0;\n            }\n            if (maxRight === undefined || stateBbox.x + stateBbox.w > maxRight) {\n              maxRight = stateBbox.x + stateBbox.w;\n              fromInfoBox = true;\n              maxRightBorder = 0;\n            }\n            if (minTop === undefined || stateBbox.y < minTop) {\n              minTop = stateBbox.y;\n              fromInfoBox = true;\n              minTopBorder = 0;\n            }\n            if (maxBottom === undefined || stateBbox.y + stateBbox.h > maxBottom) {\n              maxBottom = stateBbox.y + stateBbox.h;\n              fromInfoBox = true;\n              maxBottomBorder = 0;\n            }\n          }\n        }\n        if (minLeft === undefined || left < minLeft) {\n          minLeft = left;\n          fromInfoBox = false;\n          minLeftBorder = borderWidth;\n        }\n        if (maxRight === undefined || right > maxRight) {\n          maxRight = right;\n          fromInfoBox = false;\n          maxRightBorder = borderWidth;\n        }\n        if (minTop === undefined || top < minTop) {\n          minTop = top;\n          fromInfoBox = false;\n          minTopBorder = borderWidth;\n        }\n        if (maxBottom === undefined || bottom > maxBottom) {\n          maxBottom = bottom;\n          fromInfoBox = false;\n          maxBottomBorder = borderWidth;\n        }\n      }\n      var averageBorderWidthW = (minLeftBorder + maxRightBorder) / 2;\n      var averageBorderWidthH = (minTopBorder + maxBottomBorder) / 2;\n      // The sizes of children bbox are determined by the difference between the extreme coordinates\n      childrenBboxW = maxRight - minLeft + 2; // 2 is from cytoscape internal implementation of infoboxes\n      childrenBboxH = maxBottom - minTop + 2;\n\n      // If children bbox width is less than node bbox width + paddings set minWidth, and horizontal biases\n      if (Number((childrenBboxW + 2 * padding + averageBorderWidthW + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.w.toFixed(2))) {\n        //ele.minWidth = bbox.w - 2 padding  calculate badding first\n        ele.minWidth = bbox.w - 2 * padding;\n        var extraLeft = Number((minLeft - bbox.x - padding - minLeftBorder / 2 - 1).toFixed(2));\n        var extraRight = Number((bbox.x + bbox.w - maxRight - padding - maxRightBorder / 2 - 1).toFixed(2));\n        ele.minWidthBiasLeft = extraLeft / (extraLeft + extraRight) * 100;\n        ele.minWidthBiasRight = 100 - ele.minWidthBiasLeft;\n        if (ele.minWidthBiasLeft < 0) {\n          ele.minWidthBiasLeft = 0;\n          ele.minWidthBiasRight = 100;\n        }\n        if (ele.minWidthBiasRight < 0) {\n          ele.minWidthBiasRight = 0;\n          ele.minWidthBiasLeft = 100;\n        }\n      }\n\n      // If children bbox height is bigger than node bbox height set minHeight, and vertical biases\n      if (Number((childrenBboxH + 2 * padding + averageBorderWidthH + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.h.toFixed(2))) {\n        ele.minHeight = bbox.h - 2 * padding;\n        var extraTop = Number((minTop - bbox.y - padding - minTopBorder / 2 - 1).toFixed(2));\n        var extraBottom = Number((bbox.y + bbox.h - maxBottom - padding - maxBottomBorder / 2 - 1).toFixed(2));\n        ele.minHeightBiasTop = extraTop / (extraTop + extraBottom) * 100;\n        ele.minHeightBiasBottom = 100 - ele.minHeightBiasTop;\n        if (ele.minHeightBiasTop < 0) {\n          ele.minHeightBiasTop = 0;\n          ele.minHeightBiasBottom = 100;\n        }\n        if (ele.minHeightBiasBottom < 0) {\n          ele.minHeightBiasBottom = 0;\n          ele.minHeightBiasTop = 100;\n        }\n      }\n\n      // set positions as center\n\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      //bbox.x = (minLeft + maxRight) /2;\n      // bbox.y = (minTop + maxBottom) / 2;\n      bbox.w = bbox.w - 2 * padding - averageBorderWidthW;\n      bbox.h = bbox.h - 2 * padding - averageBorderWidthH;\n      bbox.w = bbox.w < 0 ? 0 : bbox.w;\n      bbox.h = bbox.h < 0 ? 0 : bbox.h;\n      return bbox;\n    }\n  };\n  sbgnmlToJson.stateAndInfoBboxProp = function (ele, parentBbox) {\n    // don't copy directly ele.box because it contains other things than x y w h\n    var bbox = {};\n    if (ele.bbox != null) {\n      bbox.x = ele.bbox.x;\n      bbox.y = ele.bbox.y;\n      bbox.w = ele.bbox.w;\n      bbox.h = ele.bbox.h;\n    } else {\n      bbox.x = 0;\n      bbox.y = 0;\n      bbox.w = 12;\n      bbox.h = 12;\n    }\n    return bbox;\n  };\n  sbgnmlToJson.calculateElementPadding = function (ele) {\n    var padding = 0;\n    var childNodes = ele.glyphMembers;\n    //exclude state variables and units of information from child members\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"binding region\" && child.class_ != \"residue variable\";\n    });\n    if (childNodes.length <= 0) return 0;\n    var compoundPadding = typeof options.compoundPadding === 'function' ? options.compoundPadding.call() : options.compoundPadding;\n    // } \n    if (ele.class_ == \"complex\") {\n      var complexPadding = 0;\n      var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;\n      complexPadding = compoundPadding < 5 ? 5 : compoundPadding;\n      var stateAndInfos = ele.glyphMembers.filter(function (child) {\n        return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"binding region\" || child.class_ == \"residue variable\";\n      });\n      if (ele.label != undefined && ele.label.text != undefined && ele.label.text.length > 0) {\n        complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        var hasTopBottomInfo = false;\n        stateAndInfos.forEach(function (stateAndInfo) {\n          if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((ele.bbox.y + ele.bbox.h).toFixed(2))) {\n            hasTopBottomInfo = true;\n          }\n        });\n        if (hasTopBottomInfo) {\n          complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        }\n      } else if (stateAndInfos.length > 0) {\n        complexPadding += 2;\n      }\n      padding = complexPadding;\n    } else {\n      var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n      padding = extraCompartmentPadding + compoundPadding;\n    }\n    return padding;\n  };\n  sbgnmlToJson.findChildNodes = function (ele, childTagName) {\n    // find child nodes at depth level of 1 relative to the element\n    var children = [];\n    for (var i = 0; i < ele.childNodes.length; i++) {\n      var child = ele.childNodes[i];\n      if (child.nodeType === 1 && child.tagName === childTagName) {\n        children.push(child);\n      }\n    }\n    return children;\n  };\n  sbgnmlToJson.findChildNode = function (ele, childTagName) {\n    var nodes = this.findChildNodes(ele, childTagName);\n    return nodes.length > 0 ? nodes[0] : undefined;\n  };\n  sbgnmlToJson.stateAndInfoProp = function (ele, parent) {\n    var self = this;\n    var parentBbox = parent.bbox;\n    var stateAndInfoArray = [];\n    var childGlyphs = ele.glyphMembers; // this.findChildNodes(ele, 'glyph');\n\n    // if a biological activity node has no unit of info, it must be a BA plain\n    if (parent[\"class\"] == \"biological activity\" && childGlyphs.length == 0) {\n      parent[\"class\"] = \"BA plain\";\n    }\n    for (var i = 0; i < childGlyphs.length; i++) {\n      var glyph = childGlyphs[i];\n      if (glyph.class_ !== 'unit of information' && glyph.class_ !== 'state variable' && glyph.class_ !== 'residue variable' && glyph.class_ !== 'binding region') {\n        continue;\n      }\n      var info = {};\n      var infobox;\n      var infoboxId = glyph.id;\n      if (glyph.class_ === 'unit of information') {\n        infobox = classes.UnitOfInformation.construct(undefined, undefined, infoboxId);\n        if (glyph.entity) {\n          // change the parent class according to its true class of biological activity\n          switch (glyph.entity.name) {\n            case 'unspecified entity':\n              parent[\"class\"] = \"BA unspecified entity\";\n              break;\n            case 'simple chemical':\n              parent[\"class\"] = \"BA simple chemical\";\n              break;\n            case 'macromolecule':\n              parent[\"class\"] = \"BA macromolecule\";\n              break;\n            case 'nucleic acid feature':\n              parent[\"class\"] = \"BA nucleic acid feature\";\n              break;\n            case 'perturbation':\n              parent[\"class\"] = \"BA perturbing agent\";\n              break;\n            case 'complex':\n              parent[\"class\"] = \"BA complex\";\n              break;\n          }\n        }\n        infobox.label = {\n          'text': glyph.label && glyph.label.text || undefined\n        };\n      } else if (glyph.class_ === 'state variable') {\n        infobox = classes.StateVariable.construct(undefined, undefined, undefined, infoboxId);\n        var state = glyph.state;\n        infobox.state.value = state && state.value || undefined;\n        infobox.state.variable = state && state.variable || undefined;\n      } else if (glyph.class_ === 'residue variable') {\n        infobox = classes.ResidueVariable.construct(undefined, undefined, infoboxId);\n        infobox.residue.variable = glyph.label && glyph.label.text || undefined;\n      } else if (glyph.class_ === 'binding region') {\n        infobox = classes.BindingRegion.construct(undefined, undefined, infoboxId);\n        infobox.region.variable = glyph.label && glyph.label.text || undefined;\n      }\n\n      //var bboxAndAnchorResult = getAuxUnitClass(infobox).setAnchorSideAndBbox();\n\n      infobox.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);\n      infobox.style = self.getDefaultStateAndInfoStyle(glyph, parent[\"class\"]);\n      //classes.StateVariable.setAnchorSide(infobox);\n      stateAndInfoArray.push(infobox);\n    }\n    return stateAndInfoArray;\n  };\n  sbgnmlToJson.getDefaultStateAndInfoStyle = function (gylph, parentClass) {\n    return elementUtilities.getDefaultInfoboxStyle(parentClass, gylph.class_);\n  };\n  sbgnmlToJson.addParentInfoToNode = function (ele, nodeObj, parent, compartments) {\n    var self = this;\n    var compartmentRef = ele.compartmentRef;\n    var inferNestingOnLoad = options.inferNestingOnLoad;\n    inferNestingOnLoad = typeof inferNestingOnLoad === 'function' ? inferNestingOnLoad.call() : inferNestingOnLoad;\n    if (parent) {\n      nodeObj.parent = parent;\n    } else if (compartmentRef) {\n      nodeObj.parent = compartmentRef;\n    } else if (inferNestingOnLoad) {\n      nodeObj.parent = '';\n\n      // add compartment according to geometry\n      for (var i = 0; i < compartments.length; i++) {\n        var bbox = {\n          'x': parseFloat(ele.bbox.x),\n          'y': parseFloat(ele.bbox.y),\n          'w': parseFloat(ele.bbox.w),\n          'h': parseFloat(ele.bbox.h),\n          'id': ele.id\n        };\n        if (self.isInBoundingBox(bbox, compartments[i])) {\n          nodeObj.parent = compartments[i].id;\n          break;\n        }\n      }\n    }\n  };\n  sbgnmlToJson.addCytoscapeJsNode = function (ele, jsonArray, parent, compartments) {\n    var self = this;\n    var nodeObj = {};\n    var styleObj = {};\n\n    // add id information\n    nodeObj.id = ele.id;\n    // add node bounding box information\n    nodeObj.bbox = self.bboxProp(ele);\n    if (ele.minWidth) {\n      nodeObj.minWidth = ele.minWidth;\n      nodeObj.minWidthBiasLeft = ele.minWidthBiasLeft;\n      nodeObj.minWidthBiasRight = ele.minWidthBiasRight;\n    }\n    if (ele.minHeight) {\n      nodeObj.minHeight = ele.minHeight;\n      nodeObj.minHeightBiasTop = ele.minHeightBiasTop;\n      nodeObj.minHeightBiasBottom = ele.minHeightBiasBottom;\n    }\n    if (ele.originalW) {\n      nodeObj.originalW = ele.originalW;\n    }\n    if (ele.originalH) {\n      nodeObj.originalH = ele.originalH;\n    }\n    if (ele.complexCalculatedPadding) {\n      nodeObj.complexCalculatedPadding = ele.complexCalculatedPadding;\n    }\n\n    // add class information\n    if (ele.class_ === \"source and sink\" || ele.class_ === \"emptyset\") {\n      nodeObj[\"class\"] = \"empty set\";\n    } else {\n      nodeObj[\"class\"] = ele.class_;\n    }\n    // add label information\n    nodeObj.label = ele.label && ele.label.text || undefined;\n    if (nodeObj.label != undefined) {\n      nodeObj.label = \"\" + nodeObj.label;\n    }\n    // add state and info box information\n    nodeObj.statesandinfos = self.stateAndInfoProp(ele, nodeObj);\n    // adding parent information\n    self.addParentInfoToNode(ele, nodeObj, parent, compartments);\n\n    // add language info, this will always be the mapType if not hybrid\n    var mapType = elementUtilities.mapType;\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF' || mapType == 'SBML') {\n      nodeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD';\n      }\n    } else {\n      //maptype == HybridAny\n      if (nodeObj[\"class\"].startsWith(\"SIF\")) {\n        nodeObj.language = 'SIF';\n      } else if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD'; //Need to add SBML here\n      }\n    }\n\n    // add default properties of the node type to element data\n    // these props would be overriden by style properties of element\n    // stored in the file\n    elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]);\n\n    // add clone information\n    if (ele.clone) {\n      nodeObj.clonemarker = true;\n    } else {\n      nodeObj.clonemarker = undefined;\n    }\n\n    // add port information\n    var ports = [];\n    var portElements = ele.ports;\n    for (var i = 0; i < portElements.length; i++) {\n      var portEl = portElements[i];\n      var id = portEl.id;\n      var relativeXPos = parseFloat(portEl.x) - nodeObj.bbox.x;\n      var relativeYPos = parseFloat(portEl.y) - nodeObj.bbox.y;\n      relativeXPos = relativeXPos / parseFloat(nodeObj.bbox.w) * 100;\n      relativeYPos = relativeYPos / parseFloat(nodeObj.bbox.h) * 100;\n\n      // In case port position is not vertically/horizontally aligned with the node center, decide a direction\n      if (Math.abs(relativeXPos) > 0 && Math.abs(relativeYPos) > 0) {\n        if (Math.abs(relativeXPos) >= Math.abs(relativeYPos)) relativeYPos = 0;else relativeXPos = 0;\n      }\n\n      // We assume that ports are not inside the node shape.\n      // Therefore, abs. value of their relative x and y coordinates (relative to node center) should be bigger than 50.\n      if (Math.abs(relativeXPos) < 50) {\n        relativeXPos = 0;\n      }\n      if (Math.abs(relativeYPos) < 50) {\n        relativeYPos = 0;\n      }\n      if (relativeXPos === 0 && relativeYPos === 0) {\n        continue;\n      }\n\n      // If port length is longer than the node size (for example, some sbgn files generated from Reactome database has very long ports),\n      // set the port length to 70 which is default in sbgnviz\n      if (Math.abs(relativeXPos) > 150 || Math.abs(relativeYPos) > 150) {\n        if (Math.abs(relativeXPos) > 150) relativeXPos = relativeXPos / Math.abs(relativeXPos) * 70;else relativeYPos = relativeYPos / Math.abs(relativeYPos) * 70;\n      }\n      ports.push({\n        id: id,\n        x: relativeXPos,\n        y: relativeYPos\n      });\n    }\n    nodeObj.ports = ports;\n    var _class = nodeObj[\"class\"];\n    // If the node can have ports and it has exactly 2 ports then it should be represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n    if (elementUtilities.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal';\n        // This is the ratio of the area occupied with ports over without ports\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        // Multiply the bbox with the calculated ratio\n        nodeObj.bbox.w = parseFloat(nodeObj.bbox.w) * ratio;\n        nodeObj.bbox.h = parseFloat(nodeObj.bbox.h) * ratio;\n      }\n    }\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      nodeObj = self.handleAnnotations(nodeObj, rdfElement);\n    }\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n        if (result.sbgnviz.hasHiddenNeighbour) {\n          nodeObj.thickBorder = true;\n        }\n        if (result.sbgnviz.collapsed) {\n          nodeObj.positionBeforeSaving = {\n            x: Number(result.sbgnviz.positionBeforeSaving[0].$.x),\n            y: Number(result.sbgnviz.positionBeforeSaving[0].$.y)\n          };\n          nodeObj.collapse = true;\n        }\n      });\n    }\n    var cytoscapeJsNode = {\n      data: nodeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsNode);\n  };\n\n  /**\n  * given a future cy object, and the corresponding element's libsbgnjs' extension, populates the annotations field\n  */\n  sbgnmlToJson.handleAnnotations = function (cyObject, rdfElement) {\n    // local utility function\n    function dbFromUrl(url) {\n      var regexp = /^http:\\/\\/identifiers.org\\/(.+?)\\/.+$/;\n      return url.replace(regexp, '$1');\n    }\n    function fillElementDataAnnotation(cyObject, annotationIndex, status, selectedDB, selectedRelation, annotationValue) {\n      if (!cyObject.annotations) {\n        cyObject.annotations = {};\n      }\n      var annotId = cyObject.id + \"-annot-\" + annotationIndex;\n      cyObject.annotations[annotId] = {\n        // The following may be hazardous. But setting it as unchecked leave the annotation out if the file is saved.\n        // This would lead to the user losing annotations without knowing it.\n        status: status,\n        // <-- we trust that what's been loaded is valid.\n        selectedDB: selectedDB,\n        selectedRelation: selectedRelation,\n        annotationValue: annotationValue\n      };\n      return cyObject;\n    }\n\n    // we assume that the id of the rdf:about field is the one of the current node, and that there's only 1 description\n    var id = rdfElement.getAllIds()[0];\n    var resources = rdfElement.getResourcesOfId(id);\n    var customProperties = rdfElement.getCustomPropertiesOfId(id);\n    var globalAnnotIndex = 0;\n    // handle controlled properties\n    for (var fullQualifier in resources) {\n      var relation = libsbgnjs.annot.Util.reducePrefix(fullQualifier);\n      for (var i = 0; i < resources[fullQualifier].length; i++) {\n        var value = resources[fullQualifier][i];\n        var selectedDB = dbFromUrl(value);\n        cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", selectedDB, relation, value);\n        globalAnnotIndex++;\n      }\n    }\n    // handle custom properties\n    for (var key in customProperties) {\n      var value = customProperties[key];\n      cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", key, \"sio:SIO_000223\", value);\n      globalAnnotIndex++;\n    }\n    return cyObject;\n  };\n  sbgnmlToJson.traverseNodes = function (ele, jsonArray, parent, compartments) {\n    var elId = ele.id;\n\n    // Workaround: In application we use class 'empty set' but on read write we use 'source and sink'\n    // SBGN-ML files can also have 'emptyset' class  \n    if (!handledElements[ele.class_] && ele.class_ !== \"source and sink\" && ele.class_ !== \"emptyset\") {\n      return;\n    }\n    this.insertedNodes[elId] = true;\n    var self = this;\n    // add complex nodes here\n\n    var eleClass = ele.class_;\n    if (eleClass === 'complex' || eleClass === 'complex multimer' || eleClass === 'submap' || eleClass === 'topology group') {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n      var childGlyphs = ele.glyphMembers;\n      for (var i = 0; i < childGlyphs.length; i++) {\n        var glyph = childGlyphs[i];\n        var glyphClass = glyph.class_;\n        if (glyphClass !== 'state variable' && glyphClass !== 'unit of information' && glyphClass !== 'residue variable' && glyphClass !== 'binding region') {\n          if (glyph.compartmentRef && glyph.compartmentRef != elId && eleClass == 'submap') {\n            self.traverseNodes(glyph, jsonArray, glyph.compartmentRef, compartments);\n          } else {\n            self.traverseNodes(glyph, jsonArray, elId, compartments);\n          }\n        }\n      }\n    } else {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n    }\n  };\n  sbgnmlToJson.getPorts = function (xmlObject) {\n    return xmlObject._cachedPorts = xmlObject._cachedPorts || xmlObject.querySelectorAll('port');\n  };\n  sbgnmlToJson.getGlyphs = function (xmlObject) {\n    var glyphs = xmlObject._cachedGlyphs;\n    if (!glyphs) {\n      glyphs = xmlObject._cachedGlyphs = xmlObject._cachedGlyphs || xmlObject.querySelectorAll('glyph');\n      var id2glyph = xmlObject._id2glyph = {};\n      for (var i = 0; i < glyphs.length; i++) {\n        var g = glyphs[i];\n        var id = g.getAttribute('id');\n        id2glyph[id] = g;\n      }\n    }\n    return glyphs;\n  };\n  sbgnmlToJson.getArcs = function (xmlObject) {\n    var arcs = xmlObject._cachedArcs;\n    if (!arcs) {\n      arcs = xmlObject._cachedArcs = xmlObject._cachedArcs || xmlObject.querySelectorAll('arc');\n      var id2arc = xmlObject._id2arc = {};\n      for (var i = 0; i < arcs.length; i++) {\n        var arc = arcs[i];\n        var id = arc.getAttribute('id');\n        id2arc[id] = arc;\n      }\n    }\n    return arcs;\n  };\n  sbgnmlToJson.getGlyphById = function (xmlObject, id) {\n    this.getGlyphs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2glyph[id];\n  };\n  sbgnmlToJson.getArcById = function (xmlObject, id) {\n    this.getArcs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2arc[id];\n  };\n  sbgnmlToJson.getArcSourceAndTarget = function (arc, xmlObject) {\n    // source and target can be inside of a port\n    var source = arc.source;\n    var target = arc.target;\n    var sourceNodeId;\n    var targetNodeId;\n    var sourceExists = this.getGlyphById(xmlObject, source);\n    var targetExists = this.getGlyphById(xmlObject, target);\n    if (sourceExists) {\n      sourceNodeId = source;\n    }\n    if (targetExists) {\n      targetNodeId = target;\n    }\n    var i;\n    var portEls = this.getPorts(xmlObject);\n    var port;\n    if (sourceNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n        if (port.getAttribute('id') === source) {\n          sourceNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n    if (targetNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n        if (port.getAttribute('id') === target) {\n          targetNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n    return {\n      'source': sourceNodeId,\n      'target': targetNodeId\n    };\n  };\n  sbgnmlToJson.getArcAnchorPointPositions = function (ele) {\n    var anchorPointPositions = [];\n    var children = ele.nexts;\n    for (var i = 0; i < children.length; i++) {\n      var posX = children[i].x;\n      var posY = children[i].y;\n      anchorPointPositions.push({\n        x: posX,\n        y: posY\n      });\n    }\n    return anchorPointPositions;\n  };\n  sbgnmlToJson.addCytoscapeJsEdge = function (ele, jsonArray, xmlObject) {\n    if (!handledElements[ele.class_]) {\n      return;\n    }\n    var self = this;\n    var sourceAndTarget = self.getArcSourceAndTarget(ele, xmlObject);\n    if (!this.insertedNodes[sourceAndTarget.source] || !this.insertedNodes[sourceAndTarget.target]) {\n      return;\n    }\n    var edgeObj = {};\n    var styleObj = {};\n    var anchorPointPositions = [];\n    if (sourceAndTarget.source !== sourceAndTarget.target) {\n      anchorPointPositions = self.getArcAnchorPointPositions(ele);\n    }\n    edgeObj.id = ele.id || undefined;\n    edgeObj[\"class\"] = ele.class_;\n\n    // bezier edge is the default edge style\n    // change if the file being loaded has curveStyle field\n    var curveStyle = \"bezier\";\n    if (ele.extension && ele.extension.has(\"curveStyle\")) {\n      parseString(ele.extension.get(\"curveStyle\"), function (err, result) {\n        curveStyle = result.curveStyle;\n      });\n    }\n    if (curveStyle == \"unbundled-bezier\") {\n      edgeObj.controlPointPositions = anchorPointPositions;\n    } else {\n      edgeObj.bendPointPositions = anchorPointPositions;\n    }\n    var isSifMetaEdge;\n    if (ele.extension && ele.extension.has(\"sifMetaEdge\")) {\n      parseString(ele.extension.get(\"sifMetaEdge\"), function (err, result) {\n        isSifMetaEdge = result.sifMetaEdge;\n      });\n    }\n    if (isSifMetaEdge) {\n      edgeObj[\"sif-meta\"] = true;\n    }\n\n    // add language info, this will always be the mapType if not hybrid\n    var PdEdges = [\"consumption\", \"production\", \"modulation\", \"stimulation\", \"catalysis\", \"inhibition\", \"necessary stimulation\", \"logic arc\", \"equivalence arc\"];\n    var AfEdges = [\"positive influence\", \"negative influence\", \"unknown influence\"];\n    var mapType = elementUtilities.mapType;\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF' || mapType == 'SBML') {\n      edgeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else {\n        edgeObj.language = 'AF';\n      }\n    } else {\n      //maptype == HybridAny\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else if (AfEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'AF';\n      } else {\n        edgeObj.language = 'SIF'; // Need to add SBML\n      }\n    }\n    elementUtilities.extendEdgeDataWithClassDefaults(edgeObj, edgeObj[\"class\"]);\n    edgeObj.cardinality = 0;\n    if (ele.glyphs.length > 0) {\n      for (var i = 0; i < ele.glyphs.length; i++) {\n        if (ele.glyphs[i].class_ === 'cardinality' || ele.glyphs[i].class_ === 'stoichiometry') {\n          var label = ele.glyphs[i].label;\n          edgeObj.cardinality = label.text || undefined;\n        }\n      }\n    }\n    edgeObj.source = sourceAndTarget.source;\n    edgeObj.target = sourceAndTarget.target;\n    edgeObj.portsource = ele.source;\n    edgeObj.porttarget = ele.target;\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      edgeObj = self.handleAnnotations(edgeObj, rdfElement);\n    }\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n      });\n    }\n    var cytoscapeJsEdge = {\n      data: edgeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsEdge);\n  };\n  sbgnmlToJson.applyStyle = function (renderInformation, nodes, edges) {\n    // get all color id references to their value\n    if (renderInformation.listOfColorDefinitions) {\n      var colorList = renderInformation.listOfColorDefinitions.colorDefinitions;\n      var colorIDToValue = {};\n      for (var i = 0; i < colorList.length; i++) {\n        colorIDToValue[colorList[i].id] = colorList[i].value;\n      }\n    }\n    // get all background image id references to their value\n    if (renderInformation.listOfBackgroundImages) {\n      var imageList = renderInformation.listOfBackgroundImages.backgroundImages;\n      var imageIDToValue = {};\n      for (var i = 0; i < imageList.length; i++) {\n        imageIDToValue[imageList[i].id] = imageList[i].value;\n      }\n    }\n\n    // convert style list to elementId-indexed object pointing to style\n    // also convert color references to color values\n    var styleList = renderInformation.listOfStyles.styles;\n    var memberIDToStyle = {};\n    for (var i = 0; i < styleList.length; i++) {\n      var style = styleList[i];\n      var renderGroup = style.renderGroup;\n\n      // convert color references\n      if (renderGroup.stroke != null && colorIDToValue) {\n        renderGroup.stroke = colorIDToValue[renderGroup.stroke];\n      }\n      if (renderGroup.fill != null && colorIDToValue) {\n        renderGroup.fill = colorIDToValue[renderGroup.fill];\n      }\n      // convert background image references\n      if (renderGroup.backgroundImage != null && imageIDToValue) {\n        renderGroup.backgroundImage = imageIDToValue[renderGroup.backgroundImage];\n      }\n      var idList = style.idList.split(' ');\n      for (var j = 0; j < idList.length; j++) {\n        var id = idList[j];\n        memberIDToStyle[id] = renderGroup;\n      }\n    }\n    function hexToDecimal(hex) {\n      return Math.round(parseInt('0x' + hex) / 255 * 100) / 100;\n    }\n    function convertHexColor(hex) {\n      if (hex.length == 7) {\n        // no opacity provided\n        return {\n          opacity: null,\n          color: hex\n        };\n      } else {\n        // length of 9\n        var color = hex.slice(0, 7);\n        var opacity = hexToDecimal(hex.slice(-2));\n        return {\n          opacity: opacity,\n          color: color\n        };\n      }\n    }\n    var nodePropMap = {\n      'background-color': 'fill',\n      'background-opacity': 'backgroundOpacity',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-family': 'fontFamily',\n      'font-style': 'fontStyle',\n      'font-weight': 'fontWeight',\n      'color': 'fontColor',\n      'text-halign': 'textAnchor',\n      'text-valign': 'vtextAnchor',\n      'background-image': 'backgroundImage',\n      'background-fit': 'backgroundFit',\n      'background-position-x': 'backgroundPosX',\n      'background-position-y': 'backgroundPosY',\n      'background-width': 'backgroundWidth',\n      'background-height': 'backgroundHeight',\n      'background-image-opacity': 'backgroundImageOpacity'\n    };\n    var edgePropMap = {\n      'line-color': 'stroke',\n      'width': 'strokeWidth'\n    };\n    var infoboxPropMap = {\n      'background-color': 'fill',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-weight': 'fontWeight',\n      'font-style': 'fontStyle',\n      'font-family': 'fontFamily',\n      'font-color': 'fontColor'\n    };\n    var nodePropDetails = {\n      'background-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n      /*  'background-opacity': {\n         'converter': convertHexColor,\n         'extra-field': 'opacity'\n       }, */\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var edgePropDetails = {\n      'line-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var infoboxPropDetails = {\n      'font-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    function getElementId(ele) {\n      return ele.data.id;\n    }\n    function getInfoboxId(infobox) {\n      return infobox.id;\n    }\n    function setElementStyleProp(ele, name, value) {\n      ele.data[name] = value;\n    }\n    function setInfoboxStyleProp(infobox, name, value) {\n      infobox.style[name] = value;\n    }\n\n    // apply the style to list and overwrite the default style\n    function overrideStyleProperties(list, propMap, propDetails, getId, setStyleProp) {\n      for (var i = 0; i < list.length; i++) {\n        var member = list[i];\n        var memberStyle = memberIDToStyle[getId(member)];\n        if (!memberStyle) {\n          return;\n        }\n        Object.keys(propMap).forEach(function (propName) {\n          var fieldName = propMap[propName];\n          var fieldVal = memberStyle[fieldName];\n          if (fieldVal !== undefined && fieldVal !== null) {\n            var details = propDetails && propDetails[propName];\n            if (details) {\n              if (details['converter']) {\n                fieldVal = details['converter'](fieldVal);\n              }\n              if (details['extra-field']) {\n                fieldVal = fieldVal[details['extra-field']];\n              }\n            }\n            setStyleProp(member, propName, fieldVal);\n          }\n        });\n\n        // if the member is a node\n        if (member.data && member.data.statesandinfos) {\n          overrideStyleProperties(member.data.statesandinfos, infoboxPropMap, infoboxPropDetails, getInfoboxId, setInfoboxStyleProp);\n        }\n      }\n    }\n    overrideStyleProperties(nodes, nodePropMap, nodePropDetails, getElementId, setElementStyleProp);\n    overrideStyleProperties(edges, edgePropMap, edgePropDetails, getElementId, setElementStyleProp);\n  };\n  sbgnmlToJson.mapPropertiesToObj = function () {\n    if (this.map.extension) {\n      // render extension was found\n      var extensionName;\n      if (this.map.extension.has('nwt:mapProperties')) {\n        extensionName = 'nwt:mapProperties';\n      } else if (this.map.extension.has('mapProperties')) {\n        extensionName = 'mapProperties';\n      }\n      var xml = this.map.extension.get(extensionName);\n      var obj;\n      parseString(xml, function (err, result) {\n        obj = result;\n      });\n      return obj;\n    } else {\n      return {\n        mapProperties: {\n          compoundPadding: mainUtilities.getCompoundPadding()\n        }\n      };\n    }\n  };\n  sbgnmlToJson.convert = function (xmlObject, urlParams) {\n    var self = this;\n    var cytoscapeJsNodes = [];\n    var cytoscapeJsEdges = [];\n    var compartmentChildrenMap = {}; // Map compartments children temporarily\n    elementUtilities.fileFormat = 'sbgnml';\n    var sbgn;\n    try {\n      var xmlString = new XMLSerializer().serializeToString(xmlObject);\n      sbgn = libsbgnjs.Sbgn.fromXML(xmlString);\n    } catch (err) {\n      throw new Error(\"Could not parse sbgnml. \" + err);\n    }\n    var map;\n    if (sbgn.maps.length < 1) {\n      // empty sbgn\n      return {\n        nodes: [],\n        edges: []\n      };\n    } else {\n      map = sbgn.maps[0]; // take first map of the file as the main map\n    }\n    this.map = map;\n    elementUtilities.mapType = elementUtilities.languageToMapType(map.language);\n    var compartments = self.getAllCompartments(map.glyphs);\n    var glyphs = map.glyphs;\n    var arcs = map.arcs;\n    var i;\n    for (i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n\n      // libsbgn library lists the glyphs of complexes in ele.glyphMembers but it does not store the glyphs of compartments\n      // store glyph members of compartments here.\n      var compartmentRef = glyph.compartmentRef;\n      if (glyph.class_ === 'compartment') {\n        if (compartmentChildrenMap[glyph.id] === undefined) {\n          compartmentChildrenMap[glyph.id] = glyph.glyphMembers;\n        }\n        glyph.glyphMembers = compartmentChildrenMap[glyph.id];\n      }\n      if (compartmentRef) {\n        if (compartmentChildrenMap[compartmentRef] === undefined) {\n          compartmentChildrenMap[compartmentRef] = [];\n        }\n        compartmentChildrenMap[compartmentRef].push(glyph);\n      }\n    }\n    var minDistanceToChildren = Number.MAX_SAFE_INTEGER;\n    if (urlParams && urlParams.compoundPadding) {\n      mainUtilities.setCompoundPadding(Number(urlParams.compoundPadding));\n    } else if (!map.extension) {\n      for (var i = 0; i < glyphs.length; i++) {\n        var glyph = glyphs[i];\n        childNodes = glyph.glyphMembers.filter(function (child) {\n          return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"residue variable\" && child.class_ != \"binding region\";\n        });\n        if (childNodes.length > 0) {\n          // compound node\n          var hasMin = false;\n          for (var j = 0; j < childNodes.length; j++) {\n            var childNode = childNodes[j];\n            var childClass = childNode.class_;\n            if (childClass === \"source and sink\" || childClass === \"emptyset\") {\n              childClass = \"empty set\";\n            }\n            var borderWidth = elementUtilities.getDefaultProperties(childClass)[\"border-width\"];\n            var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n              return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"residue variable\" || child.class_ == \"binding region\";\n            });\n            if (stateAndInfos.length > 0) {\n              for (var k = 0; k < stateAndInfos.length; k++) {\n                var stateBbox = stateAndInfos[k].bbox;\n                if (stateBbox.y - glyph.bbox.y < minDistanceToChildren) {\n                  minDistanceToChildren = stateBbox.y - glyph.bbox.y - borderWidth;\n                  hasMin = true;\n                }\n                if (stateBbox.x - glyph.bbox.x < minDistanceToChildren) {\n                  minDistanceToChildren = stateBbox.x - glyph.bbox.x - borderWidth;\n                  hasMin = true;\n                }\n                if (glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) < minDistanceToChildren) {\n                  minDistanceToChildren = glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) - borderWidth;\n                  hasMin = true;\n                }\n                if (glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) < minDistanceToChildren) {\n                  minDistanceToChildren = glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) - borderWidth;\n                  hasMin = true;\n                }\n              }\n            }\n            var childNodeBbox = childNode.bbox;\n            var left = childNodeBbox.x - glyph.bbox.x - borderWidth / 2;\n            var right = glyph.bbox.x + glyph.bbox.w - (childNodeBbox.x + childNodeBbox.w) - borderWidth / 2;\n            var top = childNodeBbox.y - glyph.bbox.y - borderWidth / 2;\n            var bottom = glyph.bbox.y + glyph.bbox.h - (childNodeBbox.y + childNodeBbox.h) - borderWidth / 2;\n            if (left < minDistanceToChildren) {\n              minDistanceToChildren = left;\n              hasMin = true;\n            }\n            if (right < minDistanceToChildren) {\n              minDistanceToChildren = right;\n              hasMin = true;\n            }\n            if (top < minDistanceToChildren) {\n              minDistanceToChildren = top;\n              hasMin = true;\n            }\n            if (bottom < minDistanceToChildren) {\n              minDistanceToChildren = bottom;\n              hasMin = true;\n            }\n          }\n          if (hasMin) {\n            if (glyph.class_ == \"complex\") {\n              var stateAndInfos = glyph.glyphMembers.filter(function (child) {\n                return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"residue variable\" || child.class_ == \"binding region\";\n              });\n              var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;\n              if (glyph.label != undefined && glyph.label.text != undefined && glyph.label.text.length > 0) {\n                minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;\n                var hasTopBottomInfo = false;\n                stateAndInfos.forEach(function (stateAndInfo) {\n                  if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((glyph.bbox.y + glyph.bbox.h).toFixed(2))) {\n                    hasTopBottomInfo = true;\n                  }\n                });\n                if (hasTopBottomInfo) {\n                  minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;\n                }\n              } else if (stateAndInfos.length > 0) {\n                minDistanceToChildren -= 2;\n              }\n            } else {\n              var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n              minDistanceToChildren = minDistanceToChildren - extraCompartmentPadding;\n            }\n          }\n        }\n      }\n      minDistanceToChildren = Math.round(minDistanceToChildren);\n      var newPadding = minDistanceToChildren - 1; // comes from cytoscape internal implementation of bounding box which is outerwidth + 1 (on each side)\n      if (newPadding < 0 || minDistanceToChildren == Math.round(Number.MAX_SAFE_INTEGER)) {\n        newPadding = 0;\n      }\n      mainUtilities.setCompoundPadding(newPadding);\n    } else {\n      var compoundPadding = 10;\n      //check if self.mapPropertiesToObj() has the 'nwt:mapProperties' field\n      if (this.map.extension.has('nwt:mapProperties')) {\n        compoundPadding = Number(self.mapPropertiesToObj()['nwt:mapProperties'].compoundPadding);\n      } else if (this.map.extension.has('mapProperties')) {\n        compoundPadding = Number(self.mapPropertiesToObj()['mapProperties'].compoundPadding);\n      }\n      mainUtilities.setCompoundPadding(compoundPadding);\n    }\n    for (i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n      self.traverseNodes(glyph, cytoscapeJsNodes, '', compartments, minDistanceToChildren);\n    }\n    for (i = 0; i < arcs.length; i++) {\n      var arc = arcs[i];\n      self.addCytoscapeJsEdge(arc, cytoscapeJsEdges, xmlObject);\n    }\n    if (map.extension && map.extension.has('renderInformation')) {\n      // render extension was found\n      self.applyStyle(map.extension.get('renderInformation'), cytoscapeJsNodes, cytoscapeJsEdges);\n    }\n    var cytoscapeJsGraph = {};\n    cytoscapeJsGraph.nodes = cytoscapeJsNodes;\n    cytoscapeJsGraph.edges = cytoscapeJsEdges;\n    this.insertedNodes = {};\n    var shouldDisablePorts = false;\n    cytoscapeJsGraph.nodes.forEach(function (node) {\n      if ((node.data.bbox.w == 0 || isNaN(node.data.bbox.w)) && (node.data.bbox.h == 0 || isNaN(node.data.bbox.h))) {\n        node.data.bbox.w = elementUtilities.getDefaultProperties(node.data[\"class\"]).width;\n        node.data.bbox.h = elementUtilities.getDefaultProperties(node.data[\"class\"]).height;\n        // node.data.bbox.x = 15;     \n        // node.data.bbox.y = 10; \n      }\n      node.data.ports.forEach(function (port) {\n        if (isNaN(port.x) || isNaN(port.y)) {\n          shouldDisablePorts = true;\n        }\n      });\n    });\n    if (shouldDisablePorts) {\n      graphUtilities.disablePorts();\n    }\n    //getDefaultProperties\n    //elementUtilities.nodeTypes.forEach(function(type){\n    //  console.log(elementUtilities.getDefaultProperties(type));\n    //});\n\n    //console.log(cytoscapeJsGraph);\n    //console.log( elementUtilities.nodeTypes);\n    return cytoscapeJsGraph;\n  };\n  sbgnmlToJson.doValidation = function (xmlString) {\n    var errors = [];\n    try {\n      errors = libsbgnjs.Sbgn.doValidation(xmlString);\n    } catch (err) {\n      throw new Error(\"Could not do validation. \" + err);\n    }\n    return errors;\n  };\n  return sbgnmlToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-sbml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-sbml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbgnmlToSbml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbgnmlToSbml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-dev.lcsb.uni.lu/minerva/api/convert/SBGN-ML:SBML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"text/plain; charset=UTF-8\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return sbgnmlToSbml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1zYm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInNiZ25tbFRvU2JtbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2Jnbm1sLXRvLXNibWwtY29udmVydGVyLWZhY3RvcnkuanM/NGVjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBqc29uVG9TYmdubWwsIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xuXG4gICAgZnVuY3Rpb24gc2Jnbm1sVG9TYm1sKHBhcmFtKSB7XG4gICAgICAgIGpzb25Ub1NiZ25tbCA9IHBhcmFtLmpzb25Ub1NiZ25tbENvbnZlcnRlcjtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XG4gICAgICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcbiAgICB9XG5cblxuICAgIHNiZ25tbFRvU2JtbC5jb252ZXJ0ID0gZnVuY3Rpb24gKHhtbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNvbnZlcnNpb25BcGlVcmwgPSBcImh0dHBzOi8vbWluZXJ2YS1kZXYubGNzYi51bmkubHUvbWluZXJ2YS9hcGkvY29udmVydC9TQkdOLU1MOlNCTUxcIjtcblxuICAgICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICAgIHVybDogY29udmVyc2lvbkFwaVVybCxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcInRleHQvcGxhaW47IGNoYXJzZXQ9VVRGLThcIixcbiAgICAgICAgICAgIGRhdGE6IHhtbCxcbiAgICAgICAgICAgIGRhdGFUeXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhLCB0ZXh0U3RhdHVzLCB4aHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZGF0YSwgbWVzc2FnZTogXCJJbnZhbGlkIHJlc3BvbnNlIGNvZGU6IFwiICsgeGhyLnN0YXR1c30pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IHRydWUsIG1lc3NhZ2U6IGRhdGEsIGVycm9yOiBcIlwifSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFpbDogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBlcnJvciwgbWVzc2FnZTogXCJcIn0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gc2Jnbm1sVG9TYm1sO1xuXG59XG4gICJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVk7RUFFekIsSUFBSUMsWUFBWSxFQUFFQyxnQkFBZ0IsRUFBRUMsRUFBRTtFQUV0QyxTQUFTQyxZQUFZQSxDQUFDQyxLQUFLLEVBQUU7SUFDekJKLFlBQVksR0FBR0ksS0FBSyxDQUFDQyxxQkFBcUI7SUFDMUNKLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUFnQjtJQUN6Q0MsRUFBRSxHQUFHRSxLQUFLLENBQUNFLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDckM7RUFHQUosWUFBWSxDQUFDSyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxRQUFRLEVBQUU7SUFDNUMsSUFBSUMsZ0JBQWdCLEdBQUcsa0VBQWtFO0lBRXpGLE9BQU9DLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ1ZDLElBQUksRUFBRSxNQUFNO01BQ1pDLEdBQUcsRUFBRUosZ0JBQWdCO01BQ3JCSyxXQUFXLEVBQUUsMkJBQTJCO01BQ3hDQyxJQUFJLEVBQUVSLEdBQUc7TUFDVFMsUUFBUSxFQUFFLE1BQU07TUFDaEJDLE9BQU8sRUFBRSxTQUFBQSxRQUFVRixJQUFJLEVBQUVHLFVBQVUsRUFBRUMsR0FBRyxFQUFFO1FBQ3RDLElBQUlBLEdBQUcsQ0FBQ0MsTUFBTSxLQUFLLEdBQUcsRUFBRTtVQUNwQlosUUFBUSxDQUFDO1lBQUNhLE1BQU0sRUFBRSxLQUFLO1lBQUVDLEtBQUssRUFBRVAsSUFBSTtZQUFFUSxPQUFPLEVBQUUseUJBQXlCLEdBQUdKLEdBQUcsQ0FBQ0M7VUFBTSxDQUFDLENBQUM7UUFDM0YsQ0FBQyxNQUFNO1VBQ0haLFFBQVEsQ0FBQztZQUFDYSxNQUFNLEVBQUUsSUFBSTtZQUFFRSxPQUFPLEVBQUVSLElBQUk7WUFBRU8sS0FBSyxFQUFFO1VBQUUsQ0FBQyxDQUFDO1FBQ3REO01BQ0osQ0FBQztNQUNEQSxLQUFLLEVBQUUsU0FBQUEsTUFBVUEsTUFBSyxFQUFFO1FBQ3BCZCxRQUFRLENBQUM7VUFBQ2EsTUFBTSxFQUFFLEtBQUs7VUFBRUMsS0FBSyxFQUFFQSxNQUFLO1VBQUVDLE9BQU8sRUFBRTtRQUFFLENBQUMsQ0FBQztNQUN4RCxDQUFDO01BQ0RDLElBQUksRUFBRSxTQUFBQSxLQUFVRixLQUFLLEVBQUU7UUFDbkJkLFFBQVEsQ0FBQztVQUFDYSxNQUFNLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUVBLEtBQUs7VUFBRUMsT0FBTyxFQUFFO1FBQUUsQ0FBQyxDQUFDO01BQ3hEO0lBQ0osQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQUVELE9BQU90QixZQUFZO0FBRXZCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-sbml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbml-simulation-utilities-factory.js":
/*!************************************************************!*\
  !*** ./src/utilities/sbml-simulation-utilities-factory.js ***!
  \************************************************************/
/***/ ((module) => {

eval("function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nmodule.exports = function () {\n  var parameters = {}; // { id = str: { name = str, value = float, unit = str, constant = bool } }, \n\n  var cy;\n  var sbmlSimulationUtilities = function sbmlSimulationUtilities(param) {\n    cy = param.sbgnCyInstance.getCy();\n  };\n  sbmlSimulationUtilities.generateUUID = function () {\n    // Public Domain/MIT\n    var d = Date.now();\n    if (typeof performance !== \"undefined\" && typeof performance.now === \"function\") {\n      d += performance.now(); //use high-precision timer if available\n    }\n    return \"xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n      var r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === \"x\" ? r : r & 0x3 | 0x8).toString(16);\n    });\n  };\n  sbmlSimulationUtilities.generateParameterID = function () {\n    return \"param_\" + sbmlSimulationUtilities.generateUUID();\n  };\n  sbmlSimulationUtilities.addParameter = function (name, value, unit, constant) {\n    var id = sbmlSimulationUtilities.generateParameterID();\n    parameters[id] = {\n      name: name,\n      value: value,\n      unit: unit,\n      constant: constant\n    };\n  };\n\n  // Should only be used while importing, not really anything else\n  // Consider using sbmlSimulationUtilities.addParameter(name, value, unit, constant)\n  sbmlSimulationUtilities.addParameterWithId = function (id, name, value, unit, constant) {\n    parameters[id] = {\n      name: name,\n      value: value,\n      unit: unit,\n      constant: constant\n    };\n  };\n  sbmlSimulationUtilities.removeParameter = function (id) {\n    delete parameters[id];\n  };\n  sbmlSimulationUtilities.getParameters = function () {\n    return Object.entries(parameters).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        id = _ref2[0],\n        _ref2$ = _ref2[1],\n        name = _ref2$.name,\n        value = _ref2$.value,\n        unit = _ref2$.unit,\n        constant = _ref2$.constant;\n      return {\n        id: id,\n        name: name,\n        value: value,\n        unit: unit,\n        constant: constant\n      };\n    });\n  };\n  sbmlSimulationUtilities.setParameter = function (id, field, value) {\n    parameters[id][field] = value;\n  };\n  return sbmlSimulationUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NibWwtc2ltdWxhdGlvbi11dGlsaXRpZXMtZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJhbWV0ZXJzIiwiY3kiLCJzYm1sU2ltdWxhdGlvblV0aWxpdGllcyIsInBhcmFtIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImdlbmVyYXRlVVVJRCIsImQiLCJEYXRlIiwibm93IiwicGVyZm9ybWFuY2UiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwiZmxvb3IiLCJ0b1N0cmluZyIsImdlbmVyYXRlUGFyYW1ldGVySUQiLCJhZGRQYXJhbWV0ZXIiLCJuYW1lIiwidmFsdWUiLCJ1bml0IiwiY29uc3RhbnQiLCJpZCIsImFkZFBhcmFtZXRlcldpdGhJZCIsInJlbW92ZVBhcmFtZXRlciIsImdldFBhcmFtZXRlcnMiLCJPYmplY3QiLCJlbnRyaWVzIiwibWFwIiwiX3JlZiIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkiLCJfcmVmMiQiLCJzZXRQYXJhbWV0ZXIiLCJmaWVsZCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2JtbC1zaW11bGF0aW9uLXV0aWxpdGllcy1mYWN0b3J5LmpzPzRjOWUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwYXJhbWV0ZXJzID0ge307IC8vIHsgaWQgPSBzdHI6IHsgbmFtZSA9IHN0ciwgdmFsdWUgPSBmbG9hdCwgdW5pdCA9IHN0ciwgY29uc3RhbnQgPSBib29sIH0gfSwgXG4gIFxuICB2YXIgY3k7XG4gIHZhciBzYm1sU2ltdWxhdGlvblV0aWxpdGllcyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xuICB9O1xuXG4gIHNibWxTaW11bGF0aW9uVXRpbGl0aWVzLmdlbmVyYXRlVVVJRCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBQdWJsaWMgRG9tYWluL01JVFxuICAgIHZhciBkID0gRGF0ZS5ub3coKTtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgcGVyZm9ybWFuY2UgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09IFwiZnVuY3Rpb25cIlxuICAgICkge1xuICAgICAgZCArPSBwZXJmb3JtYW5jZS5ub3coKTsgLy91c2UgaGlnaC1wcmVjaXNpb24gdGltZXIgaWYgYXZhaWxhYmxlXG4gICAgfVxuICAgIHJldHVybiBcInh4eHh4eHh4X3h4eHhfNHh4eF95eHh4X3h4eHh4eHh4eHh4eFwiLnJlcGxhY2UoXG4gICAgICAvW3h5XS9nLFxuICAgICAgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgICAgIHJldHVybiAoYyA9PT0gXCJ4XCIgPyByIDogKHIgJiAweDMpIHwgMHg4KS50b1N0cmluZygxNik7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICBzYm1sU2ltdWxhdGlvblV0aWxpdGllcy5nZW5lcmF0ZVBhcmFtZXRlcklEID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwicGFyYW1fXCIgKyBzYm1sU2ltdWxhdGlvblV0aWxpdGllcy5nZW5lcmF0ZVVVSUQoKTtcbiAgfVxuXG4gIHNibWxTaW11bGF0aW9uVXRpbGl0aWVzLmFkZFBhcmFtZXRlciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgdW5pdCwgY29uc3RhbnQpIHtcbiAgICB2YXIgaWQgPSBzYm1sU2ltdWxhdGlvblV0aWxpdGllcy5nZW5lcmF0ZVBhcmFtZXRlcklEKCk7XG4gICAgcGFyYW1ldGVyc1tpZF0gPSB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgdW5pdDogdW5pdCxcbiAgICAgIGNvbnN0YW50OiBjb25zdGFudFxuICAgIH1cbiAgfVxuXG4gIC8vIFNob3VsZCBvbmx5IGJlIHVzZWQgd2hpbGUgaW1wb3J0aW5nLCBub3QgcmVhbGx5IGFueXRoaW5nIGVsc2VcbiAgLy8gQ29uc2lkZXIgdXNpbmcgc2JtbFNpbXVsYXRpb25VdGlsaXRpZXMuYWRkUGFyYW1ldGVyKG5hbWUsIHZhbHVlLCB1bml0LCBjb25zdGFudClcbiAgc2JtbFNpbXVsYXRpb25VdGlsaXRpZXMuYWRkUGFyYW1ldGVyV2l0aElkID0gZnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlLCB1bml0LCBjb25zdGFudCl7XG4gICAgcGFyYW1ldGVyc1tpZF0gPSB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgdW5pdDogdW5pdCxcbiAgICAgIGNvbnN0YW50OiBjb25zdGFudFxuICAgIH1cbiAgfVxuXG4gIHNibWxTaW11bGF0aW9uVXRpbGl0aWVzLnJlbW92ZVBhcmFtZXRlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgIGRlbGV0ZSBwYXJhbWV0ZXJzW2lkXTtcbiAgfVxuXG4gIHNibWxTaW11bGF0aW9uVXRpbGl0aWVzLmdldFBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKcKge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhwYXJhbWV0ZXJzKS5tYXAoIChbaWQsIHtuYW1lLCB2YWx1ZSwgdW5pdCwgY29uc3RhbnR9XSkgPT4gKHtcbiAgICAgIGlkLCBuYW1lLCB2YWx1ZSwgdW5pdCwgY29uc3RhbnRcbiAgICB9KSk7XG4gIH1cblxuICBzYm1sU2ltdWxhdGlvblV0aWxpdGllcy5zZXRQYXJhbWV0ZXIgPSBmdW5jdGlvbiAoaWQsIGZpZWxkLCB2YWx1ZSkge1xuICAgIHBhcmFtZXRlcnNbaWRdW2ZpZWxkXSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHNibWxTaW11bGF0aW9uVXRpbGl0aWVzO1xufTtcbiAgIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQUEs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\n//# sourceURL=webpack-internal:///./src/utilities/sbml-simulation-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbml-to-json-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/sbml-to-json-converter-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, handledElements, mainUtilities, sbmlSimulationUtilities, libsbmlInstance;\n  var resultJson = [];\n  var speciesCompartmentMap = new Map();\n  var layout;\n  function sbmlToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    mainUtilities = param.mainUtilities;\n    sbmlSimulationUtilities = param.sbmlSimulationUtilities;\n    libsbmlInstance = param.libsbmlInstance;\n    handledElements = {};\n    elementUtilities.elementTypes.forEach(function (type) {\n      handledElements[type] = true;\n    });\n  }\n  var sboToNodeClass = {\n    278: \"rna\",\n    253: \"complex sbml\",\n    289: \"hypothetical complex\",\n    291: \"degradation\",\n    298: \"drug\",\n    243: \"gene\",\n    252: \"protein\",\n    327: \"ion\",\n    284: \"ion channel\",\n    358: \"phenotype sbml\",\n    244: \"receptor\",\n    247: \"simple molecule\",\n    248: \"truncated protein\",\n    285: \"unknown molecule\",\n    173: \"and\",\n    174: \"or\",\n    238: \"not\",\n    398: \"unknown logical operator\"\n  };\n  var sboToEdgeClass = {\n    536: \"unknown inhibition\",\n    462: \"unknown catalysis\",\n    171: \"positive influence sbml\",\n    407: \"negative influence\",\n    344: \"reduced modulation\",\n    411: \"reduced stimulation\",\n    168: \"reduced trigger\",\n    169: \"unknown negative influence\",\n    172: \"unknown positive influence\",\n    170: \"unknown reduced stimulation\",\n    342: \"unknown reduced modulation\",\n    205: \"unknown reduced trigger\",\n    594: \"modulation\",\n    459: \"stimulation\",\n    13: \"catalysis\",\n    537: \"inhibition\",\n    461: \"trigger\",\n    185: \"transport\"\n  };\n\n  //Set of modifiers\n  var modifiers = new Set();\n  modifiers.add(\"catalysis\");\n  modifiers.add(\"inhibition\");\n  modifiers.add(\"modulation\");\n  modifiers.add(\"stimulation\");\n  modifiers.add(\"trigger\");\n  modifiers.add(\"unknown catalysis\");\n  modifiers.add(\"unknown inhibition\");\n  var sboTwoEdgeOneNodeClass = {\n    176: [\"consumption\", \"process\", \"production\"],\n    //state transition\n    396: [\"consumption\", \"uncertain process\", \"production\"],\n    //Unknown transition\n    183: [\"transcription consumption\", \"process\", \"transcription production\"],\n    //Transcription\n    184: [\"translation consumption\", \"process\", \"translation production\"],\n    //Translation\n    185: [\"consumption\", \"process\", \"transport\"],\n    //Transport\n    397: [\"consumption\", \"omitted process\", \"production\"] //Known transition omitted\n  };\n  var sboAssociationDissociation = {\n    177: [\"consumption\", \"consumption\", \"association\", \"consumption\", \"process\", \"production\"],\n    //Heterodimer association\n    180: [\"consumption\", \"process\", \"consumption\", \"dissociation\", \"production\", \"production\"],\n    //Dissociation\n    178: [\"consumption\", \"truncated process\", \"consumption\", \"production\", \"production\"] //Truncation,\n  };\n  sbmlToJson.convert = function (xmlString, urlParams) {\n    var self = this;\n    var cytoscapeJsGraph = {};\n    var cytoscapeJsNodes = [];\n    var cytoscapeJsEdges = [];\n    var compartmentChildrenMap = {}; // Map compartments children temporarily\n    elementUtilities.fileFormat = 'sbml';\n    var model = null;\n    elementUtilities.mapType = 'SBML';\n    var reader = new libsbmlInstance.SBMLReader();\n    var doc = reader.readSBMLFromString(xmlString);\n    model = doc.getModel();\n    var plugin;\n    try {\n      plugin = model.findPlugin('layout');\n    } catch (err) {\n      plugin = undefined;\n    }\n    var layoutplugin;\n    if (plugin) {\n      layoutplugin = libsbmlInstance.castObject(plugin, libsbmlInstance.LayoutModelPlugin);\n      layout = layoutplugin.layouts[0];\n    }\n\n    // add compartments, species and reactions\n    var compartmentBoundingBoxes = new Map();\n    var containerNodeMap = new Map();\n    sbmlToJson.addParameters(model);\n    sbmlToJson.addCompartments(model, cytoscapeJsNodes, compartmentBoundingBoxes, containerNodeMap);\n    sbmlToJson.addSpecies(model, cytoscapeJsNodes, compartmentBoundingBoxes, containerNodeMap);\n    sbmlToJson.addReactions(model, cytoscapeJsEdges, cytoscapeJsNodes);\n    sbmlToJson.fixCompartmentBiases(model, cytoscapeJsNodes, compartmentBoundingBoxes);\n    var inferNestingOnLoad = options.inferNestingOnLoad;\n    inferNestingOnLoad = typeof inferNestingOnLoad === 'function' ? inferNestingOnLoad.call() : inferNestingOnLoad;\n    if (layout) sbmlToJson.inferNestingOnLoadSBML(cytoscapeJsNodes, containerNodeMap);\n    var result = resultJson;\n    cytoscapeJsGraph.nodes = cytoscapeJsNodes;\n    cytoscapeJsGraph.edges = cytoscapeJsEdges;\n    resultJson = [];\n    speciesCompartmentMap = new Map();\n    return cytoscapeJsGraph;\n  };\n\n  // add parameters TODO: implement units\n  sbmlToJson.addParameters = function (model) {\n    for (var i = 0; i < model.getNumParameters(); i++) {\n      var parameter = model.getParameter(i);\n      var paramId = parameter.getId();\n      var paramName = paramId;\n      if (parameter.isSetName()) paramName = parameter.getName();\n      paramValue = 0.0;\n      if (parameter.isSetValue()) paramValue = parameter.getValue();\n      paramConstant = true;\n      if (parameter.isSetConstant()) paramConstant = parameter.getConstant();\n      sbmlSimulationUtilities.addParameterWithId(paramId, paramName, paramValue, \"\", paramConstant);\n    }\n  };\n\n  // add compartment nodes\n  sbmlToJson.addCompartments = function (model, cytoscapeJsNodes, compartmentBoundingBoxes, containerNodeMap) {\n    compartmentMap = new Map();\n    for (var i = 0; i < model.getNumCompartments(); i++) {\n      var compartment = model.getCompartment(i);\n      compartmentMap.set(compartment.getId(), i);\n      if (compartment.getId() !== \"default\") {\n        var compartmentData = {\n          \"id\": compartment.getId(),\n          \"label\": compartment.getName(),\n          \"class\": \"compartment\"\n        };\n        var simulationData = {};\n        if (compartment.isSetSpatialDimensions()) simulationData.spatialDimensions = compartment.getSpatialDimensions();\n        if (compartment.isSetVolume()) simulationData.size = compartment.getVolume();\n        if (compartment.isSetConstant()) simulationData.constant = compartment.getConstant();\n        resultJson.push({\n          \"data\": compartmentData,\n          \"simulation\": simulationData,\n          \"group\": \"nodes\",\n          \"classes\": \"compartment\"\n        });\n      }\n      if (!compartmentBoundingBoxes.has(compartment.getId())) {\n        compartmentBoundingBoxes.set(compartment.getId(), {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 0\n        });\n      }\n    }\n    sbmlToJson.addJSCompartments(compartmentMap, resultJson, cytoscapeJsNodes, containerNodeMap);\n  };\n  sbmlToJson.addJSCompartments = function (compartmentMap, resultJson, cytoscapeJsNodes, containerNodeMap) {\n    for (var i = 0; i < resultJson.length; i++) {\n      if (resultJson[i].group == 'nodes' && resultJson[i].classes == \"compartment\") {\n        var nodeObj = {};\n        var styleObj = {};\n        var tempBbox = {};\n        nodeObj[\"class\"] = \"compartment\";\n        if (layout) {\n          var compartmentGlyph = layout.getCompartmentGlyph(compartmentMap.get(resultJson[i].data.id));\n          var boundingBox = compartmentGlyph.getBoundingBox();\n          tempBbox.x = boundingBox.x + boundingBox.width / 2;\n          tempBbox.y = boundingBox.y + boundingBox.height / 2;\n          tempBbox.w = boundingBox.width;\n          tempBbox.h = boundingBox.height;\n          nodeObj.minWidth = boundingBox.width;\n          nodeObj.minHeight = boundingBox.height;\n        } else {\n          tempBbox.x = 0;\n          tempBbox.y = 0;\n          tempBbox.w = 60;\n          tempBbox.h = 60;\n        }\n        nodeObj.id = resultJson[i].data.id;\n        nodeObj.bbox = tempBbox;\n        nodeObj.label = resultJson[i].data.label;\n        nodeObj.statesandinfos = [];\n        nodeObj.ports = [];\n        nodeObj.language = 'SBML';\n        nodeObj.simulation = resultJson[i].simulation;\n        if (resultJson[i].data.parent) nodeObj.parent = resultJson[i].data.parent;\n        containerNodeMap.set(nodeObj.id, {\n          x1: nodeObj.bbox.x - nodeObj.bbox.w / 2,\n          y1: nodeObj.bbox.y - nodeObj.bbox.h / 2,\n          x2: nodeObj.bbox.x + nodeObj.bbox.w / 2,\n          y2: nodeObj.bbox.y + nodeObj.bbox.h / 2,\n          area: nodeObj.bbox.w * nodeObj.bbox.h\n        });\n        var cytoscapeJsNode = {\n          data: nodeObj,\n          style: styleObj\n        };\n        elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]);\n        cytoscapeJsNodes.push(cytoscapeJsNode);\n      }\n    }\n  };\n\n  // add species nodes\n  sbmlToJson.addSpecies = function (model, cytoscapeJsNodes, compartmentBoundingBoxes, containerNodeMap) {\n    var _loop = function _loop() {\n        var species = model.getSpecies(i);\n        var active = false,\n          hypothetical = false,\n          multimer = false;\n        var bindingRegion = [],\n          residueVariable = [],\n          unitOfInfo = [];\n        parseString(species.getAnnotationString(), function (err, result) {\n          if (!result || !result.annotation[\"nwt:extension\"]) return;\n          var stateBooleans = result.annotation[\"nwt:extension\"][0][\"nwt:info\"][0].$;\n          active = stateBooleans[\"nwt:active\"] == \"true\" ? true : false;\n          hypothetical = stateBooleans[\"nwt:hypothetical\"] == \"true\" ? true : false;\n          multimer = stateBooleans[\"nwt:multimer\"] == \"true\" ? true : false;\n          bindingRegion = result.annotation[\"nwt:extension\"][0][\"nwt:info\"][0][\"nwt:bindingregion\"] || [];\n          residueVariable = result.annotation[\"nwt:extension\"][0][\"nwt:info\"][0][\"nwt:residuevariable\"] || [];\n          unitOfInfo = result.annotation[\"nwt:extension\"][0][\"nwt:info\"][0][\"nwt:unitinfo\"] || [];\n        });\n        speciesCompartmentMap.set(species.getId(), species.getCompartment());\n        sboTerm = species.getSBOTerm();\n        var speciesData = {\n          \"id\": species.getId(),\n          \"label\": species.getName() || species.getId(),\n          \"parent\": species.getCompartment(),\n          \"sboTerm\": species.getSBOTerm(),\n          \"active\": active,\n          \"multimer\": multimer,\n          \"hypothetical\": hypothetical,\n          \"bindingRegion\": bindingRegion,\n          \"residueVariable\": residueVariable,\n          \"unitOfInfo\": unitOfInfo\n        };\n        // TODO: Substance Units!\n        var simulationData = {};\n        if (species.isSetInitialAmount()) {\n          simulationData.initialAmount = species.getInitialAmount();\n          if (!species.isSetInitialConcentration()) simulationData.initialConcentration = species.getInitialAmount();\n        }\n        if (species.isSetInitialConcentration()) {\n          simulationData.initialConcentration = species.getInitialConcentration();\n          if (!species.isSetInitialAmount()) simulationData.initialAmount = species.getInitialConcentration();\n        }\n        if (species.isSetHasOnlySubstanceUnits()) simulationData.hasOnlySubstanceUnits = species.getHasOnlySubstanceUnits();\n        if (species.isSetConstant()) simulationData.constant = species.getConstant();\n        if (species.isSetBoundaryCondition()) simulationData.boundaryCondition = species.getBoundaryCondition();\n        if (species.isSetConversionFactor()) simulationData.conversionFactor = species.getConversionFactor();\n        resultJson.push({\n          \"data\": speciesData,\n          \"simulation\": simulationData,\n          \"group\": \"nodes\",\n          \"classes\": \"species\"\n        });\n      },\n      sboTerm;\n    for (var i = 0; i < model.getNumSpecies(); i++) {\n      _loop();\n    }\n    var speciesGlyphIdSpeciesIdMap = new Map();\n    if (layout) {\n      // traverse species\n      for (var _i = 0; _i < layout.getNumSpeciesGlyphs(); _i++) {\n        var specGlyph = layout.specglyphs[_i];\n        speciesGlyphIdSpeciesIdMap.set(specGlyph.getSpeciesId(), _i);\n      }\n    }\n    //Now create different model\n    sbmlToJson.addJSNodes(resultJson, cytoscapeJsNodes, speciesGlyphIdSpeciesIdMap, compartmentBoundingBoxes, containerNodeMap);\n  };\n  sbmlToJson.addJSNodes = function (resultJson, cytoscapeJsNodes, speciesGlyphIdSpeciesIdMap, compartmentBoundingBoxes, containerNodeMap) {\n    for (var i = 0; i < resultJson.length; i++) {\n      if (resultJson[i].group != 'nodes' || resultJson[i].classes != 'species') continue;\n      var nodeObj = {};\n      var styleObj = {};\n      var tempBbox = {};\n      if (layout) {\n        specGlyphId = speciesGlyphIdSpeciesIdMap.get(resultJson[i].data.id);\n        var speciesGlyph = layout.specglyphs[specGlyphId];\n        var bbox = speciesGlyph.getBoundingBox();\n        tempBbox.x = bbox.x + bbox.width / 2;\n        tempBbox.y = bbox.y + bbox.height / 2;\n        tempBbox.w = bbox.width;\n        tempBbox.h = bbox.height;\n      } else {\n        tempBbox.x = 0;\n        tempBbox.y = 0;\n        tempBbox.w = 50;\n        tempBbox.h = 30;\n      }\n      var sboTerm = resultJson[i].data.sboTerm;\n      if (sboToNodeClass[sboTerm]) {\n        nodeObj[\"class\"] = sboToNodeClass[sboTerm];\n      } else {\n        nodeObj[\"class\"] = \"simple molecule\";\n        tempBbox.w = 50;\n        tempBbox.h = 30;\n      }\n\n      //Check if node should have same height and same width\n      if (!layout && sbmlToJson.mustBeSquare(nodeObj[\"class\"]) && !sbmlToJson.complexOrPhenotype(nodeObj[\"class\"])) {\n        tempBbox.w = 20;\n        tempBbox.h = 20;\n      } else if (!layout && sbmlToJson.mustBeSquare(nodeObj[\"class\"]) && sbmlToJson.complexOrPhenotype(nodeObj[\"class\"])) {\n        tempBbox.w = 50;\n        tempBbox.h = 50;\n      }\n      nodeObj.id = resultJson[i].data.id;\n      nodeObj.bbox = tempBbox;\n      nodeObj.label = resultJson[i].data.label;\n      nodeObj.statesandinfos = [];\n      nodeObj.ports = [];\n      nodeObj.parent = resultJson[i].data.parent;\n      nodeObj.language = 'SBML';\n      nodeObj.simulation = resultJson[i].simulation;\n      if (sboTerm == 253) containerNodeMap.set(nodeObj.id, {\n        x1: nodeObj.bbox.x - nodeObj.bbox.w / 2,\n        y1: nodeObj.bbox.y - nodeObj.bbox.h / 2,\n        x2: nodeObj.bbox.x + nodeObj.bbox.w / 2,\n        y2: nodeObj.bbox.y + nodeObj.bbox.h / 2,\n        area: nodeObj.bbox.w * nodeObj.bbox.h\n      });\n      sbmlToJson.updateCompartmentBox(compartmentBoundingBoxes, nodeObj.parent, tempBbox);\n\n      // State and Info Boxes\n      var bindingRegions = resultJson[i].data.bindingRegion;\n      var _iterator = _createForOfIteratorHelper(bindingRegions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var region = _step.value;\n          var infoBox = classes.BindingRegion.construct(undefined, resultJson[i].data.id, undefined);\n          infoBox.region.variable = region._;\n          infoBox.style = elementUtilities.getDefaultInfoboxStyle(nodeObj[\"class\"], \"binding region\");\n          infoBox.bbox = {\n            'x': parseFloat(region.$['nwt:x']),\n            'y': parseFloat(region.$['nwt:y']),\n            'w': parseFloat(region.$['nwt:w']),\n            'h': parseFloat(region.$['nwt:h'])\n          };\n          nodeObj.statesandinfos.push(infoBox);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var residueVariables = resultJson[i].data.residueVariable;\n      var _iterator2 = _createForOfIteratorHelper(residueVariables),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var residue = _step2.value;\n          var _infoBox = classes.ResidueVariable.construct(undefined, undefined, resultJson[i].data.id, undefined);\n          _infoBox.residue.variable = residue._;\n          _infoBox.style = elementUtilities.getDefaultInfoboxStyle(nodeObj[\"class\"], \"residue variable\");\n          _infoBox.bbox = {\n            'x': parseFloat(residue.$['nwt:x']),\n            'y': parseFloat(residue.$['nwt:y']),\n            'w': parseFloat(residue.$['nwt:w']),\n            'h': parseFloat(residue.$['nwt:h'])\n          };\n          nodeObj.statesandinfos.push(_infoBox);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var unitsOfInformation = resultJson[i].data.unitOfInfo;\n      var _iterator3 = _createForOfIteratorHelper(unitsOfInformation),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var unit = _step3.value;\n          var _infoBox2 = classes.UnitOfInformation.construct(undefined, resultJson[i].data.id, undefined);\n          _infoBox2.label.text = unit._;\n          _infoBox2.style = elementUtilities.getDefaultInfoboxStyle(nodeObj[\"class\"], \"unit of information\");\n          _infoBox2.bbox = {\n            'x': parseFloat(unit.$['nwt:x']),\n            'y': parseFloat(unit.$['nwt:y']),\n            'w': parseFloat(unit.$['nwt:w']),\n            'h': parseFloat(unit.$['nwt:h'])\n          };\n          nodeObj.statesandinfos.push(_infoBox2);\n        }\n\n        // Add status info\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (resultJson[i].data.hypothetical) nodeObj[\"class\"] = \"hypothetical \" + nodeObj[\"class\"];\n      if (resultJson[i].data.active) nodeObj[\"class\"] = \"active \" + nodeObj[\"class\"];\n      if (resultJson[i].data.multimer) nodeObj[\"class\"] = nodeObj[\"class\"] + \" multimer\";\n      var cytoscapeJsNode = {\n        data: nodeObj,\n        style: styleObj\n      };\n      elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]);\n      cytoscapeJsNodes.push(cytoscapeJsNode);\n    }\n  };\n  sbmlToJson.fixCompartmentBiases = function (model, cytoscapeJsNodes, compartmentBoundingBoxes) {\n    for (var i = 0; i < cytoscapeJsNodes.length; i++) {\n      if (cytoscapeJsNodes[i].data[\"class\"] !== 'compartment') continue;\n      var leftMargin = -(cytoscapeJsNodes[i].data.bbox.x - cytoscapeJsNodes[i].data.bbox.w / 2) + compartmentBoundingBoxes.get(cytoscapeJsNodes[i].data.id).x1 - 1.625;\n      var rightMargin = cytoscapeJsNodes[i].data.bbox.x + cytoscapeJsNodes[i].data.bbox.w / 2 - compartmentBoundingBoxes.get(cytoscapeJsNodes[i].data.id).x2 - 1.625;\n      var topMargin = -(cytoscapeJsNodes[i].data.bbox.y - cytoscapeJsNodes[i].data.bbox.h / 2) + compartmentBoundingBoxes.get(cytoscapeJsNodes[i].data.id).y1 - 1.625;\n      var bottomMargin = cytoscapeJsNodes[i].data.bbox.y + cytoscapeJsNodes[i].data.bbox.h / 2 - compartmentBoundingBoxes.get(cytoscapeJsNodes[i].data.id).y2 - 1.625;\n      if (leftMargin + rightMargin != 0) {\n        cytoscapeJsNodes[i].data.minWidthBiasLeft = leftMargin / (leftMargin + rightMargin) * 100;\n        cytoscapeJsNodes[i].data.minWidthBiasRight = rightMargin / (leftMargin + rightMargin) * 100;\n      }\n      if (topMargin + bottomMargin != 0) {\n        cytoscapeJsNodes[i].data.minHeightBiasTop = topMargin / (topMargin + bottomMargin) * 100;\n        cytoscapeJsNodes[i].data.minHeightBiasBottom = bottomMargin / (topMargin + bottomMargin) * 100;\n      }\n    }\n  };\n  sbmlToJson.inferNestingOnLoadSBML = function (cytoscapeJsNodes, containerNodeMap) {\n    var contains = function contains(a, b) {\n      // box a containts box b\n      return a.x1 <= b.x1 && a.y1 <= b.y1 && a.x2 >= b.x2 && a.y2 >= b.y2;\n    };\n    var areaSortedContainerMap = new Map(_toConsumableArray(containerNodeMap.entries()).sort(function (a, b) {\n      return a[1].area - b[1].area;\n    }));\n    var _loop2 = function _loop2(i) {\n      var boundingBox = {\n        x1: cytoscapeJsNodes[i].data.bbox.x - cytoscapeJsNodes[i].data.bbox.w / 2,\n        y1: cytoscapeJsNodes[i].data.bbox.y - cytoscapeJsNodes[i].data.bbox.h / 2,\n        x2: cytoscapeJsNodes[i].data.bbox.x + cytoscapeJsNodes[i].data.bbox.w / 2,\n        y2: cytoscapeJsNodes[i].data.bbox.y + cytoscapeJsNodes[i].data.bbox.h / 2\n      };\n      var isFound = false;\n      areaSortedContainerMap.forEach(function (value, key) {\n        if (key == cytoscapeJsNodes[i].data.id) return;\n        if (contains(value, boundingBox) && !isFound) {\n          cytoscapeJsNodes[i].data.parent = key;\n          isFound = true;\n          return;\n        }\n      });\n    };\n    for (var i = 0; i < cytoscapeJsNodes.length; i++) {\n      _loop2(i);\n    }\n  };\n  sbmlToJson.mustBeSquare = function (className) {\n    return className == \"ion\" || className == \"degradation\" || className == \"complex sbml\" || className == \"phenotype sbml\";\n  };\n  sbmlToJson.complexOrPhenotype = function (className) {\n    return className == \"complex sbml\" || className == \"phenotype sbml\";\n  };\n  sbmlToJson.getDataOfNode = function (nodeId) {\n    for (var i = 0; i < resultJson.length; i++) {\n      var currentObj = resultJson[i];\n      if (currentObj.group =  true && currentObj.classes == \"species\" && currentObj.data.id == nodeId) {\n        return currentObj.data;\n      }\n    }\n  };\n  //Check if the source and target is in a common compartment\n  //If so returns that compartment id\n  sbmlToJson.checkSourceTargetInCompartement = function (sourceId, targetId) {\n    var sourceData = sbmlToJson.getDataOfNode(sourceId);\n    var targetData = sbmlToJson.getDataOfNode(targetId);\n    if (sourceData.parent == targetData.parent) {\n      return sourceData.parent;\n    } else {\n      return null;\n    }\n  };\n\n  //This function checks if a process nodes has both source and target\n  sbmlToJson.checkIfTargetAndSourceExist = function (processId, resultJson) {\n    var hasSource = false;\n    var hasTarget = false;\n    for (var i = 0; i < resultJson.length; i++) {\n      var currentObj = resultJson[i];\n      if (currentObj.group = \"edges\") {\n        if (currentObj.data.source == processId) {\n          hasTarget = true;\n        }\n        if (currentObj.data.target == processId) {\n          hasSource = true;\n        }\n      }\n    }\n    if (hasSource && hasTarget) {\n      return;\n    }\n    if (!hasSource) {\n      var degradation = {\n        \"id\": 'degradation' + processId,\n        \"class\": \"degradation\"\n      };\n      degradation.width = 15;\n      degradation.height = 15;\n      resultJson.push({\n        \"data\": degradation,\n        \"group\": \"nodes\",\n        \"classes\": \"degradation\"\n      });\n      var reactantEdgeData = {\n        \"id\": 'degradation_' + processId,\n        \"source\": 'degradation' + processId,\n        \"target\": processId,\n        \"class\": \"consumption\"\n      };\n      resultJson.push({\n        \"data\": reactantEdgeData,\n        \"group\": \"edges\",\n        \"classes\": \"forDegradation\"\n      });\n    }\n    if (!hasTarget) {\n      var _degradation = {\n        \"id\": 'degradation' + processId,\n        \"class\": \"degradation\"\n      };\n      _degradation.width = 15;\n      _degradation.height = 15;\n      resultJson.push({\n        \"data\": _degradation,\n        \"group\": \"nodes\",\n        \"classes\": \"degradation\"\n      });\n      var _reactantEdgeData = {\n        \"id\": 'degradation_' + processId,\n        \"source\": processId,\n        \"target\": 'degradation' + processId,\n        \"class\": \"production\"\n      };\n      resultJson.push({\n        \"data\": _reactantEdgeData,\n        \"group\": \"edges\",\n        \"classes\": \"forDegradation\"\n      });\n    }\n  };\n  sbmlToJson.addReactions = function (model, cytoscapeJsEdges, cytoscapeJsNodes) {\n    for (var i = 0; i < model.getNumReactions(); i++) {\n      var reaction = model.getReaction(i);\n      var reactionParentMap = new Map();\n      var edgeClass1 = null;\n      var edgeClass2 = null;\n      var nodeClass = null;\n      var reducedNotation = false;\n      var logicalBoolean = false;\n\n      //Map sbo term if exists\n      var sboTermReaction = reaction.getSBOTerm();\n      if (sboToEdgeClass[sboTermReaction]) {\n        edgeClass1 = sboToEdgeClass[sboTermReaction];\n        reducedNotation = true;\n      } else if (sboTwoEdgeOneNodeClass[sboTermReaction]) {\n        edgeClass1 = sboTwoEdgeOneNodeClass[sboTermReaction][0];\n        nodeClass = sboTwoEdgeOneNodeClass[sboTermReaction][1];\n        edgeClass2 = sboTwoEdgeOneNodeClass[sboTermReaction][2];\n      } else if (sboTermReaction == 177) {\n        nodeClass = \"association\";\n      } else if (sboTermReaction == 180) {\n        nodeClass = \"dissociation\";\n      } else if (sboTermReaction == 178) {\n        nodeClass = 'truncated process';\n      } else if (sboTermReaction == 231)\n        //231 stand for boolean logic reactions in CD but does not specify which one. And logical gate will be used for default\n        {\n          logicalBoolean = true;\n          nodeClass = 'and';\n        } else if (sboTermReaction == 173) {\n        logicalBoolean = true;\n        nodeClass = 'and';\n      } else if (sboTermReaction == 174) {\n        logicalBoolean = true;\n        nodeClass = 'or';\n      } else if (sboTermReaction == 238) {\n        logicalBoolean = true;\n        nodeClass = 'not';\n      } else if (sboTermReaction == 398) {\n        logicalBoolean = true;\n        nodeClass = 'unknown logical operator';\n      } else {\n        edgeClass1 = \"consumption\";\n        nodeClass = \"process\";\n        edgeClass2 = \"production\";\n      }\n      if (reducedNotation) {\n        var reactant = reaction.getReactant(0);\n        var product = reaction.getProduct(0);\n        var edgeData = {\n          \"id\": reactant.getSpecies() + '_' + reaction.getId(),\n          \"source\": reactant.getSpecies(),\n          \"target\": product.getSpecies(),\n          \"class\": edgeClass1\n        };\n        resultJson.push({\n          \"data\": edgeData,\n          \"group\": \"edges\",\n          \"classes\": \"reducedNotation\"\n        });\n        continue;\n      }\n      if (logicalBoolean) {\n        //Get parents\n        var _parent = reaction.getCompartment();\n\n        //Add boolean logic node\n        var boolNode = {\n          \"id\": nodeClass + \"_\" + reaction.getId(),\n          \"label\": \"\",\n          \"parent\": _parent,\n          \"class\": nodeClass\n        };\n        boolNode.width = 15;\n        boolNode.height = 15;\n        resultJson.push({\n          \"data\": boolNode,\n          \"group\": \"nodes\",\n          \"classes\": \"boolean\"\n        });\n        for (var j = 0; j < reaction.getNumReactants(); j++) {\n          var _reactant = reaction.getReactant(j);\n          var _reactantEdgeData2 = {\n            \"id\": _reactant.getSpecies() + '_' + reaction.getId(),\n            \"source\": _reactant.getSpecies(),\n            \"target\": nodeClass + \"_\" + reaction.getId(),\n            \"class\": \"consumption\"\n          };\n          resultJson.push({\n            \"data\": _reactantEdgeData2,\n            \"group\": \"edges\",\n            \"classes\": \"reactantEdge\"\n          });\n        }\n        var _product = reaction.getProduct(0);\n        var reactantEdgeData = {\n          \"id\": _product.getSpecies() + '_' + reaction.getId(),\n          \"source\": nodeClass + \"_\" + reaction.getId(),\n          \"target\": _product.getSpecies(),\n          \"class\": \"reduced trigger\"\n        };\n        resultJson.push({\n          \"data\": reactantEdgeData,\n          \"group\": \"edges\",\n          \"classes\": \"reactantEdge\"\n        });\n        continue;\n      }\n      for (var _j = 0; _j < reaction.getNumReactants(); _j++) {\n        var _reactant2 = reaction.getReactant(_j);\n        var _reactantEdgeData3 = {\n          \"id\": _reactant2.getSpecies() + '_' + reaction.getId(),\n          \"source\": _reactant2.getSpecies(),\n          \"target\": reaction.getId()\n        };\n        if (edgeClass1) _reactantEdgeData3[\"class\"] = edgeClass1;\n        var simulationDataReactant = {};\n        if (_reactant2.isSetStoichiometry()) simulationDataReactant.stoichiometry = _reactant2.getStoichiometry();\n        if (_reactant2.isSetConstant()) simulationDataReactant.constant = _reactant2.getConstant();\n        resultJson.push({\n          \"data\": _reactantEdgeData3,\n          \"simulation\": simulationDataReactant,\n          \"group\": \"edges\",\n          \"classes\": \"reactantEdge\"\n        });\n\n        // collect possible parent info\n        var speciesCompartment = speciesCompartmentMap.get(_reactant2.getSpecies());\n        if (reactionParentMap.has(speciesCompartment)) reactionParentMap.set(speciesCompartment, reactionParentMap.get(speciesCompartment) + 1);else reactionParentMap.set(speciesCompartment, 1);\n      }\n\n      // add reaction->product edges\n      for (var k = 0; k < reaction.getNumProducts(); k++) {\n        var _product2 = reaction.getProduct(k);\n        var productEdgeData = {\n          \"id\": reaction.getId() + '_' + _product2.getSpecies(),\n          \"source\": reaction.getId(),\n          \"target\": _product2.getSpecies()\n        };\n        if (edgeClass1) productEdgeData[\"class\"] = edgeClass2;\n        if (sboTermReaction == 231) productEdgeData[\"class\"] = \"trigger\";\n        var simulationDataProduct = {};\n        if (_product2.isSetStoichiometry()) simulationDataProduct.stoichiometry = _product2.getStoichiometry();\n        if (_product2.isSetConstant()) simulationDataProduct.constant = _product2.getConstant();\n        resultJson.push({\n          \"data\": productEdgeData,\n          \"simulation\": simulationDataProduct,\n          \"group\": \"edges\",\n          \"classes\": \"productEdge\"\n        });\n\n        // collect possible parent info\n        var _speciesCompartment = speciesCompartmentMap.get(_product2.getSpecies());\n        if (reactionParentMap.has(_speciesCompartment)) reactionParentMap.set(_speciesCompartment, reactionParentMap.get(_speciesCompartment) + 1);else reactionParentMap.set(_speciesCompartment, 1);\n      }\n\n      // add reaction node\n      var parent = reaction.getCompartment();\n      var reactionData = {\n        \"id\": reaction.getId(),\n        \"label\": reaction.getName(),\n        \"parent\": parent\n      };\n      reactionData.width = 15;\n      reactionData.height = 15;\n      if (nodeClass) {\n        reactionData[\"class\"] = nodeClass;\n      }\n\n      // TODO: Implement Local Parameters\n      var simulationData = {};\n      if (reaction.isSetKineticLaw()) {\n        simulationData.kineticLaw = reaction.getKineticLaw().getFormula();\n      }\n      reactionData.simulation = simulationData;\n      resultJson.push({\n        \"data\": reactionData,\n        \"group\": \"nodes\",\n        \"classes\": \"reaction\"\n      });\n\n      // add modifier->reaction edges\n      for (var l = 0; l < reaction.getNumModifiers(); l++) {\n        var modifier = reaction.getModifier(l);\n        var sboTerm = modifier.getSBOTerm();\n        var metaId = modifier.getMetaId();\n        var modifierEdgeData = {\n          \"id\": modifier.getSpecies() + '_' + reaction.getId(),\n          \"source\": modifier.getSpecies(),\n          \"target\": reaction.getId(),\n          \"sboTerm\": modifier.getSBOTerm()\n        };\n        if (sboToEdgeClass[sboTerm]) modifierEdgeData[\"class\"] = sboToEdgeClass[sboTerm];\n        resultJson.push({\n          \"data\": modifierEdgeData,\n          \"group\": \"edges\",\n          \"classes\": \"modifierEdge\"\n        });\n\n        // collect possible parent info\n        var _speciesCompartment2 = speciesCompartmentMap.get(modifier.getSpecies());\n        if (reactionParentMap.has(_speciesCompartment2)) reactionParentMap.set(_speciesCompartment2, reactionParentMap.get(_speciesCompartment2) + 1);else reactionParentMap.set(_speciesCompartment2, 1);\n      }\n    }\n    var reactionGlyphMap = new Map();\n    if (layout) {\n      for (var _i2 = 0; _i2 < layout.getNumReactionGlyphs(); _i2++) {\n        reactionGlyphMap.set(layout.getReactionGlyph(_i2).getReactionId(), _i2);\n      }\n    }\n    sbmlToJson.addJSEdges(resultJson, cytoscapeJsNodes, cytoscapeJsEdges, reactionGlyphMap);\n  };\n  sbmlToJson.addJSEdges = function (resultJson, cytoscapeJsNodes, cytoscapeJsEdges, reactionGlyphMap) {\n    //Default values\n    var classNameEdge1 = \"consumption\"; //Reactant\n    var classNameEdge2 = \"production\"; //Product\n    var classNameEdge3 = \"catalysis\"; //Modifier\n\n    for (var i = 0; i < resultJson.length; i++) {\n      if (resultJson[i].group == 'nodes' && (resultJson[i].classes == \"reaction\" || resultJson[i].classes == \"degradation\" || resultJson[i].classes == \"boolean\")) {\n        var portOrdering = \"L-to-R\";\n        if (layout) {\n          // get reaction glyph\n          var reactionGlyphId = reactionGlyphMap.get(resultJson[i].data.id);\n          var reactionGlyph = layout.getReactionGlyph(reactionGlyphId);\n\n          //create and set bbox values for the reaction node\n          var reactionCurveStart = reactionGlyph.getCurve().getCurveSegment(0).getStart();\n          var reactionCurveEnd = reactionGlyph.getCurve().getCurveSegment(0).getEnd();\n          var reactionCurveLength = Math.max(Math.abs(reactionCurveStart.x() - reactionCurveEnd.x()), Math.abs(reactionCurveStart.y() - reactionCurveEnd.y()));\n          var tempBbox = {};\n          tempBbox.x = (reactionCurveStart.x() + reactionCurveEnd.x()) / 2;\n          tempBbox.y = (reactionCurveStart.y() + reactionCurveEnd.y()) / 2;\n          tempBbox.w = reactionCurveLength;\n          tempBbox.h = reactionCurveLength;\n          if (tempBbox.w <= 0) tempBbox.w = 20;\n          if (tempBbox.h <= 0) tempBbox.h = 20;\n          resultJson[i].data.bbox = tempBbox;\n\n          // Set port ordering string\n          if (reactionCurveStart.x() == reactionCurveEnd.x() && reactionCurveStart.y() < reactionCurveEnd.y()) {\n            portOrdering = \"B-to-T\";\n          } else if (reactionCurveStart.x() == reactionCurveEnd.x() && reactionCurveStart.y() > reactionCurveEnd.y()) {\n            portOrdering = \"T-to-B\";\n          } else if (reactionCurveStart.x() < reactionCurveEnd.x() && reactionCurveStart.y() == reactionCurveEnd.y()) {\n            portOrdering = \"L-to-R\";\n          } else if (reactionCurveStart.x() > reactionCurveEnd.x() && reactionCurveStart.y() == reactionCurveEnd.y()) {\n            portOrdering = \"R-to-L\";\n          }\n        }\n        var port1 = {\n            x: 0,\n            y: 0\n          },\n          port2 = {\n            x: 0,\n            y: 0\n          };\n        if (portOrdering == \"L-to-R\") {\n          port1.x = 70;\n          port2.x = -70;\n        } else if (portOrdering == \"R-to-L\") {\n          port1.x = -70;\n          port2.x = 70;\n        } else if (portOrdering == \"B-to-T\") {\n          port1.y = 70;\n          port2.y = -70;\n        } else if (portOrdering == \"T-to-B\") {\n          port1.y = -70;\n          port2.y = 70;\n        }\n        var ports = [];\n        ports.push({\n          id: resultJson[i].data.id + \".1\",\n          x: port1.x,\n          y: port1.y\n        });\n        ports.push({\n          id: resultJson[i].data.id + \".2\",\n          x: port2.x,\n          y: port2.y\n        });\n        resultJson[i].data.ports = ports;\n        sbmlToJson.addNodes(cytoscapeJsNodes, resultJson[i].data);\n      }\n    }\n    //Create map-  nodeId: nodeClass\n    var nodeIdClass = {};\n    for (var _i3 = 0; _i3 < cytoscapeJsNodes.length; _i3++) {\n      var currentNodeData = cytoscapeJsNodes[_i3].data;\n      nodeIdClass[currentNodeData.id] = currentNodeData[\"class\"];\n    }\n    for (var _i4 = 0; _i4 < resultJson.length; _i4++) {\n      if (resultJson[_i4].group == 'edges') {\n        var edgeObj = {};\n        var styleObj = {};\n        edgeObj.source = resultJson[_i4].data.source; //Is this the label or id?\n        if (nodeIdClass[edgeObj.source] && sbmlToJson.isProcessNode(nodeIdClass[edgeObj.source]) || sbmlToJson.isLogicalOperator(nodeIdClass[edgeObj.source]) || sbmlToJson.isAssocOrDissoc(nodeIdClass[edgeObj.source])) {\n          edgeObj.portsource = resultJson[_i4].data.source + \".1\";\n        }\n        if (resultJson[_i4].classes == \"reactantEdge\") {\n          if (resultJson[_i4].data[\"class\"]) {\n            edgeObj[\"class\"] = resultJson[_i4].data[\"class\"];\n          } else {\n            edgeObj[\"class\"] = classNameEdge1;\n          }\n        } else if (resultJson[_i4].classes == \"modifierEdge\") {\n          if (resultJson[_i4].data[\"class\"]) {\n            edgeObj[\"class\"] = resultJson[_i4].data[\"class\"];\n          } else {\n            edgeObj[\"class\"] = classNameEdge3;\n          }\n        } else {\n          if (resultJson[_i4].data[\"class\"]) {\n            edgeObj[\"class\"] = resultJson[_i4].data[\"class\"];\n          } else {\n            edgeObj[\"class\"] = classNameEdge2;\n          }\n        }\n        edgeObj.id = resultJson[_i4].data.id;\n        edgeObj.target = resultJson[_i4].data.target;\n        if (!modifiers.has(edgeObj[\"class\"]) && nodeIdClass[edgeObj.target] && (sbmlToJson.isProcessNode(nodeIdClass[edgeObj.target]) || sbmlToJson.isLogicalOperator(nodeIdClass[edgeObj.target]) || sbmlToJson.isAssocOrDissoc(nodeIdClass[edgeObj.target]))) {\n          edgeObj.porttarget = edgeObj.target + \".2\";\n        }\n        edgeObj.language = 'SBML';\n        edgeObj.simulation = resultJson[_i4].simulation;\n        elementUtilities.extendEdgeDataWithClassDefaults(edgeObj, edgeObj[\"class\"]);\n        var cytoscapeJsEdge1 = {\n          data: edgeObj,\n          style: styleObj\n        };\n        cytoscapeJsEdges.push(cytoscapeJsEdge1);\n      }\n    }\n  };\n  sbmlToJson.isProcessNode = function (nodeClass) {\n    return nodeClass.endsWith(\"process\");\n  };\n  sbmlToJson.isLogicalOperator = function (nodeClass) {\n    return nodeClass == \"or\" || nodeClass == \"not\" || nodeClass == \"and\" || nodeClass == \"unknown logical operator\";\n  };\n  sbmlToJson.isAssocOrDissoc = function (nodeClass) {\n    return nodeClass == \"association\" || nodeClass == \"dissociation\";\n  };\n\n  //This function is used to add more nodes(process, association, dissociation) when itterating through the reactions. \n  sbmlToJson.addNodes = function (cytoscapeJsNodes, data) {\n    var nodeObj = {};\n    var styleObj = {};\n    var tempBbox = {};\n    var className = \"process\";\n    if (data[\"class\"]) {\n      className = data[\"class\"];\n    }\n    if (!layout) {\n      tempBbox.x = 0;\n      tempBbox.y = 0;\n      tempBbox.w = data.width;\n      tempBbox.h = data.height;\n      nodeObj.bbox = tempBbox;\n    } else {\n      nodeObj.bbox = data.bbox;\n    }\n    nodeObj[\"class\"] = className;\n    nodeObj.id = data.id;\n    nodeObj.statesandinfos = [];\n    nodeObj.ports = data.ports;\n    nodeObj.parent = data.parent;\n    nodeObj.language = 'SBML';\n    nodeObj.simulation = data.simulation;\n    var cytoscapeJsNode = {\n      data: nodeObj,\n      style: styleObj\n    };\n    elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]);\n    cytoscapeJsNodes.push(cytoscapeJsNode);\n    return nodeObj.id;\n  };\n  sbmlToJson.mapPropertiesToObj = function () {\n    /*\n    if (this.map.extension && this.map.extension.has('mapProperties')) { // render extension was found\n       var xml = this.map.extension.get('mapProperties');\n       var obj;\n       parseString(xml, function (err, result) {\n          obj = result;\n       });\n       return obj;\n    }else{\n        \n          return {mapProperties : {compoundPadding : mainUtilities.getCompoundPadding()}};\n        }\n        */\n    return {};\n  };\n\n  // x, y -> middle point for newBox, top left - bottom right points for compartmentBoundingBoxes\n  sbmlToJson.updateCompartmentBox = function (compartmentBoundingBoxes, compartmentId, newBox) {\n    var bbox = compartmentBoundingBoxes.get(compartmentId);\n    if (bbox.x1 == 0 && bbox.y1 == 0 && bbox.x2 == 0 && bbox.y2 == 0) {\n      // Uninitialized\n      compartmentBoundingBoxes.set(compartmentId, {\n        x1: newBox.x - newBox.w / 2,\n        y1: newBox.y - newBox.h / 2,\n        x2: newBox.x + newBox.w / 2,\n        y2: newBox.y + newBox.h / 2\n      });\n      return;\n    }\n\n    // Left and Top Side Update\n    var newBBox = {\n      x1: bbox.x1,\n      y1: bbox.y1,\n      x2: bbox.x2,\n      y2: bbox.y2\n    };\n    if (newBox.x - newBox.w / 2 < bbox.x1) {\n      newBBox.x1 = newBox.x - newBox.w / 2;\n    }\n    if (newBox.y - newBox.h / 2 < bbox.y1) {\n      newBBox.y1 = newBox.y - newBox.h / 2;\n    }\n\n    // Right and Bottom Side Update\n    if (newBox.x + newBox.w / 2 > bbox.x2) {\n      newBBox.x2 = newBox.x + newBox.w / 2;\n    }\n    if (newBox.y + newBox.h / 2 > bbox.y2) {\n      newBBox.y2 = newBox.y + newBox.h / 2;\n    }\n    compartmentBoundingBoxes.set(compartmentId, newBBox);\n  };\n  return sbmlToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sbml-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbml-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbml-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nmodule.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbmlToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbmlToSbgnml.convert = function (xml, callback) {\n    console.log(\"in convert\");\n    var conversionApiUrl = \"https://minerva-dev.lcsb.uni.lu/minerva/api/convert/SBML:SBGN-ML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"text/plain; charset=UTF-8\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return sbmlToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NibWwtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBVztFQUUxQixJQUFJQyxZQUFZLEVBQUVDLGdCQUFnQixFQUFFQyxFQUFFO0VBRXRDLFNBQVNDLFlBQVlBLENBQUNDLEtBQUssRUFBRTtJQUMzQkosWUFBWSxHQUFHSSxLQUFLLENBQUNDLHFCQUFxQjtJQUMxQ0osZ0JBQWdCLEdBQUdHLEtBQUssQ0FBQ0gsZ0JBQWdCO0lBQ3pDQyxFQUFFLEdBQUdFLEtBQUssQ0FBQ0UsY0FBYyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNuQztFQUdBSixZQUFZLENBQUNLLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtJQUM1Q0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsWUFBWSxDQUFDO0lBQzNCLElBQUlDLGdCQUFnQixHQUFHLGtFQUFrRTtJQUV6RixPQUFPQyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNWQyxJQUFJLEVBQUUsTUFBTTtNQUNaQyxHQUFHLEVBQUVKLGdCQUFnQjtNQUNyQkssV0FBVyxFQUFFLDJCQUEyQjtNQUN4Q0MsSUFBSSxFQUFFVixHQUFHO01BQ1RXLFFBQVEsRUFBRSxNQUFNO01BQ2hCQyxPQUFPLEVBQUUsU0FBQUEsUUFBVUYsSUFBSSxFQUFFRyxVQUFVLEVBQUVDLEdBQUcsRUFBRTtRQUN0QyxJQUFJQSxHQUFHLENBQUNDLE1BQU0sS0FBSyxHQUFHLEVBQUU7VUFDcEJkLFFBQVEsQ0FBQztZQUFDZSxNQUFNLEVBQUUsS0FBSztZQUFFQyxLQUFLLEVBQUVQLElBQUk7WUFBRVEsT0FBTyxFQUFFLHlCQUF5QixHQUFHSixHQUFHLENBQUNDO1VBQU0sQ0FBQyxDQUFDO1FBQzNGLENBQUMsTUFBTTtVQUNIZCxRQUFRLENBQUM7WUFBQ2UsTUFBTSxFQUFFLElBQUk7WUFBRUUsT0FBTyxFQUFFUixJQUFJO1lBQUVPLEtBQUssRUFBRTtVQUFFLENBQUMsQ0FBQztRQUN0RDtNQUNKLENBQUM7TUFDREEsS0FBSyxFQUFFLFNBQUFBLE1BQVVBLE1BQUssRUFBRTtRQUNwQmhCLFFBQVEsQ0FBQztVQUFDZSxNQUFNLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUVBLE1BQUs7VUFBRUMsT0FBTyxFQUFFO1FBQUUsQ0FBQyxDQUFDO01BQ3hELENBQUM7TUFDREMsSUFBSSxFQUFFLFNBQUFBLEtBQVVGLEtBQUssRUFBRTtRQUNuQmhCLFFBQVEsQ0FBQztVQUFDZSxNQUFNLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUVBLEtBQUs7VUFBRUMsT0FBTyxFQUFFO1FBQUUsQ0FBQyxDQUFDO01BQ3hEO0lBQ0osQ0FBQyxDQUFDO0VBRUosQ0FBQztFQUVELE9BQU94QixZQUFZO0FBRXJCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9zYm1sLXRvLXNiZ25tbC1jb252ZXJ0ZXItZmFjdG9yeS5qcz80ZjJhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGpzb25Ub1NiZ25tbCwgZWxlbWVudFV0aWxpdGllcywgY3k7XG5cbiAgZnVuY3Rpb24gc2JtbFRvU2Jnbm1sKHBhcmFtKSB7XG4gICAganNvblRvU2Jnbm1sID0gcGFyYW0uanNvblRvU2Jnbm1sQ29udmVydGVyO1xuICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcbiAgfVxuXG5cbiAgc2JtbFRvU2Jnbm1sLmNvbnZlcnQgPSBmdW5jdGlvbiAoeG1sLCBjYWxsYmFjaykge1xuICAgICAgY29uc29sZS5sb2coXCJpbiBjb252ZXJ0XCIpXG4gICAgdmFyIGNvbnZlcnNpb25BcGlVcmwgPSBcImh0dHBzOi8vbWluZXJ2YS1kZXYubGNzYi51bmkubHUvbWluZXJ2YS9hcGkvY29udmVydC9TQk1MOlNCR04tTUxcIjtcblxuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgICB0eXBlOiAncG9zdCcsXG4gICAgICAgIHVybDogY29udmVyc2lvbkFwaVVybCxcbiAgICAgICAgY29udGVudFR5cGU6IFwidGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOFwiLFxuICAgICAgICBkYXRhOiB4bWwsXG4gICAgICAgIGRhdGFUeXBlOiBcInRleHRcIixcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEsIHRleHRTdGF0dXMsIHhocikge1xuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZGF0YSwgbWVzc2FnZTogXCJJbnZhbGlkIHJlc3BvbnNlIGNvZGU6IFwiICsgeGhyLnN0YXR1c30pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiB0cnVlLCBtZXNzYWdlOiBkYXRhLCBlcnJvcjogXCJcIn0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZhaWw6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBlcnJvciwgbWVzc2FnZTogXCJcIn0pO1xuICAgICAgICB9LFxuICAgIH0pXG4gICAgICBcbiAgfVxuXG4gIHJldHVybiBzYm1sVG9TYmdubWw7XG5cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwianNvblRvU2Jnbm1sIiwiZWxlbWVudFV0aWxpdGllcyIsImN5Iiwic2JtbFRvU2Jnbm1sIiwicGFyYW0iLCJqc29uVG9TYmdubWxDb252ZXJ0ZXIiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwiY29udmVydCIsInhtbCIsImNhbGxiYWNrIiwiY29uc29sZSIsImxvZyIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/sbml-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sif-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/sif-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\nfunction strToSet(str, splitBy) {\n  var set = {};\n  var list = str ? str.split(splitBy) : [];\n  list.forEach(function (member) {\n    set[member] = true;\n  });\n  return set;\n}\nfunction getEmptyGraphData() {\n  return {\n    nodes: [],\n    edges: []\n  };\n}\nmodule.exports = function () {\n  var elementUtilities;\n  function sifToJson(param) {\n    elementUtilities = param.elementUtilities;\n  }\n  sifToJson.initGraphVariables = function () {\n    sifToJson.graphData = getEmptyGraphData();\n    sifToJson.nameToNode = {};\n    sifToJson.keyToEdge = {};\n    // set of nodes that are connected to an edge\n    sifToJson.nodeWithSpecifiedClass = {};\n  };\n  sifToJson.defaultNodeType = 'SIF macromolecule';\n  sifToJson.mergeGraphData = function () {\n    return [].concat(_toConsumableArray(sifToJson.graphData.nodes), _toConsumableArray(sifToJson.graphData.edges));\n  };\n  sifToJson.convert = function (graphText) {\n    elementUtilities.fileFormat = 'sif';\n    elementUtilities.mapType = 'SIF';\n    sifToJson.initGraphVariables();\n    if (graphText == undefined) {\n      return sifToJson.graphData;\n    }\n    var lines = tdParser.getLinesArray(graphText.toString());\n    lines.forEach(function (line) {\n      var tabs = tdParser.getTabsArray(line);\n\n      // line represents a node\n      if (tabs.length === 1) {\n        var nodeName = tabs[0];\n        // create the node if does not exist yet\n        // if the node is just created it will have the default node class\n        sifToJson.getOrCreateNode(nodeName);\n      }\n      // line represents an edge and the connected nodes\n      else {\n        var srcName = tabs[0];\n        var edgeType = tabs[1];\n        var tgtName = tabs[2];\n        var pcIDSet = strToSet(tabs[3], /;| /);\n        var siteLocSet = strToSet(tabs[4], ';');\n        var srcClass = sifToJson.getNodeClass(edgeType, 'src');\n        var tgtClass = sifToJson.getNodeClass(edgeType, 'tgt');\n\n        // create nodes if they do not exist yet\n        // if the node already exists the node type and so the default values\n        // will be updated\n        sifToJson.getOrCreateNode(srcName, srcClass);\n        sifToJson.getOrCreateNode(tgtName, tgtClass);\n\n        // create the edge if it does not exist yet\n        sifToJson.getOrCreateEdge(srcName, edgeType, tgtName, pcIDSet, siteLocSet);\n      }\n    });\n    return sifToJson.mergeGraphData();\n  };\n  sifToJson.getNodeByName = function (name) {\n    return sifToJson.nameToNode[name];\n  };\n  sifToJson.getEdgeByProps = function (srcName, type, tgtName) {\n    var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);\n    return sifToJson.keyToEdge[key];\n  };\n  sifToJson.mapNodeToName = function (node, name) {\n    sifToJson.nameToNode[name] = node;\n  };\n  sifToJson.mapEdgeToKey = function (edge, key) {\n    sifToJson.keyToEdge[key] = edge;\n  };\n  sifToJson.calculateEdgeKey = function (src, type, tgt) {\n    return [src, type, tgt].join(' ');\n  };\n  sifToJson.getOrCreateNode = function (name, className) {\n    // save if class name parameter is set\n    var classNameSpecified = !!className;\n    className = className || sifToJson.defaultNodeType;\n    var node = sifToJson.getNodeByName(name);\n    var defaults = elementUtilities.getDefaultProperties(className);\n    var updateWithDefaults = function updateWithDefaults() {\n      elementUtilities.extendNodeDataWithClassDefaults(node.data, className);\n      node.data.bbox.h = defaults.height;\n      if (elementUtilities.canHaveSBGNLabel(className)) {\n        var isDynamicLabel = sifToJson.getMapProperty('adjustNodeLabelFontSizeAutomatically');\n        var fontSize;\n        var fontFamily = node.data['font-family'];\n        if (isDynamicLabel) {\n          var dynamicLabelSize = sifToJson.getMapProperty('dynamicLabelSize');\n          var coeff = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);\n          var obj = {\n            height: node.data.bbox.h,\n            \"class\": className\n          };\n          fontSize = elementUtilities.getDynamicLabelTextSize(obj, coeff);\n        } else {\n          fontSize = node.data['font-size'];\n        }\n        var max = 250;\n        node.data.bbox.w = elementUtilities.getWidthByContent(name, fontFamily, fontSize, {\n          max: max\n        });\n      } else {\n        node.data.bbox.w = defaults.width;\n      }\n    };\n    if (node == undefined) {\n      var uid = elementUtilities.generateNodeId();\n      node = {};\n      node.data = {\n        id: uid,\n        label: name,\n        \"class\": className,\n        bbox: {\n          x: 0,\n          y: 0\n        },\n        statesandinfos: [],\n        ports: []\n      };\n      updateWithDefaults();\n      sifToJson.mapNodeToName(node, name);\n      sifToJson.graphData.nodes.push(node);\n    }\n    // if class name parameter is set and the already existing node has a different\n    // class name check if the existing node has a specified class or just used the\n    // default one because it was not coming from an edge.\n    // In first case give a warning and do not update the class,\n    // in second case update the class and the node data with defaults\n    else if (classNameSpecified && node.data[\"class\"] !== className) {\n      if (sifToJson.nodeWithSpecifiedClass[name]) {\n        console.warn('Type of node ' + name + ' cannot be updated as ' + className + ' because it was already specified as ' + node.data[\"class\"]);\n      } else {\n        node.data[\"class\"] = className;\n        updateWithDefaults();\n      }\n    }\n    if (classNameSpecified) {\n      sifToJson.nodeWithSpecifiedClass[name] = true;\n    }\n    return node;\n  };\n  sifToJson.getOrCreateEdge = function (srcName, type, tgtName, pcIDSet, siteLocSet) {\n    var edge = sifToJson.getEdgeByProps(srcName, type, tgtName);\n    if (edge == undefined) {\n      var uid = elementUtilities.generateEdgeId();\n      var source = sifToJson.getNodeByName(srcName).data.id;\n      var target = sifToJson.getNodeByName(tgtName).data.id;\n      edge = {};\n      edge.data = {\n        id: uid,\n        pcIDSet: pcIDSet,\n        siteLocSet: siteLocSet,\n        source: source,\n        target: target,\n        \"class\": type\n      };\n      elementUtilities.extendEdgeDataWithClassDefaults(edge.data, type);\n      var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);\n      sifToJson.mapEdgeToKey(edge, key);\n      sifToJson.graphData.edges.push(edge);\n    }\n    return edge;\n  };\n  sifToJson.getNodeClass = function (edgeType, role) {\n    var type;\n    switch (edgeType) {\n      case 'controls-production-of':\n      case 'controls-transport-of-chemical':\n        type = role === 'src' ? 'SIF macromolecule' : 'SIF simple chemical';\n        break;\n      case 'consumption-controled-by':\n      case 'chemical-affects':\n        type = role === 'src' ? 'SIF simple chemical' : 'SIF macromolecule';\n        break;\n      case 'reacts-with':\n      case 'used-to-produce':\n        type = 'SIF simple chemical';\n        break;\n      default:\n        type = 'SIF macromolecule';\n        break;\n    }\n    return type;\n  };\n  sifToJson.getMapProperty = function (propName) {\n    return sifToJson.mapPropertiesToObj()['mapProperties'][propName];\n  };\n  sifToJson.mapPropertiesToObj = function () {\n    return {\n      mapProperties: {\n        dynamicLabelSize: 'large',\n        adjustNodeLabelFontSizeAutomatically: true\n      }\n    };\n  };\n  return sifToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sif-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/tab-delimeted-parser.js":
/*!***********************************************!*\
  !*** ./src/utilities/tab-delimeted-parser.js ***!
  \***********************************************/
/***/ ((module) => {

eval("function tdParser() {}\n;\ntdParser.getTabsArray = function (line) {\n  return line.split('\\t');\n};\ntdParser.getLinesArray = function (content) {\n  var separator = /\\r?\\n|\\r/;\n  var notEmpty = function notEmpty(line) {\n    return line !== '';\n  };\n  return content.split(separator).filter(notEmpty);\n};\nmodule.exports = tdParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3RhYi1kZWxpbWV0ZWQtcGFyc2VyLmpzIiwibmFtZXMiOlsidGRQYXJzZXIiLCJnZXRUYWJzQXJyYXkiLCJsaW5lIiwic3BsaXQiLCJnZXRMaW5lc0FycmF5IiwiY29udGVudCIsInNlcGFyYXRvciIsIm5vdEVtcHR5IiwiZmlsdGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvdGFiLWRlbGltZXRlZC1wYXJzZXIuanM/MGVmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB0ZFBhcnNlcigpIHtcbn07XG5cbnRkUGFyc2VyLmdldFRhYnNBcnJheSA9IGZ1bmN0aW9uKCBsaW5lICkge1xuICByZXR1cm4gbGluZS5zcGxpdCggJ1xcdCcgKTtcbn07XG5cbnRkUGFyc2VyLmdldExpbmVzQXJyYXkgPSBmdW5jdGlvbiggY29udGVudCApIHtcbiAgdmFyIHNlcGFyYXRvciA9IC9cXHI/XFxufFxcci87XG4gIHZhciBub3RFbXB0eSA9IGZ1bmN0aW9uKCBsaW5lICkge1xuICAgIHJldHVybiBsaW5lICE9PSAnJztcbiAgfTtcbiAgcmV0dXJuIGNvbnRlbnQuc3BsaXQoIHNlcGFyYXRvciApLmZpbHRlciggbm90RW1wdHkgKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdGRQYXJzZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFFBQVFBLENBQUEsRUFBRyxDQUNwQjtBQUFDO0FBRURBLFFBQVEsQ0FBQ0MsWUFBWSxHQUFHLFVBQVVDLElBQUksRUFBRztFQUN2QyxPQUFPQSxJQUFJLENBQUNDLEtBQUssQ0FBRSxJQUFLLENBQUM7QUFDM0IsQ0FBQztBQUVESCxRQUFRLENBQUNJLGFBQWEsR0FBRyxVQUFVQyxPQUFPLEVBQUc7RUFDM0MsSUFBSUMsU0FBUyxHQUFHLFVBQVU7RUFDMUIsSUFBSUMsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQWFMLElBQUksRUFBRztJQUM5QixPQUFPQSxJQUFJLEtBQUssRUFBRTtFQUNwQixDQUFDO0VBQ0QsT0FBT0csT0FBTyxDQUFDRixLQUFLLENBQUVHLFNBQVUsQ0FBQyxDQUFDRSxNQUFNLENBQUVELFFBQVMsQ0FBQztBQUN0RCxDQUFDO0FBRURFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVixRQUFRIiwiaWdub3JlTGlzdCI6W119\n//# sourceURL=webpack-internal:///./src/utilities/tab-delimeted-parser.js\n");

/***/ }),

/***/ "./src/utilities/tab-delimited-to-json-converter-factory.js":
/*!******************************************************************!*\
  !*** ./src/utilities/tab-delimited-to-json-converter-factory.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var elementUtilities;\n  function tdToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n  }\n  tdToJson.map = undefined;\n  tdToJson.edgeTypes = {\n    'positive influence': true,\n    'negative influence': true,\n    'unknown influence': true,\n    'necassary influence': true,\n    'logic arcs': true,\n    'equivalance arcs': true\n  };\n  tdToJson.nodeTypes = {\n    'biological activity': 'BA plain',\n    'macromolecule': 'BA macromolecule',\n    'complex': 'BA complex',\n    'simple chemical': 'BA simple chemical',\n    'unspecified entity': 'BA unspecified entity',\n    'nucleic acid feature': 'BA nucleic acid feature',\n    'perturbing agent': 'BA perturbing agent',\n    'phenotype': 'phenotype',\n    'compartment': 'compartment',\n    'submap': 'submap',\n    'tag': 'tag',\n    'and': 'and',\n    'or': 'or',\n    'not': 'not',\n    'delay': 'delay'\n  };\n  tdToJson.validateNodeType = function (type) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n    return this.nodeTypes.hasOwnProperty(_type);\n  };\n  tdToJson.validateEdgeType = function (type) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n    return this.edgeTypes.hasOwnProperty(_type);\n  };\n  tdToJson.convertTypeToClass = function (ele, type, isNode) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n    ele.data[\"class\"] = isNode ? this.nodeTypes[_type] : _type;\n  };\n  tdToJson.mapPropertiesToObj = function () {\n    return {\n      mapProperties: this.map.mapProperties\n    };\n  };\n\n  /**\n   * Adds states and infobox information to given node\n   * @param node : a node object\n   */\n  tdToJson.addInfoBox = function (node) {\n    var _class = node.data[\"class\"];\n    if (_class.startsWith(\"BA\") && _class != \"BA plain\") {\n      var unitOfInformation = classes.UnitOfInformation.construct();\n      unitOfInformation.parent = node.data.id;\n      // file format does not contain bbox information, hence define them below\n      unitOfInformation.bbox = {\n        x: 25,\n        y: -50,\n        w: 30,\n        h: 12\n      };\n      classes.UnitOfInformation.setAnchorSide(unitOfInformation);\n      node.data.statesandinfos = [unitOfInformation];\n    } else {\n      node.data.statesandinfos = [];\n    }\n  };\n  tdToJson.convert = function (graphText) {\n    elementUtilities.fileFormat = 'td';\n    if (graphText === undefined) {\n      return {\n        nodes: [],\n        edges: []\n      };\n    } else {\n      var map = {};\n      var nodes = []; //Holds nodes\n      var edges = []; //Holds edges\n      this.map = map;\n\n      //Define the line separator\n      // \\r\\n, \\n and \\r line separators\n      var separator = /\\r?\\n|\\r/;\n      var lines = graphText.toString().split(separator);\n      var graphDataIndex = 4; //graph data starts at index 4\n      var edgesStartIndex = -1; //unkown at the begining\n\n      var formatVersion = lines[0];\n      if (formatVersion.length < 10 || formatVersion.substring(0, 10).toLowerCase() != 'sbgnviz af') {\n        throw \"Wrong file format!\";\n      }\n      if (formatVersion.length == 10) {\n        formatVersion = formatVersion + \" 1.0\"; //default 1.0\n      }\n      var title = lines[1];\n      var description = lines[2];\n      //Second element of the format version specifies map language\n      var mapLanguage = formatVersion.toString().split(\" \")[1];\n      elementUtilities.mapType = mapLanguage;\n      map.mapProperties = {};\n      map.mapProperties.mapDescription = description;\n      map.mapProperties.mapName = title;\n      //start to parse the graph\n      for (var i = graphDataIndex; i < lines.length; i++) {\n        //blank line indicates that nodes are finished\n        //so continue with edges\n        if (lines[i].length === 0 || lines[i] === \"\") {\n          while (lines[i] === \"\" && i < lines.length) {\n            i++;\n          }\n          edgesStartIndex = i + 2;\n          break;\n        }\n\n        //Parse the node data\n        var data = lines[i].toString().split('\\t'); //each data seperated by tab\n        var nodeName = data[0];\n\n        //If there is no blank line\n        if (nodeName.toString().toLowerCase() == '--edge_id') {\n          edgesStartIndex = i + 1;\n          break;\n        }\n        var nodeId = data[1];\n        var nodeType = data[2];\n        var parentID = data[3];\n        var posX = data.length > 4 ? data[4] : \"0\"; //if posX not given\n        var posY = data.length > 5 ? data[5] : \"0\"; //if posY not given\n        var nodeWidth = data.length > 6 ? data[6] : undefined;\n        var nodeHeight = data.length > 7 ? data[7] : undefined;\n\n        //add parsed Node\n        var newNode = {\n          group: 'nodes',\n          data: {\n            id: nodeId,\n            label: nodeName,\n            ports: [],\n            bbox: {\n              x: parseFloat(posX),\n              y: parseFloat(posY),\n              w: nodeWidth,\n              h: nodeHeight\n            }\n          }\n        };\n        if (this.validateNodeType(nodeType)) {\n          this.convertTypeToClass(newNode, nodeType, true);\n          this.addInfoBox(newNode);\n        } else {\n          throw \"Node type mismatched...\";\n        }\n        if (parentID != '-1') {\n          newNode.data.parent = parentID;\n        }\n        if (newNode.data[\"class\"]) {\n          elementUtilities.extendNodeDataWithClassDefaults(newNode.data, newNode.data[\"class\"]);\n          if (!newNode.data.bbox.w || !newNode.data.bbox.h) {\n            var defaults = elementUtilities.getDefaultProperties(newNode.data[\"class\"]);\n            newNode.data.bbox.w = newNode.data.bbox.w || defaults.width;\n            newNode.data.bbox.h = newNode.data.bbox.h || defaults.height;\n          }\n        }\n        nodes.push(newNode);\n      }\n\n      //Start parsing edges\n      for (var i = edgesStartIndex; i < lines.length; i++) {\n        //EOF finish loop\n        if (lines[i].length === 0) {\n          break;\n        }\n        var data = lines[i].toString().split('\\t');\n        var edgeID = data[0];\n        var edgeSource = data[1];\n        var edgeTarget = data[2];\n        var edgeType = data[3];\n        var newEdge = {\n          group: 'edges',\n          data: {\n            id: edgeID,\n            source: edgeSource,\n            target: edgeTarget\n          }\n        };\n        if (this.validateEdgeType(edgeType)) this.convertTypeToClass(newEdge, edgeType);else {\n          throw \"Edge Type mismatched...\";\n        }\n        elementUtilities.extendEdgeDataWithClassDefaults(newEdge.data, newEdge.data[\"class\"]);\n        edges.push(newEdge);\n      }\n      var jsGraph = {};\n      jsGraph.nodes = nodes;\n      jsGraph.edges = edges;\n      return jsGraph;\n    }\n  };\n  return tdToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/tab-delimited-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/text-utilities.js":
/*!*****************************************!*\
  !*** ./src/utilities/text-utilities.js ***!
  \*****************************************/
/***/ ((module) => {

eval("/*\n * Text utilities for common usage\n */\n\nvar textUtilities = {\n  // same purpose as previous one, but with clearer responsibility\n  truncate: function truncate(text, font, width) {\n    text = text + \"\";\n    var context = document.createElement('canvas').getContext(\"2d\");\n    context.font = font;\n    // check trivial case first, when entire text is already small enough\n    if (context.measureText(text).width < width) {\n      return text;\n    } else {\n      var ellipsis = \"..\";\n      // if ellipsis alone is already too large\n      if (context.measureText(ellipsis).width > width) {\n        return \"\";\n      }\n      var finalLength; // this should always have a value after the loop\n      for (var i = 0; i < text.length; i++) {\n        var subtext = text.substring(0, i) + ellipsis;\n        if (context.measureText(subtext).width > width) {\n          // we're too far, take the previous index\n          finalLength = i > 0 ? i - 1 : 0;\n          break;\n        }\n      }\n      return text.substring(0, finalLength) + ellipsis;\n    }\n  },\n  // ensure that returned string follows xsd:ID standard\n  // should follow r'^[a-zA-Z_][\\w.-]*$'\n  getXMLValidId: function getXMLValidId(originalId) {\n    var newId = \"\";\n    var xmlValidRegex = /^[a-zA-Z_][\\w.-]*$/;\n    if (!xmlValidRegex.test(originalId)) {\n      // doesn't comply\n      newId = originalId;\n      newId = newId.replace(/[^\\w.-]/g, \"\");\n      if (!xmlValidRegex.test(newId)) {\n        // still doesn't comply\n        newId = \"_\" + newId;\n        if (!xmlValidRegex.test(newId)) {\n          // normally we should never enter this\n          // if for some obscure reason we still don't comply, throw error.\n          throw new Error(\"Can't make identifer comply to xsd:ID requirements: \" + newId);\n        }\n      }\n      return newId;\n    } else {\n      return originalId;\n    }\n  },\n  getWidthByContent: function getWidthByContent(content, fontFamily, fontSize, options) {\n    var DEFAULT_MARGIN = 5;\n    var lines = content.split(\"\\n\");\n    var context = document.createElement('canvas').getContext('2d');\n    // should not make type check so '===' should not be used here\n    var shouldAppend = parseFloat(fontSize) == fontSize;\n    var validFontSize = shouldAppend ? fontSize + 'px' : fontSize;\n    context.font = validFontSize + ' ' + fontFamily;\n    var width = 0;\n    lines.forEach(function (line) {\n      var w = context.measureText(line).width;\n      if (w > width) {\n        width = w;\n      }\n    });\n    var margin = options && options.margin;\n    if (margin == null) {\n      margin = DEFAULT_MARGIN;\n    }\n    width += 2 * margin;\n    var min = options && options.min;\n    var max = options && options.max;\n    if (min != null && width < min) {\n      width = min;\n    } else if (max != null && width > max) {\n      width = max;\n    }\n    return width;\n  },\n  FromKebabToCamelCase: function FromKebabToCamelCase(input) {\n    return input.replace(/(-\\w)/g, function (m) {\n      return m[1].toUpperCase();\n    });\n  },\n  FromCamelToKebabCase: function FromCamelToKebabCase(input) {\n    return input.replace(/[\\w]([A-Z])/g, function (m) {\n      return m[0] + \"-\" + m[1];\n    }).toLowerCase();\n  }\n};\nmodule.exports = textUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/text-utilities.js\n");

/***/ }),

/***/ "./src/utilities/ui-utilities-factory.js":
/*!***********************************************!*\
  !*** ./src/utilities/ui-utilities-factory.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/*\n* Commonly needed UI Utilities\n*/\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var optionUtilities;\n  var options;\n  function uiUtilities(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n  }\n  uiUtilities.startSpinner = function (className) {\n    if (!className) {\n      className = 'default-class';\n    }\n    console.log(\"spinner started\", className);\n    if ($('.' + className).length === 0) {\n      var containerWidth = $(options.networkContainerSelector).width();\n      var containerHeight = $(options.networkContainerSelector).height();\n      $(options.networkContainerSelector + ':parent').prepend('<div style=\"position: absolute; z-index: 9999999; left: 45%; top: ' + containerHeight / 2 + 'px;\" class=\"' + className + '-wrapper\">' + '<div style=\"margin: 0 auto; margin-bottom: 5px; width:50px\"><i class=\"fa fa-spinner fa-spin fa-3x fa-fw ' + className + '\"></i></div>' + '<div style=\"width: 220px; height 20%\"><i class=\"' + className + '-text\">Take a sip of your coffee while you wait...</i></div>' + '</div>');\n      $(\".\" + className + '-text').fadeOut(0);\n    }\n  };\n  uiUtilities.showSpinnerText = function (className) {\n    $(\".\" + className + '-text').fadeIn(0);\n  };\n  uiUtilities.endSpinner = function (className) {\n    if (!className) {\n      className = 'default-class';\n    }\n    if ($('.' + className + '-wrapper').length > 0) {\n      $('.' + className + '-wrapper').remove();\n    }\n  };\n  return uiUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3VpLXV0aWxpdGllcy1mYWN0b3J5LmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSUEsWUFBWSxHQUFHQyxtQkFBTyxDQUFDLHlEQUFpQixDQUFDO0FBQzdDLElBQUlDLElBQUksR0FBR0YsWUFBWSxDQUFDRyxPQUFPLENBQUMsQ0FBQztBQUNqQyxJQUFJQyxNQUFNLEdBQUdDLENBQUMsR0FBR0gsSUFBSSxDQUFDRSxNQUFNO0FBRTVCRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFZO0VBRTVCLElBQUlDLGVBQWU7RUFDbkIsSUFBSUMsT0FBTztFQUVYLFNBQVNDLFdBQVdBLENBQUVDLEtBQUssRUFBRTtJQUMzQkgsZUFBZSxHQUFHRyxLQUFLLENBQUNILGVBQWU7SUFDdkNDLE9BQU8sR0FBR0QsZUFBZSxDQUFDSSxVQUFVLENBQUMsQ0FBQztFQUN4QztFQUVBRixXQUFXLENBQUNHLFlBQVksR0FBRyxVQUFVQyxTQUFTLEVBQUU7SUFDOUMsSUFBSSxDQUFDQSxTQUFTLEVBQUU7TUFDZEEsU0FBUyxHQUFHLGVBQWU7SUFDN0I7SUFDSEMsT0FBTyxDQUFDQyxHQUFHLENBQUMsaUJBQWlCLEVBQUVGLFNBQVMsQ0FBQztJQUV0QyxJQUFJVCxDQUFDLENBQUMsR0FBRyxHQUFHUyxTQUFTLENBQUMsQ0FBQ0csTUFBTSxLQUFLLENBQUMsRUFBRTtNQUNwQyxJQUFJQyxjQUFjLEdBQUdiLENBQUMsQ0FBQ0ksT0FBTyxDQUFDVSx3QkFBd0IsQ0FBQyxDQUFDQyxLQUFLLENBQUMsQ0FBQztNQUNoRSxJQUFJQyxlQUFlLEdBQUdoQixDQUFDLENBQUNJLE9BQU8sQ0FBQ1Usd0JBQXdCLENBQUMsQ0FBQ0csTUFBTSxDQUFDLENBQUM7TUFDbEVqQixDQUFDLENBQUNJLE9BQU8sQ0FBQ1Usd0JBQXdCLEdBQUcsU0FBUyxDQUFDLENBQUNJLE9BQU8sQ0FBQyxvRUFBb0UsR0FBR0YsZUFBZSxHQUFHLENBQUMsR0FBRyxjQUFjLEdBQUNQLFNBQVMsR0FBQyxZQUFZLEdBQzFMLDBHQUEwRyxHQUFHQSxTQUFTLEdBQUcsY0FBYyxHQUN2SSxrREFBa0QsR0FBR0EsU0FBUyxHQUFHLDhEQUE4RCxHQUMvSCxRQUFRLENBQUM7TUFDVFQsQ0FBQyxDQUFDLEdBQUcsR0FBQ1MsU0FBUyxHQUFDLE9BQU8sQ0FBQyxDQUFDVSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3BDO0VBQ0YsQ0FBQztFQUNEZCxXQUFXLENBQUNlLGVBQWUsR0FBRyxVQUFTWCxTQUFTLEVBQ2hEO0lBQ0VULENBQUMsQ0FBQyxHQUFHLEdBQUNTLFNBQVMsR0FBQyxPQUFPLENBQUMsQ0FBQ1ksTUFBTSxDQUFDLENBQUMsQ0FBQztFQUNwQyxDQUFDO0VBRURoQixXQUFXLENBQUNpQixVQUFVLEdBQUcsVUFBVWIsU0FBUyxFQUFFO0lBQzVDLElBQUksQ0FBQ0EsU0FBUyxFQUFFO01BQ2RBLFNBQVMsR0FBRyxlQUFlO0lBQzdCO0lBRUEsSUFBSVQsQ0FBQyxDQUFDLEdBQUcsR0FBR1MsU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQy9DWixDQUFDLENBQUMsR0FBRyxHQUFHUyxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUNjLE1BQU0sQ0FBQyxDQUFDO0lBQzFDO0VBQ0QsQ0FBQztFQUdELE9BQU9sQixXQUFXO0FBQ25CLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy91aS11dGlsaXRpZXMtZmFjdG9yeS5qcz83ZjMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvbW1vbmx5IG5lZWRlZCBVSSBVdGlsaXRpZXNcbiovXG5cbnZhciBsaWJVdGlsaXRpZXMgPSByZXF1aXJlKCcuL2xpYi11dGlsaXRpZXMnKTtcbnZhciBsaWJzID0gbGliVXRpbGl0aWVzLmdldExpYnMoKTtcbnZhciBqUXVlcnkgPSAkID0gbGlicy5qUXVlcnk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gdmFyIG9wdGlvblV0aWxpdGllcztcbiB2YXIgb3B0aW9ucztcblxuIGZ1bmN0aW9uIHVpVXRpbGl0aWVzIChwYXJhbSkge1xuICAgb3B0aW9uVXRpbGl0aWVzID0gcGFyYW0ub3B0aW9uVXRpbGl0aWVzO1xuICAgb3B0aW9ucyA9IG9wdGlvblV0aWxpdGllcy5nZXRPcHRpb25zKCk7XG4gfVxuXG4gdWlVdGlsaXRpZXMuc3RhcnRTcGlubmVyID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgaWYgKCFjbGFzc05hbWUpIHtcbiAgICAgY2xhc3NOYW1lID0gJ2RlZmF1bHQtY2xhc3MnO1xuICAgfVxuY29uc29sZS5sb2coXCJzcGlubmVyIHN0YXJ0ZWRcIiwgY2xhc3NOYW1lKVxuXG4gICBpZiAoJCgnLicgKyBjbGFzc05hbWUpLmxlbmd0aCA9PT0gMCkge1xuICAgIHZhciBjb250YWluZXJXaWR0aCA9ICQob3B0aW9ucy5uZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IpLndpZHRoKCk7XG4gICAgdmFyIGNvbnRhaW5lckhlaWdodCA9ICQob3B0aW9ucy5uZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IpLmhlaWdodCgpO1xuICAgICQob3B0aW9ucy5uZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IgKyAnOnBhcmVudCcpLnByZXBlbmQoJzxkaXYgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHotaW5kZXg6IDk5OTk5OTk7IGxlZnQ6IDQ1JTsgdG9wOiAnICsgY29udGFpbmVySGVpZ2h0IC8gMiArICdweDtcIiBjbGFzcz1cIicrY2xhc3NOYW1lKyctd3JhcHBlclwiPicrXG4gICAgJzxkaXYgc3R5bGU9XCJtYXJnaW46IDAgYXV0bzsgbWFyZ2luLWJvdHRvbTogNXB4OyB3aWR0aDo1MHB4XCI+PGkgY2xhc3M9XCJmYSBmYS1zcGlubmVyIGZhLXNwaW4gZmEtM3ggZmEtZncgJyArIGNsYXNzTmFtZSArICdcIj48L2k+PC9kaXY+JytcbiAgICAnPGRpdiBzdHlsZT1cIndpZHRoOiAyMjBweDsgaGVpZ2h0IDIwJVwiPjxpIGNsYXNzPVwiJyArIGNsYXNzTmFtZSArICctdGV4dFwiPlRha2UgYSBzaXAgb2YgeW91ciBjb2ZmZWUgd2hpbGUgeW91IHdhaXQuLi48L2k+PC9kaXY+JytcbiAgICAnPC9kaXY+Jyk7XG4gICAgJChcIi5cIitjbGFzc05hbWUrJy10ZXh0JykuZmFkZU91dCgwKVxuICAgfVxuIH07XG4gdWlVdGlsaXRpZXMuc2hvd1NwaW5uZXJUZXh0ID0gZnVuY3Rpb24oY2xhc3NOYW1lKVxuIHtcbiAgICQoXCIuXCIrY2xhc3NOYW1lKyctdGV4dCcpLmZhZGVJbigwKVxuIH1cblxuIHVpVXRpbGl0aWVzLmVuZFNwaW5uZXIgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICBpZiAoIWNsYXNzTmFtZSkge1xuICAgICBjbGFzc05hbWUgPSAnZGVmYXVsdC1jbGFzcyc7XG4gICB9XG5cbiAgIGlmICgkKCcuJyArIGNsYXNzTmFtZSArICctd3JhcHBlcicpLmxlbmd0aCA+IDApIHtcbiAgICAkKCcuJyArIGNsYXNzTmFtZSArICctd3JhcHBlcicpLnJlbW92ZSgpO1xuICB9XG4gfTtcblxuXG4gcmV0dXJuIHVpVXRpbGl0aWVzO1xufTtcbiJdLCJuYW1lcyI6WyJsaWJVdGlsaXRpZXMiLCJyZXF1aXJlIiwibGlicyIsImdldExpYnMiLCJqUXVlcnkiLCIkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvblV0aWxpdGllcyIsIm9wdGlvbnMiLCJ1aVV0aWxpdGllcyIsInBhcmFtIiwiZ2V0T3B0aW9ucyIsInN0YXJ0U3Bpbm5lciIsImNsYXNzTmFtZSIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJjb250YWluZXJXaWR0aCIsIm5ldHdvcmtDb250YWluZXJTZWxlY3RvciIsIndpZHRoIiwiY29udGFpbmVySGVpZ2h0IiwiaGVpZ2h0IiwicHJlcGVuZCIsImZhZGVPdXQiLCJzaG93U3Bpbm5lclRleHQiLCJmYWRlSW4iLCJlbmRTcGlubmVyIiwicmVtb3ZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/ui-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/undo-redo-action-functions-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/undo-redo-action-functions-factory.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("/*\n * This file exports the functions to be utilized in undoredo extension actions\n */\n\nmodule.exports = function () {\n  var elementUtilities;\n  var experimentalDataOverlay;\n  var mainUtilities;\n  var cy;\n  function undoRedoActionFunctions(param) {\n    elementUtilities = param.elementUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    mainUtilities = param.mainUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  undoRedoActionFunctions.deleteElesSimple = function (param) {\n    return elementUtilities.deleteElesSimple(param.eles);\n  };\n  undoRedoActionFunctions.restoreEles = function (eles) {\n    var param = {};\n    param.eles = elementUtilities.restoreEles(eles);\n    return param;\n  };\n  undoRedoActionFunctions.deleteNodesSmart = function (param) {\n    if (param.firstTime) {\n      return elementUtilities.deleteNodesSmart(param.eles);\n    }\n    return elementUtilities.deleteElesSimple(param.eles);\n  };\n  undoRedoActionFunctions.setPortsOrdering = function (param) {\n    var nodes = param.nodes;\n    var ordering = param.ordering;\n    var portDistance = param.portDistance;\n    var connectedEdges = nodes.connectedEdges();\n    var nodePropMap = {}; // Node prop map for current status of the nodes it is to be attached to the result map. It includes node current port ordering and current ports.\n    var edgePropMap = {}; // Edge prop map for current status of the nodes it is to be attached to the result map. It includes edge portsource and porttarget.\n\n    // Fill node/edge prop maps for undo/redo actions\n\n    // Node prop map includes a copy of node ports\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var ports = node.data('ports');\n      var currentOrdering = elementUtilities.getPortsOrdering(node); // Get the current node ports ordering\n      var portsCopy = ports.length === 2 ? [{\n        id: ports[0].id,\n        x: ports[0].x,\n        y: ports[0].y\n      }, {\n        id: ports[1].id,\n        x: ports[1].x,\n        y: ports[1].y\n      }] : [];\n      nodePropMap[node.id()] = {\n        ordering: currentOrdering,\n        ports: portsCopy\n      };\n    }\n\n    // Node prop map includes edge portsource and porttarget\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      edgePropMap[edge.id()] = {\n        portsource: edge.data('portsource'),\n        porttarget: edge.data('porttarget')\n      };\n    }\n    var result = {\n      nodes: nodes,\n      nodePropMap: nodePropMap,\n      edgePropMap: edgePropMap\n    };\n\n    // If this is the first time call related method from element utilities else go back to the stored props of nodes/edges\n    if (param.firstTime) {\n      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);\n    } else {\n      cy.startBatch();\n\n      // Go back to stored node ports state\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var portsToReturn = param.nodePropMap[node.id()].ports;\n        var orderingsToReturn = param.nodePropMap[node.id()].ordering;\n        node.data('ports', portsToReturn);\n        node.data('portsordering', orderingsToReturn); // Update the cached ports ordering\n      }\n\n      // Go back to stored edge portsource/porttargets state\n      for (var i = 0; i < connectedEdges.length; i++) {\n        var edge = connectedEdges[i];\n        var props = param.edgePropMap[edge.id()];\n        edge.data('portsource', props.portsource);\n        edge.data('porttarget', props.porttarget);\n      }\n      cy.endBatch();\n    }\n    return result;\n  };\n  undoRedoActionFunctions.hideExp = function (param) {\n    var expName = param.expName;\n    var fileName = param.fileName;\n    return experimentalDataOverlay.hideExp(fileName, expName);\n  };\n  undoRedoActionFunctions.unhideExp = function (param) {\n    var expName = param.expName;\n    var fileName = param.fileName;\n    return experimentalDataOverlay.unhideExp(fileName, expName);\n  };\n  undoRedoActionFunctions.hideAll = function () {\n    return experimentalDataOverlay.hideAll();\n  };\n  undoRedoActionFunctions.hideAllUndo = function (param) {\n    var invisibleFile = param.invisibleFile;\n    var invisibleExp = param.invisibleExp;\n    return experimentalDataOverlay.hideAllUndo(invisibleFile, invisibleExp);\n  };\n  undoRedoActionFunctions.unhideAll = function () {\n    return experimentalDataOverlay.unhideAll();\n  };\n  undoRedoActionFunctions.unhideAllUndo = function (param) {\n    var visibleFile = param.visibleFile;\n    var visibleExp = param.visibleExp;\n    return experimentalDataOverlay.unhideFileUndo(visibleFile, visibleExp);\n  };\n  undoRedoActionFunctions.hideFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.hideFile(fileName);\n  };\n  undoRedoActionFunctions.hideFileUndo = function (param) {\n    var fileName = param.fileName;\n    var invisible = param.invisible;\n    return experimentalDataOverlay.hideFileUndo(fileName, invisible);\n  };\n  undoRedoActionFunctions.unhideFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.unhideFile(fileName);\n  };\n  undoRedoActionFunctions.unhideFileUndo = function (param) {\n    var fileName = param.fileName;\n    var visible = param.visible;\n    return experimentalDataOverlay.unhideFileUndo(fileName, visible);\n  };\n  undoRedoActionFunctions.addExp = function (param) {\n    var fileName = param.fileName;\n    var expName = param.expName;\n    var isVisible = param.isVisible;\n    var values = param.values;\n    var groupArray = param.groupArray;\n    return experimentalDataOverlay.addExp(fileName, expName, isVisible, values, groupArray);\n  };\n  undoRedoActionFunctions.removeExp = function (param) {\n    var fileName = param.fileName;\n    var expName = param.expName;\n    return experimentalDataOverlay.removeExp(fileName, expName);\n  };\n  undoRedoActionFunctions.addFile = function (param) {\n    var fileName = param.fileName;\n    var parsed = param.parsed;\n    var grouped = param.grouped;\n    var visible = param.visible;\n    var visiblef = param.visiblef;\n    return experimentalDataOverlay.addFile(fileName, parsed, visible, grouped, visiblef);\n  };\n  undoRedoActionFunctions.removeFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.removeFile(fileName);\n  };\n  undoRedoActionFunctions.removeAll = function (param) {\n    return experimentalDataOverlay.removeAll();\n  };\n  undoRedoActionFunctions.restoreAll = function (param) {\n    var parsed = param.parsed;\n    var grouped = param.grouped;\n    var visible = param.visible;\n    var visiblef = param.visiblef;\n    return experimentalDataOverlay.restoreAll(parsed, visible, grouped, visiblef);\n  };\n  undoRedoActionFunctions.setCompoundPadding = function (newPadding) {\n    var result = mainUtilities.getCompoundPadding();\n    mainUtilities.setCompoundPadding(newPadding);\n    return result;\n  };\n  return undoRedoActionFunctions;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/undo-redo-action-functions-factory.js\n");

/***/ }),

/***/ "./src/utilities/validMapProperties.js":
/*!*********************************************!*\
  !*** ./src/utilities/validMapProperties.js ***!
  \*********************************************/
/***/ ((module) => {

eval("/*\n* Lookup object for valid map properties.\n* In the future it could be combined with other similar properties/functions in a new file.\n*/\nmodule.exports = {\n  compoundPadding: true,\n  extraCompartmentPadding: true,\n  extraComplexPadding: true,\n  arrowScale: true,\n  showComplexName: true,\n  dynamicLabelSize: true,\n  inferNestingOnLoad: true,\n  fitLabelsToNodes: true,\n  fitLabelsToInfoboxes: true,\n  recalculateLayoutOnComplexityManagement: true,\n  rearrangeOnComplexityManagement: true,\n  animateOnDrawingChanges: true,\n  adjustNodeLabelFontSizeAutomatically: true,\n  enablePorts: true,\n  allowCompoundNodeResize: true,\n  mapColorScheme: true,\n  mapColorSchemeStyle: true,\n  mapName: true,\n  mapDescription: true,\n  enableSIFTopologyGrouping: true,\n  experimentDescription: true\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3ZhbGlkTWFwUHJvcGVydGllcy5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb21wb3VuZFBhZGRpbmciLCJleHRyYUNvbXBhcnRtZW50UGFkZGluZyIsImV4dHJhQ29tcGxleFBhZGRpbmciLCJhcnJvd1NjYWxlIiwic2hvd0NvbXBsZXhOYW1lIiwiZHluYW1pY0xhYmVsU2l6ZSIsImluZmVyTmVzdGluZ09uTG9hZCIsImZpdExhYmVsc1RvTm9kZXMiLCJmaXRMYWJlbHNUb0luZm9ib3hlcyIsInJlY2FsY3VsYXRlTGF5b3V0T25Db21wbGV4aXR5TWFuYWdlbWVudCIsInJlYXJyYW5nZU9uQ29tcGxleGl0eU1hbmFnZW1lbnQiLCJhbmltYXRlT25EcmF3aW5nQ2hhbmdlcyIsImFkanVzdE5vZGVMYWJlbEZvbnRTaXplQXV0b21hdGljYWxseSIsImVuYWJsZVBvcnRzIiwiYWxsb3dDb21wb3VuZE5vZGVSZXNpemUiLCJtYXBDb2xvclNjaGVtZSIsIm1hcENvbG9yU2NoZW1lU3R5bGUiLCJtYXBOYW1lIiwibWFwRGVzY3JpcHRpb24iLCJlbmFibGVTSUZUb3BvbG9neUdyb3VwaW5nIiwiZXhwZXJpbWVudERlc2NyaXB0aW9uIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy92YWxpZE1hcFByb3BlcnRpZXMuanM/NGM4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBMb29rdXAgb2JqZWN0IGZvciB2YWxpZCBtYXAgcHJvcGVydGllcy5cbiogSW4gdGhlIGZ1dHVyZSBpdCBjb3VsZCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHNpbWlsYXIgcHJvcGVydGllcy9mdW5jdGlvbnMgaW4gYSBuZXcgZmlsZS5cbiovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcG91bmRQYWRkaW5nOiB0cnVlLFxuICBleHRyYUNvbXBhcnRtZW50UGFkZGluZzogdHJ1ZSxcbiAgZXh0cmFDb21wbGV4UGFkZGluZzogdHJ1ZSxcbiAgYXJyb3dTY2FsZTogdHJ1ZSxcbiAgc2hvd0NvbXBsZXhOYW1lOiB0cnVlLFxuICBkeW5hbWljTGFiZWxTaXplOiB0cnVlLFxuICBpbmZlck5lc3RpbmdPbkxvYWQ6IHRydWUsXG4gIGZpdExhYmVsc1RvTm9kZXM6IHRydWUsXG4gIGZpdExhYmVsc1RvSW5mb2JveGVzOiB0cnVlLFxuICByZWNhbGN1bGF0ZUxheW91dE9uQ29tcGxleGl0eU1hbmFnZW1lbnQ6IHRydWUsXG4gIHJlYXJyYW5nZU9uQ29tcGxleGl0eU1hbmFnZW1lbnQ6IHRydWUsXG4gIGFuaW1hdGVPbkRyYXdpbmdDaGFuZ2VzOiB0cnVlLFxuICBhZGp1c3ROb2RlTGFiZWxGb250U2l6ZUF1dG9tYXRpY2FsbHk6IHRydWUsXG4gIGVuYWJsZVBvcnRzOiB0cnVlLFxuICBhbGxvd0NvbXBvdW5kTm9kZVJlc2l6ZTogdHJ1ZSxcbiAgbWFwQ29sb3JTY2hlbWU6IHRydWUsXG4gIG1hcENvbG9yU2NoZW1lU3R5bGU6IHRydWUsXG4gIG1hcE5hbWU6IHRydWUsXG4gIG1hcERlc2NyaXB0aW9uOiB0cnVlLFxuICBlbmFibGVTSUZUb3BvbG9neUdyb3VwaW5nOiB0cnVlLFxuICBleHBlcmltZW50RGVzY3JpcHRpb246IHRydWVcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZDLGVBQWUsRUFBRSxJQUFJO0VBQ3JCQyx1QkFBdUIsRUFBRSxJQUFJO0VBQzdCQyxtQkFBbUIsRUFBRSxJQUFJO0VBQ3pCQyxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsZUFBZSxFQUFFLElBQUk7RUFDckJDLGdCQUFnQixFQUFFLElBQUk7RUFDdEJDLGtCQUFrQixFQUFFLElBQUk7RUFDeEJDLGdCQUFnQixFQUFFLElBQUk7RUFDdEJDLG9CQUFvQixFQUFFLElBQUk7RUFDMUJDLHVDQUF1QyxFQUFFLElBQUk7RUFDN0NDLCtCQUErQixFQUFFLElBQUk7RUFDckNDLHVCQUF1QixFQUFFLElBQUk7RUFDN0JDLG9DQUFvQyxFQUFFLElBQUk7RUFDMUNDLFdBQVcsRUFBRSxJQUFJO0VBQ2pCQyx1QkFBdUIsRUFBRSxJQUFJO0VBQzdCQyxjQUFjLEVBQUUsSUFBSTtFQUNwQkMsbUJBQW1CLEVBQUUsSUFBSTtFQUN6QkMsT0FBTyxFQUFFLElBQUk7RUFDYkMsY0FBYyxFQUFFLElBQUk7RUFDcEJDLHlCQUF5QixFQUFFLElBQUk7RUFDL0JDLHFCQUFxQixFQUFFO0FBQ3pCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/validMapProperties.js\n");

/***/ }),

/***/ "./node_modules/console-browserify/index.js":
/*!**************************************************!*\
  !*** ./node_modules/console-browserify/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*global window, global*/\nvar util = __webpack_require__(/*! util */ \"util\")\nvar assert = __webpack_require__(/*! assert */ \"assert\")\nfunction now() { return new Date().getTime() }\n\nvar slice = Array.prototype.slice\nvar console\nvar times = {}\n\nif (typeof __webpack_require__.g !== \"undefined\" && __webpack_require__.g.console) {\n    console = __webpack_require__.g.console\n} else if (typeof window !== \"undefined\" && window.console) {\n    console = window.console\n} else {\n    console = {}\n}\n\nvar functions = [\n    [log, \"log\"],\n    [info, \"info\"],\n    [warn, \"warn\"],\n    [error, \"error\"],\n    [time, \"time\"],\n    [timeEnd, \"timeEnd\"],\n    [trace, \"trace\"],\n    [dir, \"dir\"],\n    [consoleAssert, \"assert\"]\n]\n\nfor (var i = 0; i < functions.length; i++) {\n    var tuple = functions[i]\n    var f = tuple[0]\n    var name = tuple[1]\n\n    if (!console[name]) {\n        console[name] = f\n    }\n}\n\nmodule.exports = console\n\nfunction log() {}\n\nfunction info() {\n    console.log.apply(console, arguments)\n}\n\nfunction warn() {\n    console.log.apply(console, arguments)\n}\n\nfunction error() {\n    console.warn.apply(console, arguments)\n}\n\nfunction time(label) {\n    times[label] = now()\n}\n\nfunction timeEnd(label) {\n    var time = times[label]\n    if (!time) {\n        throw new Error(\"No such label: \" + label)\n    }\n\n    delete times[label]\n    var duration = now() - time\n    console.log(label + \": \" + duration + \"ms\")\n}\n\nfunction trace() {\n    var err = new Error()\n    err.name = \"Trace\"\n    err.message = util.format.apply(null, arguments)\n    console.error(err.stack)\n}\n\nfunction dir(object) {\n    console.log(util.inspect(object) + \"\\n\")\n}\n\nfunction consoleAssert(expression) {\n    if (!expression) {\n        var arr = slice.call(arguments, 1)\n        assert.ok(false, util.format.apply(null, arr))\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29uc29sZS1icm93c2VyaWZ5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLGFBQWEsbUJBQU8sQ0FBQyxzQkFBUTtBQUM3QixpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLHFCQUFNLG9CQUFvQixxQkFBTTtBQUMzQyxjQUFjLHFCQUFNO0FBQ3BCLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLHNCQUFzQjtBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vbm9kZV9tb2R1bGVzL2NvbnNvbGUtYnJvd3NlcmlmeS9pbmRleC5qcz9jZTI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIHdpbmRvdywgZ2xvYmFsKi9cbnZhciB1dGlsID0gcmVxdWlyZShcInV0aWxcIilcbnZhciBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpXG5mdW5jdGlvbiBub3coKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSB9XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxudmFyIGNvbnNvbGVcbnZhciB0aW1lcyA9IHt9XG5cbmlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jb25zb2xlKSB7XG4gICAgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlXG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICBjb25zb2xlID0gd2luZG93LmNvbnNvbGVcbn0gZWxzZSB7XG4gICAgY29uc29sZSA9IHt9XG59XG5cbnZhciBmdW5jdGlvbnMgPSBbXG4gICAgW2xvZywgXCJsb2dcIl0sXG4gICAgW2luZm8sIFwiaW5mb1wiXSxcbiAgICBbd2FybiwgXCJ3YXJuXCJdLFxuICAgIFtlcnJvciwgXCJlcnJvclwiXSxcbiAgICBbdGltZSwgXCJ0aW1lXCJdLFxuICAgIFt0aW1lRW5kLCBcInRpbWVFbmRcIl0sXG4gICAgW3RyYWNlLCBcInRyYWNlXCJdLFxuICAgIFtkaXIsIFwiZGlyXCJdLFxuICAgIFtjb25zb2xlQXNzZXJ0LCBcImFzc2VydFwiXVxuXVxuXG5mb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0dXBsZSA9IGZ1bmN0aW9uc1tpXVxuICAgIHZhciBmID0gdHVwbGVbMF1cbiAgICB2YXIgbmFtZSA9IHR1cGxlWzFdXG5cbiAgICBpZiAoIWNvbnNvbGVbbmFtZV0pIHtcbiAgICAgICAgY29uc29sZVtuYW1lXSA9IGZcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc29sZVxuXG5mdW5jdGlvbiBsb2coKSB7fVxuXG5mdW5jdGlvbiBpbmZvKCkge1xuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cylcbn1cblxuZnVuY3Rpb24gd2FybigpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIGVycm9yKCkge1xuICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHRpbWUobGFiZWwpIHtcbiAgICB0aW1lc1tsYWJlbF0gPSBub3coKVxufVxuXG5mdW5jdGlvbiB0aW1lRW5kKGxhYmVsKSB7XG4gICAgdmFyIHRpbWUgPSB0aW1lc1tsYWJlbF1cbiAgICBpZiAoIXRpbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbDogXCIgKyBsYWJlbClcbiAgICB9XG5cbiAgICBkZWxldGUgdGltZXNbbGFiZWxdXG4gICAgdmFyIGR1cmF0aW9uID0gbm93KCkgLSB0aW1lXG4gICAgY29uc29sZS5sb2cobGFiZWwgKyBcIjogXCIgKyBkdXJhdGlvbiArIFwibXNcIilcbn1cblxuZnVuY3Rpb24gdHJhY2UoKSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcigpXG4gICAgZXJyLm5hbWUgPSBcIlRyYWNlXCJcbiAgICBlcnIubWVzc2FnZSA9IHV0aWwuZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjaylcbn1cblxuZnVuY3Rpb24gZGlyKG9iamVjdCkge1xuICAgIGNvbnNvbGUubG9nKHV0aWwuaW5zcGVjdChvYmplY3QpICsgXCJcXG5cIilcbn1cblxuZnVuY3Rpb24gY29uc29sZUFzc2VydChleHByZXNzaW9uKSB7XG4gICAgaWYgKCFleHByZXNzaW9uKSB7XG4gICAgICAgIHZhciBhcnIgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICAgICAgYXNzZXJ0Lm9rKGZhbHNlLCB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcnIpKVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/console-browserify/index.js\n");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "libsbgn.js":
/*!*****************************!*\
  !*** external "libsbgn.js" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("libsbgn.js");

/***/ }),

/***/ "libsbmljs_stable":
/*!***********************************!*\
  !*** external "libsbmljs_stable" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("libsbmljs_stable");

/***/ }),

/***/ "pretty-data":
/*!******************************!*\
  !*** external "pretty-data" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("pretty-data");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "xml2js":
/*!*************************!*\
  !*** external "xml2js" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("xml2js");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"sbgnviz","version":"6.0.1","description":"SBGNPD visualization library","main":"sbgnviz.js","licence":"LGPL-3.0","scripts":{"test":"karma start --single-run --browsers ChromeHeadless karma.conf.js","build":"webpack","debug-js":"nodemon -e js --watch src -x \\"npm run build-sbgnviz-js\\""},"repository":{"type":"git","url":"https://github.com/iVis-at-Bilkent/sbgnviz.js.git"},"bugs":{"url":"https://github.com/iVis-at-Bilkent/sbgnviz.js/issues"},"homepage":"https://github.com/iVis-at-Bilkent/sbgnviz.js/","peerDependencies":{"cytoscape":"iVis-at-Bilkent/cytoscape.js#unstable","file-saver":"^2.0.2","jquery":"^3.3.1","tippy.js":"^3.4.0"},"dependencies":{"@babel/helpers":"^7.22.6","libsbgn.js":"github:sbgn/libsbgn.js#develop","libsbmljs_stable":"^5.18.0-beta1","mime-types":"^2.1.35","pretty-data":"^0.40.0","xml2js":"^0.4.17"},"devDependencies":{"@babel/core":"^7.14.3","@babel/preset-env":"^7.14.2","babel-loader":"^8.2.2","chai":"^4.3.4","jquery":"^3.3.1","karma":"^6.3.2","karma-browserify":"^8.0.0","karma-chai":"^0.1.0","karma-chrome-launcher":"^3.1.0","karma-mocha":"^2.0.1","mocha":"^8.3.2","node-polyfill-webpack-plugin":"^1.1.2","webpack":"^5.38.1","webpack-cli":"^4.10.0","webpack-node-externals":"^3.0.0"}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});